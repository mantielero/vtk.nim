#ifdef C2NIM
#def VTKACCELERATORSVTKMDATAMODEL_EXPORT
#def VTKACCELERATORSVTKMFILTERS_EXPORT
#def VTKCHARTSCORE_EXPORT
#def VTKCOMMONARCHIVE_EXPORT
#def VTKCOMMONCOLOR_EXPORT
#def VTKCOMMONCOMPUTATIONALGEOMETRY_EXPORT
#def VTKCOMMONCORE_EXPORT
#def VTKCOMMONDATAMODEL_EXPORT
#def VTKCOMMONEXECUTIONMODEL_EXPORT
#def VTKCOMMONMATH_EXPORT
#def VTKCOMMONMISC_EXPORT
#def VTKCOMMONPYTHON_EXPORT
#def VTKCOMMONSYSTEM_EXPORT
#def VTKCOMMONTRANSFORMS_EXPORT
#def VTKDOMAINSCHEMISTRY_EXPORT
#def VTKDOMAINSCHEMISTRYOPENGL2_EXPORT
#def VTKDOMAINSPARALLELCHEMISTRY_EXPORT
#def VTKFILTERSAMR_EXPORT
#def VTKFILTERSCORE_EXPORT
#def VTKFILTERSEXTRACTION_EXPORT
#def VTKFILTERSFLOWPATHS_EXPORT
#def VTKFILTERSGENERAL_EXPORT
#def VTKFILTERSGENERIC_EXPORT
#def VTKFILTERSGEOMETRY_EXPORT
#def VTKFILTERSHYBRID_EXPORT
#def VTKFILTERSHYPERTREE_EXPORT
#def VTKFILTERSIMAGING_EXPORT
#def VTKFILTERSMODELING_EXPORT
#def VTKFILTERSPARALLELDIY2_EXPORT
#def VTKFILTERSPARALLEL_EXPORT
#def VTKFILTERSPARALLELFLOWPATHS_EXPORT
#def VTKFILTERSPARALLELGEOMETRY_EXPORT
#def VTKFILTERSPARALLELIMAGING_EXPORT
#def VTKFILTERSPARALLELMPI_EXPORT
#def VTKFILTERSPARALLELSTATISTICS_EXPORT
#def VTKFILTERSPARALLELVERDICT_EXPORT
#def VTKFILTERSPOINTS_EXPORT
#def VTKFILTERSPROGRAMMABLE_EXPORT
#def VTKFILTERSPYTHON_EXPORT
#def VTKFILTERSREEBGRAPH_EXPORT
#def VTKFILTERSSELECTION_EXPORT
#def VTKFILTERSSMP_EXPORT
#def VTKFILTERSSOURCES_EXPORT
#def VTKFILTERSSTATISTICS_EXPORT
#def VTKFILTERSTEXTURE_EXPORT
#def VTKFILTERSTOPOLOGY_EXPORT
#def VTKFILTERSVERDICT_EXPORT
#def VTKGEOVISCORE_EXPORT
#def VTKGEOVISGDAL_EXPORT
#def VTKGUISUPPORTQT_EXPORT
#def VTKGUISUPPORTQTQUICK_EXPORT
#def VTKGUISUPPORTQTSQL_EXPORT
#def VTKIMAGINGCOLOR_EXPORT
#def VTKIMAGINGCORE_EXPORT
#def VTKIMAGINGFOURIER_EXPORT
#def VTKIMAGINGGENERAL_EXPORT
#def VTKIMAGINGHYBRID_EXPORT
#def VTKIMAGINGMATH_EXPORT
#def VTKIMAGINGMORPHOLOGICAL_EXPORT
#def VTKIMAGINGOPENGL2_EXPORT
#def VTKIMAGINGSOURCES_EXPORT
#def VTKIMAGINGSTATISTICS_EXPORT
#def VTKIMAGINGSTENCIL_EXPORT
#def VTKINFOVISBOOSTGRAPHALGORITHMS_EXPORT
#def VTKINFOVISCORE_EXPORT
#def VTKINFOVISLAYOUT_EXPORT
#def VTKINTERACTIONIMAGE_EXPORT
#def VTKINTERACTIONSTYLE_EXPORT
#def VTKINTERACTIONWIDGETS_EXPORT
#def VTKIOADIOS2_EXPORT
#def VTKIOAMR_EXPORT
#def VTKIOASYNCHRONOUS_EXPORT
#def VTKIOCESIUM3DTILES_EXPORT
#def VTKIOCGNSREADER_EXPORT
#def VTKIOCHEMISTRY_EXPORT
#def VTKIOCITYGML_EXPORT
#def VTKIOCONVERGECFD_EXPORT
#def VTKIOCORE_EXPORT
#def VTKIOENSIGHT_EXPORT
#def VTKIOEXODUS_EXPORT
#def VTKIOEXPORT_EXPORT
#def VTKIOEXPORTGL2PS_EXPORT
#def VTKIOEXPORTPDF_EXPORT
#def VTKIOFFMPEG_EXPORT
#def VTKIOFIDES_EXPORT
#def VTKIOGDAL_EXPORT
#def VTKIOGEOJSON_EXPORT
#def VTKIOGEOMETRY_EXPORT
#def VTKIOH5PART_EXPORT
#def VTKIOH5RAGE_EXPORT
#def VTKIOHDF_EXPORT
#def VTKIOIMAGE_EXPORT
#def VTKIOIMPORT_EXPORT
#def VTKIOINFOVIS_EXPORT
#def VTKIOIOSS_EXPORT
#def VTKIOLAS_EXPORT
#def VTKIOLEGACY_EXPORT
#def VTKIOLSDYNA_EXPORT
#def VTKIOMINC_EXPORT
#def VTKIOMOTIONFX_EXPORT
#def VTKIOMOVIE_EXPORT
#def VTKIOMPIIMAGE_EXPORT
#def VTKIOMPIPARALLEL_EXPORT
#def VTKIOMYSQL_EXPORT
#def VTKIONETCDF_EXPORT
#def VTKIOODBC_EXPORT
#def VTKIOOGGTHEORA_EXPORT
#def VTKIOOMF_EXPORT
#def VTKIOOPENVDB_EXPORT
#def VTKIOPARALLELEXODUS_EXPORT
#def VTKIOPARALLEL_EXPORT
#def VTKIOPARALLELLSDYNA_EXPORT
#def VTKIOPARALLELNETCDF_EXPORT
#def VTKIOPARALLELXDMF3_EXPORT
#def VTKIOPARALLELXML_EXPORT
#def VTKIOPDAL_EXPORT
#def VTKIOPIO_EXPORT
#def VTKIOPLY_EXPORT
#def VTKIOPOSTGRESQL_EXPORT
#def VTKIOSEGY_EXPORT
#def VTKIOSQL_EXPORT
#def VTKIOTECPLOTTABLE_EXPORT
#def VTKIOTRUCHAS_EXPORT
#def VTKIOVERAOUT_EXPORT
#def VTKIOVIDEO_EXPORT
#def VTKIOVPIC_EXPORT
#def VTKIOXDMF2_EXPORT
#def VTKIOXDMF3_EXPORT
#def VTKIOXML_EXPORT
#def VTKIOXMLPARSER_EXPORT
#def VTKJAVA_EXPORT
#def VTKPARALLELCORE_EXPORT
#def VTKPARALLELDIY_EXPORT
#def VTKPARALLELMPI4PY_EXPORT
#def VTKPARALLELMPI_EXPORT
#def VTKPYTHONCONTEXT2D_EXPORT
#def VTKPYTHONINTERPRETER_EXPORT
#def VTKRENDERINGANNOTATION_EXPORT
#def VTKRENDERINGCONTEXT2D_EXPORT
#def VTKRENDERINGCONTEXTOPENGL2_EXPORT
#def VTKRENDERINGCORE_EXPORT
#def VTKRENDERINGEXTERNAL_EXPORT
#def VTKRENDERINGFFMPEGOPENGL2_EXPORT
#def VTKRENDERINGFREETYPE_EXPORT
#def VTKRENDERINGFREETYPEFONTCONFIG_EXPORT
#def VTKRENDERINGGL2PSOPENGL2_EXPORT
#def VTKRENDERINGHYPERTREEGRID_EXPORT
#def VTKRENDERINGIMAGE_EXPORT
#def VTKRENDERINGLABEL_EXPORT
#def VTKRENDERINGLICOPENGL2_EXPORT
#def VTKRENDERINGLOD_EXPORT
#def VTKRENDERINGMATPLOTLIB_EXPORT
#def VTKRENDERINGOPENGL2_EXPORT
#def VTKRENDERINGOPENVR_EXPORT
#def VTKRENDERINGOPENXR_EXPORT
#def VTKRENDERINGPARALLEL_EXPORT
#def VTKRENDERINGPARALLELLIC_EXPORT
#def VTKRENDERINGQT_EXPORT
#def VTKRENDERINGRAYTRACING_EXPORT
#def VTKRENDERINGSCENEGRAPH_EXPORT
#def VTKRENDERINGUI_EXPORT
#def VTKRENDERINGVOLUMEAMR_EXPORT
#def VTKRENDERINGVOLUME_EXPORT
#def VTKRENDERINGVOLUMEOPENGL2_EXPORT
#def VTKRENDERINGVR_EXPORT
#def VTKRENDERINGVTKJS_EXPORT
#def VTKTESTINGDATAMODEL_EXPORT
#def VTKTESTINGGENERICBRIDGE_EXPORT
#def VTKTESTINGIOSQL_EXPORT
#def VTKTESTINGRENDERING_EXPORT
#def VTKUTILITIESBENCHMARKS_EXPORT
#def VTKVIEWSCONTEXT2D_EXPORT
#def VTKVIEWSCORE_EXPORT
#def VTKVIEWSINFOVIS_EXPORT
#def VTKVIEWSQT_EXPORT
#def VTKWEBCORE_EXPORT
#def VTKWEBGLEXPORTER_EXPORT
#def VTKWRAPPINGPYTHONCORE_EXPORT

#def vtkInternalQuoteMacro(x) #x
#def vtkQuoteMacro(x) vtkInternalQuoteMacro(x)
#def vtkImageScalarTypeNameMacro(type)                                                          \
  (((type) == VTK_VOID) ? "void" :                                                                 \
  (((type) == VTK_BIT) ? "bit" :                                                                   \
  (((type) == VTK_CHAR) ? "char" :                                                                 \
  (((type) == VTK_SIGNED_CHAR) ? "signed char" :                                                   \
  (((type) == VTK_UNSIGNED_CHAR) ? "unsigned char" :                                               \
  (((type) == VTK_SHORT) ? "short" :                                                               \
  (((type) == VTK_UNSIGNED_SHORT) ? "unsigned short" :                                             \
  (((type) == VTK_INT) ? "int" :                                                                   \
  (((type) == VTK_UNSIGNED_INT) ? "unsigned int" :                                                 \
  (((type) == VTK_LONG) ? "long" :                                                                 \
  (((type) == VTK_UNSIGNED_LONG) ? "unsigned long" :                                               \
  (((type) == VTK_LONG_LONG) ? "long long" :                                                       \
  (((type) == VTK_UNSIGNED_LONG_LONG) ? "unsigned long long" :                                     \
  (((type) == VTK_FLOAT) ? "float" :                                                               \
  (((type) == VTK_DOUBLE) ? "double" :                                                             \
  (((type) == VTK_ID_TYPE) ? "idtype" :                                                            \
  (((type) == VTK_STRING) ? "string" :                                                             \
  (((type) == VTK_VARIANT) ? "variant" :                                                           \
  (((type) == VTK_OBJECT) ? "object" :                                                             \
  "Undefined")))))))))))))))))))
#def vtkSetMacro(name, type)                                                                    \
  virtual void Set##name(type _arg)                                                                \
  {                                                                                                \
    vtkDebugMacro(<< " setting " #name " to " << _arg);                                            \
    if (this->name != _arg)                                                                        \
    {                                                                                              \
      this->name = _arg;                                                                           \
      this->Modified();                                                                            \
    }                                                                                              \
  }
#def vtkSetMacroOverride(name, type)                                                            \
  void Set##name(type _arg) override                                                               \
  {                                                                                                \
    vtkDebugMacro(<< " setting " #name " to " << _arg);                                            \
    if (this->name != _arg)                                                                        \
    {                                                                                              \
      this->name = _arg;                                                                           \
      this->Modified();                                                                            \
    }                                                                                              \
  }
#def vtkGetMacro(name, type)                                                                    \
  virtual type Get##name() VTK_FUTURE_CONST                                                        \
  {                                                                                                \
    vtkDebugMacro(<< " returning " << #name " of " << this->name);                                 \
    return this->name;                                                                             \
  }
#def vtkSetEnumMacro(name, enumType)                                                            \
  virtual void Set##name(enumType _arg)                                                            \
  {                                                                                                \
    vtkDebugMacro(<< " setting " #name " to "                                                      \
                  << static_cast<std::underlying_type<enumType>::type>(_arg));                     \
    if (this->name != _arg)                                                                        \
    {                                                                                              \
      this->name = _arg;                                                                           \
      this->Modified();                                                                            \
    }                                                                                              \
  }
#def vtkSetEnumMacroOverride(name, enumType)                                                    \
  void Set##name(enumType _arg) override                                                           \
  {                                                                                                \
    vtkDebugMacro(<< " setting " #name " to "                                                      \
                  << static_cast<std::underlying_type<enumType>::type>(_arg));                     \
    if (this->name != _arg)                                                                        \
    {                                                                                              \
      this->name = _arg;                                                                           \
      this->Modified();                                                                            \
    }                                                                                              \
  }
#def vtkGetEnumMacro(name, enumType)                                                            \
  virtual enumType Get##name() const                                                               \
  {                                                                                                \
    vtkDebugMacro(<< " returning " << #name " of "                                                 \
                  << static_cast<std::underlying_type<enumType>::type>(this->name));               \
    return this->name;                                                                             \
  }
#def vtkSetStringMacro(name)                                                                    \
  virtual void Set##name(const char* _arg) vtkSetStringBodyMacro(name, _arg)
#def vtkSetStringMacroOverride(name)                                                            \
  void Set##name(const char* _arg) vtkSetStringBodyMacro(name, _arg) override
#def vtkSetFilePathMacro(name)                                                                  \
  virtual void Set##name(VTK_FILEPATH const char* _arg) vtkSetStringBodyMacro(name, _arg)
#def vtkSetFilePathMacroOverride(name)                                                          \
  void Set##name(VTK_FILEPATH const char* _arg) vtkSetStringBodyMacro(name, _arg) override
#def vtkSetStringBodyMacro(name, _arg)                                                          \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to " << (_arg ? _arg : "(null)"));                     \
    if (this->name == nullptr && _arg == nullptr)                                                  \
    {                                                                                              \
      return;                                                                                      \
    }                                                                                              \
    if (this->name && _arg && (!strcmp(this->name, _arg)))                                         \
    {                                                                                              \
      return;                                                                                      \
    }                                                                                              \
    delete[] this->name;                                                                           \
    if (_arg)                                                                                      \
    {                                                                                              \
      size_t n = strlen(_arg) + 1;                                                                 \
      char* cp1 = new char[n];                                                                     \
      const char* cp2 = (_arg);                                                                    \
      this->name = cp1;                                                                            \
      do                                                                                           \
      {                                                                                            \
        *cp1++ = *cp2++;                                                                           \
      } while (--n);                                                                               \
    }                                                                                              \
    else                                                                                           \
    {                                                                                              \
      this->name = nullptr;                                                                        \
    }                                                                                              \
    this->Modified();                                                                              \
  }
#def vtkGetStringMacro(name) virtual char* Get##name() vtkGetStringBodyMacro(name)
#def vtkGetFilePathMacro(name)                                                                  \
  virtual VTK_FILEPATH VTK_FUTURE_CONST char* Get##name()                                          \
    VTK_FUTURE_CONST vtkGetStringBodyMacro(name)
#def vtkGetStringBodyMacro(name)                                                                \
  {                                                                                                \
    vtkDebugMacro(<< " returning " << #name " of " << (this->name ? this->name : "(null)"));       \
    return this->name;                                                                             \
  }
#def vtkSetStdStringFromCharMacro(name)                                                         \
  virtual void Set##name(const char* arg)                                                          \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to " << (arg ? arg : "(null)"));                       \
    if (arg)                                                                                       \
    {                                                                                              \
      this->name = arg;                                                                            \
    }                                                                                              \
    else                                                                                           \
    {                                                                                              \
      this->name.clear();                                                                          \
    }                                                                                              \
    this->Modified();                                                                              \
  }
#def vtkSetStdStringFromCharMacroOverride(name)                                                 \
  void Set##name(const char* arg) override                                                         \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to " << (arg ? arg : "(null)"));                       \
    if (arg)                                                                                       \
    {                                                                                              \
      this->name = arg;                                                                            \
    }                                                                                              \
    else                                                                                           \
    {                                                                                              \
      this->name.clear();                                                                          \
    }                                                                                              \
    this->Modified();                                                                              \
  }
#def vtkGetCharFromStdStringMacro(name)                                                         \
  virtual const char* Get##name()                                                                  \
  {                                                                                                \
    vtkDebugMacro(<< " returning " << #name " of " << this->name);                                 \
    return this->name.c_str();                                                                     \
  }
#def vtkSetClampMacro(name, type, min, max)                                                     \
  virtual void Set##name(type _arg)                                                                \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to " << _arg);                                         \
    if (this->name != (_arg < min ? min : (_arg > max ? max : _arg)))                              \
    {                                                                                              \
      this->name = (_arg < min ? min : (_arg > max ? max : _arg));                                 \
      this->Modified();                                                                            \
    }                                                                                              \
  }                                                                                                \
  virtual type Get##name##MinValue() { return min; }                                               \
  virtual type Get##name##MaxValue() { return max; }
#def vtkSetClampMacroOverride(name, type, min, max)                                             \
  void Set##name(type _arg) override                                                               \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to " << _arg);                                         \
    if (this->name != (_arg < min ? min : (_arg > max ? max : _arg)))                              \
    {                                                                                              \
      this->name = (_arg < min ? min : (_arg > max ? max : _arg));                                 \
      this->Modified();                                                                            \
    }                                                                                              \
  }                                                                                                \
  type Get##name##MinValue() override { return min; }                                              \
  type Get##name##MaxValue() override { return max; }
#def vtkSetObjectBodyMacro(name, type, args)                                                    \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to " << args);                                         \
    if (this->name != args)                                                                        \
    {                                                                                              \
      type* tempSGMacroVar = this->name;                                                           \
      this->name = args;                                                                           \
      if (this->name != nullptr)                                                                   \
      {                                                                                            \
        this->name->Register(this);                                                                \
      }                                                                                            \
      if (tempSGMacroVar != nullptr)                                                               \
      {                                                                                            \
        tempSGMacroVar->UnRegister(this);                                                          \
      }                                                                                            \
      this->Modified();                                                                            \
    }                                                                                              \
  } 


#def vtkSetSmartPointerBodyMacro(name, type, args)                                              \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to " << args);                                         \
    if (this->name != args)                                                                        \
    {                                                                                              \
      this->name = args;                                                                           \
      this->Modified();                                                                            \
    }                                                                                              \
  }

#def vtkSetObjectMacro(name, type)                                                              \
  virtual void Set##name(type* _arg) { vtkSetObjectBodyMacro(name, type, _arg); }
#def vtkSetObjectMacroOverride(name, type)                                                      \
  void Set##name(type* _arg) override { vtkSetObjectBodyMacro(name, type, _arg); }

#def vtkSetSmartPointerMacro(name, type)                                                        \
  virtual void Set##name(type* _arg) { vtkSetSmartPointerBodyMacro(name, type, _arg); }
#def vtkSetSmartPointerMacroOverride(name, type)                                                \
  void Set##name(type* _arg) override { vtkSetSmartPointerBodyMacro(name, type, _arg); }

#def vtkSetObjectImplementationMacro(class, name, type) vtkCxxSetObjectMacro(class, name, type)

#def vtkCxxSetObjectMacro(cls, name, type)                                                      \
  void cls::Set##name(type* _arg) { vtkSetObjectBodyMacro(name, type, _arg); }

#def vtkCxxSetSmartPointerMacro(cls, name, type)                                                \
  void cls::Set##name(type* _arg) { vtkSetSmartPointerBodyMacro(name, type, _arg); }

#def vtkGetNewMacro(name, type)                                                                 \
  virtual type* Get##name()                                                                        \
  {                                                                                                \
    vtkDebugMacro(<< " returning " #name " address " << this->name);                               \
    return this->name;                                                                             \
  }

#def vtkGetObjectMacro(name, type)                                                              \
  virtual type* Get##name()                                                                        \
  {                                                                                                \
    vtkDebugMacro(<< " returning " #name " address " << static_cast<type*>(this->name));           \
    return this->name;                                                                             \
  }

#def vtkGetSmartPointerMacro(name, type) vtkGetObjectMacro(name, type)

#def vtkBooleanMacro(name, type)                                                                \
  virtual void name##On() { this->Set##name(static_cast<type>(1)); }                               \
  virtual void name##Off() { this->Set##name(static_cast<type>(0)); }


#def vtkSetVector2Macro(name, type)                                                             \
  virtual void Set##name(type _arg1, type _arg2)                                                   \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to (" << _arg1 << "," << _arg2 << ")");                \
    if ((this->name[0] != _arg1) || (this->name[1] != _arg2))                                      \
    {                                                                                              \
      this->name[0] = _arg1;                                                                       \
      this->name[1] = _arg2;                                                                       \
      this->Modified();                                                                            \
    }                                                                                              \
  }                                                                                                \
  void Set##name(const type _arg[2]) { this->Set##name(_arg[0], _arg[1]); }
#def vtkSetVector2MacroOverride(name, type)                                                     \
  void Set##name(type _arg1, type _arg2) override                                                  \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to (" << _arg1 << "," << _arg2 << ")");                \
    if ((this->name[0] != _arg1) || (this->name[1] != _arg2))                                      \
    {                                                                                              \
      this->name[0] = _arg1;                                                                       \
      this->name[1] = _arg2;                                                                       \
      this->Modified();                                                                            \
    }                                                                                              \
  }

#def vtkGetVector2Macro(name, type)                                                             \
  virtual type* Get##name() VTK_SIZEHINT(2)                                                        \
  {                                                                                                \
    vtkDebugMacro(<< " returning " << #name " pointer " << this->name);                            \
    return this->name;                                                                             \
  }                                                                                                \
  VTK_WRAPEXCLUDE                                                                                  \
  virtual void Get##name(type& _arg1, type& _arg2)                                                 \
  {                                                                                                \
    _arg1 = this->name[0];                                                                         \
    _arg2 = this->name[1];                                                                         \
    vtkDebugMacro(<< " returning " << #name " = (" << _arg1 << "," << _arg2 << ")");               \
  }                                                                                                \
  VTK_WRAPEXCLUDE                                                                                  \
  virtual void Get##name(type _arg[2]) { this->Get##name(_arg[0], _arg[1]); }

#def vtkSetVector3Macro(name, type)                                                             \
  virtual void Set##name(type _arg1, type _arg2, type _arg3)                                       \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to (" << _arg1 << "," << _arg2 << "," << _arg3         \
                  << ")");                                                                         \
    if ((this->name[0] != _arg1) || (this->name[1] != _arg2) || (this->name[2] != _arg3))          \
    {                                                                                              \
      this->name[0] = _arg1;                                                                       \
      this->name[1] = _arg2;                                                                       \
      this->name[2] = _arg3;                                                                       \
      this->Modified();                                                                            \
    }                                                                                              \
  }                                                                                                \
  virtual void Set##name(const type _arg[3]) { this->Set##name(_arg[0], _arg[1], _arg[2]); }
#def vtkSetVector3MacroOverride(name, type)                                                     \
  void Set##name(type _arg1, type _arg2, type _arg3) override                                      \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to (" << _arg1 << "," << _arg2 << "," << _arg3         \
                  << ")");                                                                         \
    if ((this->name[0] != _arg1) || (this->name[1] != _arg2) || (this->name[2] != _arg3))          \
    {                                                                                              \
      this->name[0] = _arg1;                                                                       \
      this->name[1] = _arg2;                                                                       \
      this->name[2] = _arg3;                                                                       \
      this->Modified();                                                                            \
    }                                                                                              \
  }                                                                                                \
  void Set##name(const type _arg[3]) override { this->Set##name(_arg[0], _arg[1], _arg[2]); }

#def vtkGetVector3Macro(name, type)                                                             \
  virtual type* Get##name() VTK_SIZEHINT(3)                                                        \
  {                                                                                                \
    vtkDebugMacro(<< " returning " << #name " pointer " << this->name);                            \
    return this->name;                                                                             \
  }                                                                                                \
  VTK_WRAPEXCLUDE                                                                                  \
  virtual void Get##name(type& _arg1, type& _arg2, type& _arg3)                                    \
  {                                                                                                \
    _arg1 = this->name[0];                                                                         \
    _arg2 = this->name[1];                                                                         \
    _arg3 = this->name[2];                                                                         \
    vtkDebugMacro(<< " returning " << #name " = (" << _arg1 << "," << _arg2 << "," << _arg3        \
                  << ")");                                                                         \
  }                                                                                                \
  VTK_WRAPEXCLUDE                                                                                  \
  virtual void Get##name(type _arg[3]) { this->Get##name(_arg[0], _arg[1], _arg[2]); }

#def vtkSetVector4Macro(name, type)                                                             \
  virtual void Set##name(type _arg1, type _arg2, type _arg3, type _arg4)                           \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to (" << _arg1 << "," << _arg2 << "," << _arg3 << ","  \
                  << _arg4 << ")");                                                                \
    if ((this->name[0] != _arg1) || (this->name[1] != _arg2) || (this->name[2] != _arg3) ||        \
      (this->name[3] != _arg4))                                                                    \
    {                                                                                              \
      this->name[0] = _arg1;                                                                       \
      this->name[1] = _arg2;                                                                       \
      this->name[2] = _arg3;                                                                       \
      this->name[3] = _arg4;                                                                       \
      this->Modified();                                                                            \
    }                                                                                              \
  }                                                                                                \
  virtual void Set##name(const type _arg[4])                                                       \
  {                                                                                                \
    this->Set##name(_arg[0], _arg[1], _arg[2], _arg[3]);                                           \
  }
#def vtkSetVector4MacroOverride(name, type)                                                     \
  void Set##name(type _arg1, type _arg2, type _arg3, type _arg4) override                          \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to (" << _arg1 << "," << _arg2 << "," << _arg3 << ","  \
                  << _arg4 << ")");                                                                \
    if ((this->name[0] != _arg1) || (this->name[1] != _arg2) || (this->name[2] != _arg3) ||        \
      (this->name[3] != _arg4))                                                                    \
    {                                                                                              \
      this->name[0] = _arg1;                                                                       \
      this->name[1] = _arg2;                                                                       \
      this->name[2] = _arg3;                                                                       \
      this->name[3] = _arg4;                                                                       \
      this->Modified();                                                                            \
    }                                                                                              \
  }                                                                                                \
  void Set##name(const type _arg[4]) override                                                      \
  {                                                                                                \
    this->Set##name(_arg[0], _arg[1], _arg[2], _arg[3]);                                           \
  }

#def vtkGetVector4Macro(name, type)                                                             \
  virtual type* Get##name() VTK_SIZEHINT(4)                                                        \
  {                                                                                                \
    vtkDebugMacro(<< " returning " << #name " pointer " << this->name);                            \
    return this->name;                                                                             \
  }                                                                                                \
  VTK_WRAPEXCLUDE                                                                                  \
  virtual void Get##name(type& _arg1, type& _arg2, type& _arg3, type& _arg4)                       \
  {                                                                                                \
    _arg1 = this->name[0];                                                                         \
    _arg2 = this->name[1];                                                                         \
    _arg3 = this->name[2];                                                                         \
    _arg4 = this->name[3];                                                                         \
    vtkDebugMacro(<< " returning " << #name " = (" << _arg1 << "," << _arg2 << "," << _arg3 << "," \
                  << _arg4 << ")");                                                                \
  }                                                                                                \
  VTK_WRAPEXCLUDE                                                                                  \
  virtual void Get##name(type _arg[4]) { this->Get##name(_arg[0], _arg[1], _arg[2], _arg[3]); }

#def vtkSetVector6Macro(name, type)                                                             \
  virtual void Set##name(type _arg1, type _arg2, type _arg3, type _arg4, type _arg5, type _arg6)   \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to (" << _arg1 << "," << _arg2 << "," << _arg3 << ","  \
                  << _arg4 << "," << _arg5 << "," << _arg6 << ")");                                \
    if ((this->name[0] != _arg1) || (this->name[1] != _arg2) || (this->name[2] != _arg3) ||        \
      (this->name[3] != _arg4) || (this->name[4] != _arg5) || (this->name[5] != _arg6))            \
    {                                                                                              \
      this->name[0] = _arg1;                                                                       \
      this->name[1] = _arg2;                                                                       \
      this->name[2] = _arg3;                                                                       \
      this->name[3] = _arg4;                                                                       \
      this->name[4] = _arg5;                                                                       \
      this->name[5] = _arg6;                                                                       \
      this->Modified();                                                                            \
    }                                                                                              \
  }                                                                                                \
  virtual void Set##name(const type _arg[6])                                                       \
  {                                                                                                \
    this->Set##name(_arg[0], _arg[1], _arg[2], _arg[3], _arg[4], _arg[5]);                         \
  }
#def vtkSetVector6MacroOverride(name, type)                                                     \
  void Set##name(type _arg1, type _arg2, type _arg3, type _arg4, type _arg5, type _arg6) override  \
  {                                                                                                \
    vtkDebugMacro(<< " setting " << #name " to (" << _arg1 << "," << _arg2 << "," << _arg3 << ","  \
                  << _arg4 << "," << _arg5 << "," << _arg6 << ")");                                \
    if ((this->name[0] != _arg1) || (this->name[1] != _arg2) || (this->name[2] != _arg3) ||        \
      (this->name[3] != _arg4) || (this->name[4] != _arg5) || (this->name[5] != _arg6))            \
    {                                                                                              \
      this->name[0] = _arg1;                                                                       \
      this->name[1] = _arg2;                                                                       \
      this->name[2] = _arg3;                                                                       \
      this->name[3] = _arg4;                                                                       \
      this->name[4] = _arg5;                                                                       \
      this->name[5] = _arg6;                                                                       \
      this->Modified();                                                                            \
    }                                                                                              \
  }                                                                                                \
  void Set##name(const type _arg[6]) override                                                      \
  {                                                                                                \
    this->Set##name(_arg[0], _arg[1], _arg[2], _arg[3], _arg[4], _arg[5]);                         \
  }

#def vtkGetVector6Macro(name, type)                                                             \
  virtual type* Get##name() VTK_SIZEHINT(6)                                                        \
  {                                                                                                \
    vtkDebugMacro(<< " returning " << #name " pointer " << this->name);                            \
    return this->name;                                                                             \
  }                                                                                                \
  VTK_WRAPEXCLUDE                                                                                  \
  virtual void Get##name(                                                                          \
    type& _arg1, type& _arg2, type& _arg3, type& _arg4, type& _arg5, type& _arg6)                  \
  {                                                                                                \
    _arg1 = this->name[0];                                                                         \
    _arg2 = this->name[1];                                                                         \
    _arg3 = this->name[2];                                                                         \
    _arg4 = this->name[3];                                                                         \
    _arg5 = this->name[4];                                                                         \
    _arg6 = this->name[5];                                                                         \
    vtkDebugMacro(<< " returning " << #name " = (" << _arg1 << "," << _arg2 << "," << _arg3 << "," \
                  << _arg4 << "," << _arg5 << "," << _arg6 << ")");                                \
  }                                                                                                \
  VTK_WRAPEXCLUDE                                                                                  \
  virtual void Get##name(type _arg[6])                                                             \
  {                                                                                                \
    this->Get##name(_arg[0], _arg[1], _arg[2], _arg[3], _arg[4], _arg[5]);                         \
  }






#def vtkSetVectorMacro(name, type, count)                                                       \
  virtual void Set##name(const type data[])                                                        \
  {                                                                                                \
    int i;                                                                                         \
    for (i = 0; i < count; i++)                                                                    \
    {                                                                                              \
      if (data[i] != this->name[i])                                                                \
      {                                                                                            \
        break;                                                                                     \
      }                                                                                            \
    }                                                                                              \
    if (i < count)                                                                                 \
    {                                                                                              \
      for (i = 0; i < count; i++)                                                                  \
      {                                                                                            \
        this->name[i] = data[i];                                                                   \
      }                                                                                            \
      this->Modified();                                                                            \
    }                                                                                              \
  }
#def vtkSetVectorMacroOverride(name, type, count)                                               \
  void Set##name(const type data[]) override                                                       \
  {                                                                                                \
    int i;                                                                                         \
    for (i = 0; i < count; i++)                                                                    \
    {                                                                                              \
      if (data[i] != this->name[i])                                                                \
      {                                                                                            \
        break;                                                                                     \
      }                                                                                            \
    }                                                                                              \
    if (i < count)                                                                                 \
    {                                                                                              \
      for (i = 0; i < count; i++)                                                                  \
      {                                                                                            \
        this->name[i] = data[i];                                                                   \
      }                                                                                            \
      this->Modified();                                                                            \
    }                                                                                              \
  }







#def vtkGetVectorMacro(name, type, count)                                                       \
  virtual type* Get##name() VTK_SIZEHINT(count)                                                    \
  {                                                                                                \
    vtkDebugMacro(<< " returning " << #name " pointer " << this->name);                            \
    return this->name;                                                                             \
  }                                                                                                \
  VTK_WRAPEXCLUDE                                                                                  \
  virtual void Get##name(type data[count])                                                         \
  {                                                                                                \
    for (int i = 0; i < count; i++)                                                                \
    {                                                                                              \
      data[i] = this->name[i];                                                                     \
    }                                                                                              \
  }




#def vtkGenericWarningMacro(x)                                                                  \
  do                                                                                               \
  {                                                                                                \
    if (vtkObject::GetGlobalWarningDisplay())                                                      \
    {                                                                                              \
      vtkOStreamWrapper::EndlType endl;                                                            \
      vtkOStreamWrapper::UseEndl(endl);                                                            \
      vtkOStrStreamWrapper vtkmsg;                                                                 \
      vtkmsg << "" x;                                                                              \
      std::string _filename = vtksys::SystemTools::GetFilenameName(__FILE__);                      \
      vtkOutputWindowDisplayGenericWarningText(_filename.c_str(), __LINE__, vtkmsg.str());         \
      vtkmsg.rdbuf()->freeze(0);                                                                   \
    }                                                                                              \
  } while (false)





#def vtkDebugMacro(x) vtkDebugWithObjectMacro(this, x)





#def vtkWarningMacro(x) vtkWarningWithObjectMacro(this, x)





#def vtkErrorMacro(x) vtkErrorWithObjectMacro(this, x)








#def vtkErrorWithObjectMacro(self, x)                                                           \
  do                                                                                               \
  {                                                                                                \
    if (vtkObject::GetGlobalWarningDisplay())                                                      \
    {                                                                                              \
      vtkOStreamWrapper::EndlType endl;                                                            \
      vtkOStreamWrapper::UseEndl(endl);                                                            \
      vtkOStrStreamWrapper vtkmsg;                                                                 \
      vtkObject* _object = const_cast<vtkObject*>(static_cast<const vtkObject*>(self));            \
      if (_object)                                                                                 \
      {                                                                                            \
        vtkmsg << _object->GetObjectDescription() << ": ";                                         \
      }                                                                                            \
      else                                                                                         \
      {                                                                                            \
        vtkmsg << "(nullptr): ";                                                                   \
      }                                                                                            \
      vtkmsg << "" x;                                                                              \
      std::string _filename = vtksys::SystemTools::GetFilenameName(__FILE__);                      \
      vtkOutputWindowDisplayErrorText(_filename.c_str(), __LINE__, vtkmsg.str(), _object);         \
      vtkmsg.rdbuf()->freeze(0);                                                                   \
      vtkObject::BreakOnError();                                                                   \
    }                                                                                              \
  } while (false)








#def vtkWarningWithObjectMacro(self, x)                                                         \
  do                                                                                               \
  {                                                                                                \
    if (vtkObject::GetGlobalWarningDisplay())                                                      \
    {                                                                                              \
      vtkOStreamWrapper::EndlType endl;                                                            \
      vtkOStreamWrapper::UseEndl(endl);                                                            \
      vtkOStrStreamWrapper vtkmsg;                                                                 \
      vtkObject* _object = const_cast<vtkObject*>(static_cast<const vtkObject*>(self));            \
      if (_object)                                                                                 \
      {                                                                                            \
        vtkmsg << _object->GetObjectDescription() << ": ";                                         \
      }                                                                                            \
      else                                                                                         \
      {                                                                                            \
        vtkmsg << "(nullptr): ";                                                                   \
      }                                                                                            \
      vtkmsg << "" x;                                                                              \
      std::string _filename = vtksys::SystemTools::GetFilenameName(__FILE__);                      \
      vtkOutputWindowDisplayWarningText(_filename.c_str(), __LINE__, vtkmsg.str(), _object);       \
      vtkmsg.rdbuf()->freeze(0);                                                                   \
    }                                                                                              \
  } while (false)

#def vtkWorldCoordinateMacro(name)                                                              \
  virtual vtkCoordinate* Get##name##Coordinate()                                                   \
  {                                                                                                \
    vtkDebugMacro(<< this->GetClassName() << " (" << this                                          \
                  << "): returning " #name "Coordinate address " << this->name##Coordinate);       \
    return this->name##Coordinate;                                                                 \
  }                                                                                                \
  virtual void Set##name(double x[3]) { this->Set##name(x[0], x[1], x[2]); }                       \
  virtual void Set##name(double x, double y, double z)                                             \
  {                                                                                                \
    this->name##Coordinate->SetValue(x, y, z);                                                     \
  }                                                                                                \
  virtual double* Get##name() VTK_SIZEHINT(3) { return this->name##Coordinate->GetValue(); }

#def vtkViewportCoordinateMacro(name)                                                           \
  virtual vtkCoordinate* Get##name##Coordinate()                                                   \
  {                                                                                                \
    vtkDebugMacro(<< this->GetClassName() << " (" << this                                          \
                  << "): returning " #name "Coordinate address " << this->name##Coordinate);       \
    return this->name##Coordinate;                                                                 \
  }                                                                                                \
  virtual void Set##name(double x[2]) { this->Set##name(x[0], x[1]); }                             \
  virtual void Set##name(double x, double y) { this->name##Coordinate->SetValue(x, y); }           \
  virtual double* Get##name() VTK_SIZEHINT(2) { return this->name##Coordinate->GetValue(); }



#def vtkAbstractTypeMacroWithNewInstanceType(                                                   \
  thisClass, superclass, instanceType, thisClassName)                                              \
protected:                                                                                         \
  const char* GetClassNameInternal() const override { return thisClassName; }                      \
                                                                                                   \
public:                                                                                            \
  typedef superclass Superclass;                                                                   \
  static vtkTypeBool IsTypeOf(const char* type)                                                    \
  {                                                                                                \
    if (!strcmp(thisClassName, type))                                                              \
    {                                                                                              \
      return 1;                                                                                    \
    }                                                                                              \
    return superclass::IsTypeOf(type);                                                             \
  }                                                                                                \
  vtkTypeBool IsA(const char* type) override { return this->thisClass::IsTypeOf(type); }           \
  static thisClass* SafeDownCast(vtkObjectBase* o)                                                 \
  {                                                                                                \
    if (o && o->IsA(thisClassName))                                                                \
    {                                                                                              \
      return static_cast<thisClass*>(o);                                                           \
    }                                                                                              \
    return nullptr;                                                                                \
  }                                                                                                \
  VTK_NEWINSTANCE instanceType* NewInstance() const                                                \
  {                                                                                                \
    return instanceType::SafeDownCast(this->NewInstanceInternal());                                \
  }                                                                                                \
  static vtkIdType GetNumberOfGenerationsFromBaseType(const char* type)                            \
  {                                                                                                \
    if (!strcmp(thisClassName, type))                                                              \
    {                                                                                              \
      return 0;                                                                                    \
    }                                                                                              \
    return 1 + superclass::GetNumberOfGenerationsFromBaseType(type);                               \
  }                                                                                                \
  vtkIdType GetNumberOfGenerationsFromBase(const char* type) override                              \
  {                                                                                                \
    return this->thisClass::GetNumberOfGenerationsFromBaseType(type);                              \
  }


#def vtkAbstractTypeMacro(thisClass, superclass)                                                \
  vtkAbstractTypeMacroWithNewInstanceType(thisClass, superclass, thisClass, #thisClass)            \
                                                                                                   \
public:



#def vtkTypeMacro(thisClass, superclass)                                                        \
  vtkAbstractTypeMacro(thisClass, superclass)                                                      \
                                                                                                   \
protected:                                                                                         \
  vtkObjectBase* NewInstanceInternal() const override { return thisClass::New(); }                 \
                                                                                                   \
public:







#def vtkBaseTypeMacro(thisClass, superclass)                                                    \
  vtkAbstractTypeMacro(thisClass, superclass)                                                      \
                                                                                                   \
protected:                                                                                         \
  virtual vtkObjectBase* NewInstanceInternal() const { return thisClass::New(); }                  \
                                                                                                   \
public:












#def vtkAbstractTemplateTypeMacro(thisClass, superclass)                                        \
  vtkAbstractTypeMacroWithNewInstanceType(                                                         \
    thisClass, superclass, thisClass, typeid(thisClass).name())                                    \
                                                                                                   \
public:



#def vtkTemplateTypeMacro(thisClass, superclass)                                                \
  vtkAbstractTemplateTypeMacro(thisClass, superclass);                                             \
                                                                                                   \
protected:                                                                                         \
  vtkObjectBase* NewInstanceInternal() const override { return thisClass::New(); }                 \
                                                                                                   \
public:














#def vtkTemplateMacroCase(typeN, type, call)                                                    \
  case typeN:                                                                                      \
  {                                                                                                \
    typedef type VTK_TT;                                                                           \
    call;                                                                                          \
  }                                                                                                \
  break
#def vtkTemplateMacro(call)                                                                     \
  vtkTemplateMacroCase(VTK_DOUBLE, double, call);                                                  \
  vtkTemplateMacroCase(VTK_FLOAT, float, call);                                                    \
  vtkTemplateMacroCase(VTK_LONG_LONG, long long, call);                                            \
  vtkTemplateMacroCase(VTK_UNSIGNED_LONG_LONG, unsigned long long, call);                          \
  vtkTemplateMacroCase(VTK_ID_TYPE, vtkIdType, call);                                              \
  vtkTemplateMacroCase(VTK_LONG, long, call);                                                      \
  vtkTemplateMacroCase(VTK_UNSIGNED_LONG, unsigned long, call);                                    \
  vtkTemplateMacroCase(VTK_INT, int, call);                                                        \
  vtkTemplateMacroCase(VTK_UNSIGNED_INT, unsigned int, call);                                      \
  vtkTemplateMacroCase(VTK_SHORT, short, call);                                                    \
  vtkTemplateMacroCase(VTK_UNSIGNED_SHORT, unsigned short, call);                                  \
  vtkTemplateMacroCase(VTK_CHAR, char, call);                                                      \
  vtkTemplateMacroCase(VTK_SIGNED_CHAR, signed char, call);                                        \
  vtkTemplateMacroCase(VTK_UNSIGNED_CHAR, unsigned char, call)


#def vtkExtendedTemplateMacro(call)                                                             \
  vtkTemplateMacro(call);                                                                          \
  vtkTemplateMacroCase(VTK_STRING, vtkStdString, call)












#def vtkTemplate2Macro(call)                                                                    \
  vtkTemplate2MacroCase1(VTK_DOUBLE, double, call);                                                \
  vtkTemplate2MacroCase1(VTK_FLOAT, float, call);                                                  \
  vtkTemplate2MacroCase1(VTK_LONG_LONG, long long, call);                                          \
  vtkTemplate2MacroCase1(VTK_UNSIGNED_LONG_LONG, unsigned long long, call);                        \
  vtkTemplate2MacroCase1(VTK_ID_TYPE, vtkIdType, call);                                            \
  vtkTemplate2MacroCase1(VTK_LONG, long, call);                                                    \
  vtkTemplate2MacroCase1(VTK_UNSIGNED_LONG, unsigned long, call);                                  \
  vtkTemplate2MacroCase1(VTK_INT, int, call);                                                      \
  vtkTemplate2MacroCase1(VTK_UNSIGNED_INT, unsigned int, call);                                    \
  vtkTemplate2MacroCase1(VTK_SHORT, short, call);                                                  \
  vtkTemplate2MacroCase1(VTK_UNSIGNED_SHORT, unsigned short, call);                                \
  vtkTemplate2MacroCase1(VTK_CHAR, char, call);                                                    \
  vtkTemplate2MacroCase1(VTK_SIGNED_CHAR, signed char, call);                                      \
  vtkTemplate2MacroCase1(VTK_UNSIGNED_CHAR, unsigned char, call)
#def vtkTemplate2MacroCase1(type1N, type1, call)                                                \
  vtkTemplate2MacroCase2(type1N, type1, VTK_DOUBLE, double, call);                                 \
  vtkTemplate2MacroCase2(type1N, type1, VTK_FLOAT, float, call);                                   \
  vtkTemplate2MacroCase2(type1N, type1, VTK_LONG_LONG, long long, call);                           \
  vtkTemplate2MacroCase2(type1N, type1, VTK_UNSIGNED_LONG_LONG, unsigned long long, call);         \
  vtkTemplate2MacroCase2(type1N, type1, VTK_ID_TYPE, vtkIdType, call);                             \
  vtkTemplate2MacroCase2(type1N, type1, VTK_LONG, long, call);                                     \
  vtkTemplate2MacroCase2(type1N, type1, VTK_UNSIGNED_LONG, unsigned long, call);                   \
  vtkTemplate2MacroCase2(type1N, type1, VTK_INT, int, call);                                       \
  vtkTemplate2MacroCase2(type1N, type1, VTK_UNSIGNED_INT, unsigned int, call);                     \
  vtkTemplate2MacroCase2(type1N, type1, VTK_SHORT, short, call);                                   \
  vtkTemplate2MacroCase2(type1N, type1, VTK_UNSIGNED_SHORT, unsigned short, call);                 \
  vtkTemplate2MacroCase2(type1N, type1, VTK_CHAR, char, call);                                     \
  vtkTemplate2MacroCase2(type1N, type1, VTK_SIGNED_CHAR, signed char, call);                       \
  vtkTemplate2MacroCase2(type1N, type1, VTK_UNSIGNED_CHAR, unsigned char, call)
#def vtkTemplate2MacroCase2(type1N, type1, type2N, type2, call)                                 \
  case vtkTemplate2PackMacro(type1N, type2N):                                                      \
  {                                                                                                \
    typedef type1 VTK_T1;                                                                          \
    typedef type2 VTK_T2;                                                                          \
    call;                                                                                          \
  };                                                                                               \
  break
#def vtkTemplate2PackMacro(type1N, type2N) ((((type1N)&0xFF) << 8) | ((type2N)&0xFF))





















#def vtkArrayIteratorTemplateMacroCase(typeN, type, call)                                       \
  vtkTemplateMacroCase(typeN, vtkArrayIteratorTemplate<type>, call)
#def vtkArrayIteratorTemplateMacro(call)                                                        \
  vtkArrayIteratorTemplateMacroCase(VTK_DOUBLE, double, call);                                     \
  vtkArrayIteratorTemplateMacroCase(VTK_FLOAT, float, call);                                       \
  vtkArrayIteratorTemplateMacroCase(VTK_LONG_LONG, long long, call);                               \
  vtkArrayIteratorTemplateMacroCase(VTK_UNSIGNED_LONG_LONG, unsigned long long, call);             \
  vtkArrayIteratorTemplateMacroCase(VTK_ID_TYPE, vtkIdType, call);                                 \
  vtkArrayIteratorTemplateMacroCase(VTK_LONG, long, call);                                         \
  vtkArrayIteratorTemplateMacroCase(VTK_UNSIGNED_LONG, unsigned long, call);                       \
  vtkArrayIteratorTemplateMacroCase(VTK_INT, int, call);                                           \
  vtkArrayIteratorTemplateMacroCase(VTK_UNSIGNED_INT, unsigned int, call);                         \
  vtkArrayIteratorTemplateMacroCase(VTK_SHORT, short, call);                                       \
  vtkArrayIteratorTemplateMacroCase(VTK_UNSIGNED_SHORT, unsigned short, call);                     \
  vtkArrayIteratorTemplateMacroCase(VTK_CHAR, char, call);                                         \
  vtkArrayIteratorTemplateMacroCase(VTK_SIGNED_CHAR, signed char, call);                           \
  vtkArrayIteratorTemplateMacroCase(VTK_UNSIGNED_CHAR, unsigned char, call);                       \
  vtkArrayIteratorTemplateMacroCase(VTK_STRING, vtkStdString, call);                               \
  vtkTemplateMacroCase(VTK_BIT, vtkBitArrayIterator, call)



#def vtkAllEventsMacro()                                                                        \



#def vtkEventDeclarationMacro(_enum_name)                                                       \
  enum _enum_name                                                                                  \
  {                                                                                                \
    NoEvent = 0,                                                                                   \
    vtkAllEventsMacro() UserEvent = 1000                                                           \
  }

#endif