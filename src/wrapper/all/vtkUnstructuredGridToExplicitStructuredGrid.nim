## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkUnstructuredGridToExplicitStructuredGrid.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class   vtkUnstructuredGridToExplicitStructuredGrid
##  @brief   Filter which converts an unstructured grid data into an explicit structured grid.
##           The input grid must have a structured coordinates int cell array.
##           Moreover, its cell must be listed in the i-j-k order (k varying more ofter)
##

## !!!Ignored construct:  # vtkUnstructuredGridToExplicitStructuredGrid_h [NewLine] # vtkUnstructuredGridToExplicitStructuredGrid_h [NewLine] # vtkExplicitStructuredGridAlgorithm.h [NewLine] # vtkFiltersCoreModule.h  For export macro [NewLine] class VTKFILTERSCORE_EXPORT vtkUnstructuredGridToExplicitStructuredGrid : public vtkExplicitStructuredGridAlgorithm { public : static vtkUnstructuredGridToExplicitStructuredGrid * New ( ) ; protected : const char * GetClassNameInternal ( ) const override { return thisClass ; } public : typedef vtkExplicitStructuredGridAlgorithm Superclass ; static vtkTypeBool IsTypeOf ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 1 ; } return vtkExplicitStructuredGridAlgorithm :: IsTypeOf ( type ) ; } vtkTypeBool IsA ( const char * type ) override { return this -> vtkUnstructuredGridToExplicitStructuredGrid :: IsTypeOf ( type ) ; } static vtkUnstructuredGridToExplicitStructuredGrid * SafeDownCast ( vtkObjectBase * o ) { if ( o && o -> IsA ( thisClass ) ) { return static_cast < vtkUnstructuredGridToExplicitStructuredGrid * > ( o ) ; } return nullptr ; } VTK_NEWINSTANCE vtkUnstructuredGridToExplicitStructuredGrid * NewInstance ( ) const { return vtkUnstructuredGridToExplicitStructuredGrid :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkExplicitStructuredGridAlgorithm :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkUnstructuredGridToExplicitStructuredGrid :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkUnstructuredGridToExplicitStructuredGrid :: New ( ) ; } public : ; void PrintSelf ( ostream & os , vtkIndent indent ) override ; /@{ *
##  Get/Set the whole extents for the grid to produce. The size of the grid
##  must match the number of cells in the input.
##  virtual void SetWholeExtent ( int _arg1 , int _arg2 , int _arg3 , int _arg4 , int _arg5 , int _arg6 ) { vtkDebugWithObjectMacro ( this , <<  setting  << WholeExtent  to ( << _arg1 << , << _arg2 << , << _arg3 << , << _arg4 << , << _arg5 << , << _arg6 << ) ) ; if ( ( this -> WholeExtent [ 0 ] != _arg1 ) || ( this -> WholeExtent [ 1 ] != _arg2 ) || ( this -> WholeExtent [ 2 ] != _arg3 ) || ( this -> WholeExtent [ 3 ] != _arg4 ) || ( this -> WholeExtent [ 4 ] != _arg5 ) || ( this -> WholeExtent [ 5 ] != _arg6 ) ) { this -> WholeExtent [ 0 ] = _arg1 ; this -> WholeExtent [ 1 ] = _arg2 ; this -> WholeExtent [ 2 ] = _arg3 ; this -> WholeExtent [ 3 ] = _arg4 ; this -> WholeExtent [ 4 ] = _arg5 ; this -> WholeExtent [ 5 ] = _arg6 ; this -> Modified ( ) ; } } virtual void SetWholeExtent ( const int _arg [ 6 ] ) { this -> SetWholeExtent ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] , _arg [ 3 ] , _arg [ 4 ] , _arg [ 5 ] ) ; } ; virtual int * GetWholeExtent ( ) VTK_SIZEHINT ( 6 ) { vtkDebugWithObjectMacro ( this , <<  returning  << WholeExtent  pointer  << this -> WholeExtent ) ; return this -> WholeExtent ; } VTK_WRAPEXCLUDE virtual void GetWholeExtent ( int & _arg1 , int & _arg2 , int & _arg3 , int & _arg4 , int & _arg5 , int & _arg6 ) { _arg1 = this -> WholeExtent [ 0 ] ; _arg2 = this -> WholeExtent [ 1 ] ; _arg3 = this -> WholeExtent [ 2 ] ; _arg4 = this -> WholeExtent [ 3 ] ; _arg5 = this -> WholeExtent [ 4 ] ; _arg6 = this -> WholeExtent [ 5 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << WholeExtent  = ( << _arg1 << , << _arg2 << , << _arg3 << , << _arg4 << , << _arg5 << , << _arg6 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetWholeExtent ( int _arg [ 6 ] ) { this -> GetWholeExtent ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] , _arg [ 3 ] , _arg [ 4 ] , _arg [ 5 ] ) ; } ; /@} protected : vtkUnstructuredGridToExplicitStructuredGrid ( ) ; ~ vtkUnstructuredGridToExplicitStructuredGrid ( ) override = default ; int FillInputPortInformation ( int port , vtkInformation * info ) override ; int RequestInformation ( vtkInformation * , vtkInformationVector * * , vtkInformationVector * ) override ; int RequestData ( vtkInformation * , vtkInformationVector * * , vtkInformationVector * ) override ; int WholeExtent [ 6 ] ; private : vtkUnstructuredGridToExplicitStructuredGrid ( const vtkUnstructuredGridToExplicitStructuredGrid & ) = delete ; void operator = ( const vtkUnstructuredGridToExplicitStructuredGrid & ) = delete ; } ;
## Error: token expected: ; but got: [identifier]!!!
