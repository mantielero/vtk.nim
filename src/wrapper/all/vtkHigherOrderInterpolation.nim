## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkHigherOrderInterpolation.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
##  .NAME vtkHigherOrderInterpolation
##  .SECTION Description
##  .SECTION See Also

## !!!Ignored construct:  # vtkHigherOrderInterpolation_h [NewLine] # vtkHigherOrderInterpolation_h [NewLine] # vtkCommonDataModelModule.h  For export macro. # vtkObject.h [NewLine] # vtkSmartPointer.h  For API. [NewLine] # < vector >  For scratch storage. [NewLine]  Define this to include support for a "complete" (21- vs 18-point) wedge. # VTK_21_POINT_WEDGE true [NewLine] class vtkPoints ;
## Error: token expected: ; but got: [identifier]!!!

discard "forward decl of vtkVector2i"
discard "forward decl of vtkVector3d"
discard "forward decl of vtkHigherOrderTriangle"
## !!!Ignored construct:  class VTKCOMMONDATAMODEL_EXPORT vtkHigherOrderInterpolation : public vtkObject { public :  static vtkHigherOrderInterpolation* New(); void PrintSelf ( ostream & os , vtkIndent indent ) override ; protected : const char * GetClassNameInternal ( ) const override { return thisClass ; } public : typedef vtkObject Superclass ; static vtkTypeBool IsTypeOf ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 1 ; } return vtkObject :: IsTypeOf ( type ) ; } vtkTypeBool IsA ( const char * type ) override { return this -> vtkHigherOrderInterpolation :: IsTypeOf ( type ) ; } static vtkHigherOrderInterpolation * SafeDownCast ( vtkObjectBase * o ) { if ( o && o -> IsA ( thisClass ) ) { return static_cast < vtkHigherOrderInterpolation * > ( o ) ; } return nullptr ; } VTK_NEWINSTANCE vtkHigherOrderInterpolation * NewInstance ( ) const { return vtkHigherOrderInterpolation :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkObject :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkHigherOrderInterpolation :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkHigherOrderInterpolation :: New ( ) ; } public : ; static int Tensor1ShapeFunctions ( const int order [ 1 ] , const double * pcoords , double * shape , void ( * function_evaluate_shape_functions ) ( int , double , double * ) ) ; static int Tensor1ShapeDerivatives ( const int order [ 1 ] , const double * pcoords , double * derivs , void ( * function_evaluate_shape_and_gradient ) ( int , double , double * , double * ) ) ; static int Tensor2ShapeFunctions ( const int order [ 2 ] , const double * pcoords , double * shape , void ( * function_evaluate_shape_functions ) ( int , double , double * ) ) ; static int Tensor2ShapeDerivatives ( const int order [ 2 ] , const double * pcoords , double * derivs , void ( * function_evaluate_shape_and_gradient ) ( int , double , double * , double * ) ) ; static int Tensor3ShapeFunctions ( const int order [ 3 ] , const double * pcoords , double * shape , void ( * function_evaluate_shape_functions ) ( int , double , double * ) ) ; static int Tensor3ShapeDerivatives ( const int order [ 3 ] , const double * pcoords , double * derivs , void ( * function_evaluate_shape_and_gradient ) ( int , double , double * , double * ) ) ; virtual void Tensor3EvaluateDerivative ( const int order [ 3 ] , const double * pcoords , vtkPoints * points , const double * fieldVals , int fieldDim , double * fieldDerivs ) = 0 ; void Tensor3EvaluateDerivative ( const int order [ 3 ] , const double * pcoords , vtkPoints * points , const double * fieldVals , int fieldDim , double * fieldDerivs , void ( * function_evaluate_shape_and_gradient ) ( int , double , double * , double * ) ) ; static void WedgeShapeFunctions ( const int order [ 3 ] , const vtkIdType numberOfPoints , const double * pcoords , double * shape , vtkHigherOrderTriangle & tri , void ( * function_evaluate_shape_functions ) ( int , double , double * ) ) ; static void WedgeShapeDerivatives ( const int order [ 3 ] , const vtkIdType numberOfPoints , const double * pcoords , double * derivs , vtkHigherOrderTriangle & tri , void ( * function_evaluate_shape_and_gradient ) ( int , double , double * , double * ) ) ; *
##  Compute the inverse of the Jacobian and put the values in `inverse`. Returns
##  1 for success and 0 for failure (i.e. couldn't invert the Jacobian).
##  int JacobianInverse ( vtkPoints * points , const double * derivs , double * * inverse ) ; int JacobianInverseWedge ( vtkPoints * points , const double * derivs , double * * inverse ) ; virtual void WedgeEvaluate ( const int order [ 3 ] , const vtkIdType numberOfPoints , const double * pcoords , double * fieldVals , int fieldDim , double * fieldAtPCoords ) = 0 ; void WedgeEvaluate ( const int order [ 3 ] , const vtkIdType numberOfPoints , const double * pcoords , double * fieldVals , int fieldDim , double * fieldAtPCoords , vtkHigherOrderTriangle & tri , void ( * function_evaluate_shape_functions ) ( int , double , double * ) ) ; virtual void WedgeEvaluateDerivative ( const int order [ 3 ] , const double * pcoords , vtkPoints * points , const double * fieldVals , int fieldDim , double * fieldDerivs ) = 0 ; void WedgeEvaluateDerivative ( const int order [ 3 ] , const double * pcoords , vtkPoints * points , const double * fieldVals , int fieldDim , double * fieldDerivs , vtkHigherOrderTriangle & tri , void ( * function_evaluate_shape_and_gradient ) ( int , double , double * , double * ) ) ; static vtkVector3d GetParametricHexCoordinates ( int vertexId ) ; static vtkVector2i GetPointIndicesBoundingHexEdge ( int edgeId ) ; static int GetVaryingParameterOfHexEdge ( int edgeId ) ; static vtkVector2i GetFixedParametersOfHexEdge ( int edgeId ) ; static const int * GetPointIndicesBoundingHexFace ( int faceId ) VTK_SIZEHINT ( 4 ) ; static const int * GetEdgeIndicesBoundingHexFace ( int faceId ) VTK_SIZEHINT ( 4 ) ; static vtkVector2i GetVaryingParametersOfHexFace ( int faceId ) ; static int GetFixedParameterOfHexFace ( int faceId ) ; static vtkVector3d GetParametricWedgeCoordinates ( int vertexId ) ; static vtkVector2i GetPointIndicesBoundingWedgeEdge ( int edgeId ) ; static int GetVaryingParameterOfWedgeEdge ( int edgeId ) ; static vtkVector2i GetFixedParametersOfWedgeEdge ( int edgeId ) ; static const int * GetPointIndicesBoundingWedgeFace ( int faceId ) VTK_SIZEHINT ( 4 ) ; static const int * GetEdgeIndicesBoundingWedgeFace ( int faceId ) VTK_SIZEHINT ( 4 ) ; static vtkVector2i GetVaryingParametersOfWedgeFace ( int faceId ) ; static int GetFixedParameterOfWedgeFace ( int faceId ) ; static void AppendCurveCollocationPoints ( vtkSmartPointer < vtkPoints > & pts , const int order [ 1 ] ) ; static void AppendQuadrilateralCollocationPoints ( vtkSmartPointer < vtkPoints > & pts , const int order [ 2 ] ) ; static void AppendHexahedronCollocationPoints ( vtkSmartPointer < vtkPoints > & pts , const int order [ 3 ] ) ; static void AppendWedgeCollocationPoints ( vtkSmartPointer < vtkPoints > & pts , const int order [ 3 ] ) ; template < int N > static int NumberOfIntervals ( const int order [ N ] ) ; protected : vtkHigherOrderInterpolation ( ) ; ~ vtkHigherOrderInterpolation ( ) override ; void PrepareForOrder ( const int order [ 3 ] , const vtkIdType numberOfPoints ) ; std :: vector < double > ShapeSpace ; std :: vector < double > DerivSpace ; private : vtkHigherOrderInterpolation ( const vtkHigherOrderInterpolation & ) = delete ; void operator = ( const vtkHigherOrderInterpolation & ) = delete ; } ;
## Error: token expected: ; but got: [identifier]!!!

proc NumberOfIntervals*(order: array[N, cint]): cint {.
    importcpp: "VTKCOMMONDATAMODEL_EXPORT::NumberOfIntervals(@)",
    header: "vtkHigherOrderInterpolation.h".}