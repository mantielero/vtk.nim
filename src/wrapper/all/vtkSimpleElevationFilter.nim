## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkSimpleElevationFilter.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class   vtkSimpleElevationFilter
##  @brief   generate scalars along a specified direction
##
##  vtkSimpleElevationFilter is a filter to generate scalar values from a
##  dataset.  The scalar values are generated by dotting a user-specified
##  vector against a vector defined from the input dataset points to the
##  origin.
##
##  @warning
##  This class has been threaded with vtkSMPTools. Using TBB or other
##  non-sequential type (set in the CMake variable
##  VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.  Note
##  however that the associated threading/templating implements a fast path,
##  which will only kick in when the input has explicit point representation
##  (e.g. a vtkPointSet).
##
##  @warning
##  See also vtkElevationFilter provides more control over the operation,
##  including clamping the output scalars within a range.
##
##  @sa
##  vtkElevationFilter
##

## !!!Ignored construct:  # vtkSimpleElevationFilter_h [NewLine] # vtkSimpleElevationFilter_h [NewLine] # vtkDataSetAlgorithm.h [NewLine] # vtkFiltersCoreModule.h  For export macro [NewLine] class VTKFILTERSCORE_EXPORT vtkSimpleElevationFilter : public vtkDataSetAlgorithm { public : protected : const char * GetClassNameInternal ( ) const override { return thisClass ; } public : typedef vtkDataSetAlgorithm Superclass ; static vtkTypeBool IsTypeOf ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 1 ; } return vtkDataSetAlgorithm :: IsTypeOf ( type ) ; } vtkTypeBool IsA ( const char * type ) override { return this -> vtkSimpleElevationFilter :: IsTypeOf ( type ) ; } static vtkSimpleElevationFilter * SafeDownCast ( vtkObjectBase * o ) { if ( o && o -> IsA ( thisClass ) ) { return static_cast < vtkSimpleElevationFilter * > ( o ) ; } return nullptr ; } VTK_NEWINSTANCE vtkSimpleElevationFilter * NewInstance ( ) const { return vtkSimpleElevationFilter :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkDataSetAlgorithm :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkSimpleElevationFilter :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkSimpleElevationFilter :: New ( ) ; } public : ; void PrintSelf ( ostream & os , vtkIndent indent ) override ; *
##  Construct object with Vector=(0,0,1).
##  static vtkSimpleElevationFilter * New ( ) ; /@{ *
##  Define the vector with which to dot against.
##  virtual void SetVector ( double _arg1 , double _arg2 , double _arg3 ) { vtkDebugWithObjectMacro ( this , <<  setting  << Vector  to ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; if ( ( this -> Vector [ 0 ] != _arg1 ) || ( this -> Vector [ 1 ] != _arg2 ) || ( this -> Vector [ 2 ] != _arg3 ) ) { this -> Vector [ 0 ] = _arg1 ; this -> Vector [ 1 ] = _arg2 ; this -> Vector [ 2 ] = _arg3 ; this -> Modified ( ) ; } } virtual void SetVector ( const double _arg [ 3 ] ) { this -> SetVector ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual double * GetVector ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << Vector  pointer  << this -> Vector ) ; return this -> Vector ; } VTK_WRAPEXCLUDE virtual void GetVector ( double data [ 3 ] ) { for ( int i = 0 ; i < 3 ; i ++ ) { data [ i ] = this -> Vector [ i ] ; } } ; /@} protected : vtkSimpleElevationFilter ( ) ; ~ vtkSimpleElevationFilter ( ) override = default ; int RequestData ( vtkInformation * , vtkInformationVector * * , vtkInformationVector * ) override ; double Vector [ 3 ] ; private : vtkSimpleElevationFilter ( const vtkSimpleElevationFilter & ) = delete ; void operator = ( const vtkSimpleElevationFilter & ) = delete ; } ;
## Error: token expected: ; but got: [identifier]!!!
