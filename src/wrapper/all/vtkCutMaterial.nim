## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkCutMaterial.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class   vtkCutMaterial
##  @brief   Automatically computes the cut plane for a material array pair.
##
##  vtkCutMaterial computes a cut plane based on an up vector, center of the bounding box
##  and the location of the maximum variable value.
##   These computed values are available so that they can be used to set the camera
##  for the best view of the plane.
##

## !!!Ignored construct:  # vtkCutMaterial_h [NewLine] # vtkCutMaterial_h [NewLine] # vtkFiltersParallelModule.h  For export macro # vtkPolyDataAlgorithm.h [NewLine] class vtkPlane ;
## Error: token expected: ; but got: [identifier]!!!

## !!!Ignored construct:  class VTKFILTERSPARALLEL_EXPORT vtkCutMaterial : public vtkPolyDataAlgorithm { public : void PrintSelf ( ostream & os , vtkIndent indent ) override ; protected : const char * GetClassNameInternal ( ) const override { return thisClass ; } public : typedef vtkPolyDataAlgorithm Superclass ; static vtkTypeBool IsTypeOf ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 1 ; } return vtkPolyDataAlgorithm :: IsTypeOf ( type ) ; } vtkTypeBool IsA ( const char * type ) override { return this -> vtkCutMaterial :: IsTypeOf ( type ) ; } static vtkCutMaterial * SafeDownCast ( vtkObjectBase * o ) { if ( o && o -> IsA ( thisClass ) ) { return static_cast < vtkCutMaterial * > ( o ) ; } return nullptr ; } VTK_NEWINSTANCE vtkCutMaterial * NewInstance ( ) const { return vtkCutMaterial :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkPolyDataAlgorithm :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkCutMaterial :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkCutMaterial :: New ( ) ; } public : ; static vtkCutMaterial * New ( ) ; /@{ *
##  Cell array that contains the material values.
##  virtual void SetMaterialArrayName ( const char * _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << MaterialArrayName  to  << ( _arg ? _arg : (null) ) ) ; if ( this -> MaterialArrayName == nullptr && _arg == nullptr ) { return ; } if ( this -> MaterialArrayName && _arg && ( ! strcmp ( this -> MaterialArrayName , _arg ) ) ) { return ; } delete [ ] this -> MaterialArrayName ; if ( _arg ) { size_t n = strlen ( _arg ) + 1 ; char * cp1 = new char [ n ] ; const char * cp2 = ( _arg ) ; this -> MaterialArrayName = cp1 ; do { * cp1 ++ = * cp2 ++ ; } while ( -- n ) ; } else { this -> MaterialArrayName = nullptr ; } this -> Modified ( ) ; } ; virtual char * GetMaterialArrayName ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << MaterialArrayName  of  << ( this -> MaterialArrayName ? this -> MaterialArrayName : (null) ) ) ; return this -> MaterialArrayName ; } ; /@} /@{ *
##  Material to probe.
##  virtual void SetMaterial ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  Material  to  << _arg ) ; if ( this -> Material != _arg ) { this -> Material = _arg ; this -> Modified ( ) ; } } ; virtual int GetMaterial ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << Material  of  << this -> Material ) ; return this -> Material ; } ; /@} /@{ *
##  For now, we just use the cell values.
##  The array name to cut.
##  virtual void SetMaterialArrayNameArrayName ( const char * _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << ArrayName  to  << ( _arg ? _arg : (null) ) ) ; if ( this -> ArrayName == nullptr && _arg == nullptr ) { return ; } if ( this -> ArrayName && _arg && ( ! strcmp ( this -> ArrayName , _arg ) ) ) { return ; } delete [ ] this -> ArrayName ; if ( _arg ) { size_t n = strlen ( _arg ) + 1 ; char * cp1 = new char [ n ] ; const char * cp2 = ( _arg ) ; this -> ArrayName = cp1 ; do { * cp1 ++ = * cp2 ++ ; } while ( -- n ) ; } else { this -> ArrayName = nullptr ; } this -> Modified ( ) ; } ; virtual char * GetMaterialArrayNameArrayName ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << ArrayName  of  << ( this -> ArrayName ? this -> ArrayName : (null) ) ) ; return this -> ArrayName ; } ; /@} /@{ *
##  The last piece of information that specifies the plane.
##  virtual void SetUpVector ( double _arg1 , double _arg2 , double _arg3 ) { vtkDebugWithObjectMacro ( this , <<  setting  << UpVector  to ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; if ( ( this -> UpVector [ 0 ] != _arg1 ) || ( this -> UpVector [ 1 ] != _arg2 ) || ( this -> UpVector [ 2 ] != _arg3 ) ) { this -> UpVector [ 0 ] = _arg1 ; this -> UpVector [ 1 ] = _arg2 ; this -> UpVector [ 2 ] = _arg3 ; this -> Modified ( ) ; } } virtual void SetUpVector ( const double _arg [ 3 ] ) { this -> SetUpVector ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual double * GetUpVector ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << UpVector  pointer  << this -> UpVector ) ; return this -> UpVector ; } VTK_WRAPEXCLUDE virtual void GetUpVector ( double & _arg1 , double & _arg2 , double & _arg3 ) { _arg1 = this -> UpVector [ 0 ] ; _arg2 = this -> UpVector [ 1 ] ; _arg3 = this -> UpVector [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << UpVector  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetUpVector ( double _arg [ 3 ] ) { this -> GetUpVector ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; /@} /@{ *
##  Accesses to the values computed during the execute method.  They
##  could be used to get a good camera view for the resulting plane.
##  virtual double * GetUpVectorMaximumPoint ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << MaximumPoint  pointer  << this -> MaximumPoint ) ; return this -> MaximumPoint ; } VTK_WRAPEXCLUDE virtual void GetUpVectorMaximumPoint ( double & _arg1 , double & _arg2 , double & _arg3 ) { _arg1 = this -> MaximumPoint [ 0 ] ; _arg2 = this -> MaximumPoint [ 1 ] ; _arg3 = this -> MaximumPoint [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << MaximumPoint  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetUpVectorMaximumPoint ( double _arg [ 3 ] ) { this -> GetUpVectorMaximumPoint ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual double * GetUpVectorMaximumPointCenterPoint ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << CenterPoint  pointer  << this -> CenterPoint ) ; return this -> CenterPoint ; } VTK_WRAPEXCLUDE virtual void GetUpVectorMaximumPointCenterPoint ( double & _arg1 , double & _arg2 , double & _arg3 ) { _arg1 = this -> CenterPoint [ 0 ] ; _arg2 = this -> CenterPoint [ 1 ] ; _arg3 = this -> CenterPoint [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << CenterPoint  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetUpVectorMaximumPointCenterPoint ( double _arg [ 3 ] ) { this -> GetUpVectorMaximumPointCenterPoint ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual double * GetUpVectorMaximumPointCenterPointNormal ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << Normal  pointer  << this -> Normal ) ; return this -> Normal ; } VTK_WRAPEXCLUDE virtual void GetUpVectorMaximumPointCenterPointNormal ( double & _arg1 , double & _arg2 , double & _arg3 ) { _arg1 = this -> Normal [ 0 ] ; _arg2 = this -> Normal [ 1 ] ; _arg3 = this -> Normal [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << Normal  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetUpVectorMaximumPointCenterPointNormal ( double _arg [ 3 ] ) { this -> GetUpVectorMaximumPointCenterPointNormal ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; /@} protected : vtkCutMaterial ( ) ; ~ vtkCutMaterial ( ) override ; int RequestData ( vtkInformation * , vtkInformationVector * * , vtkInformationVector * ) override ;  generate output data int FillInputPortInformation ( int port , vtkInformation * info ) override ; void ComputeMaximumPoint ( vtkDataSet * input ) ; void ComputeNormal ( ) ; char * MaterialArrayName ; int Material ; char * ArrayName ; double UpVector [ 3 ] ; double MaximumPoint [ 3 ] ; double CenterPoint [ 3 ] ; double Normal [ 3 ] ; vtkPlane * PlaneFunction ; private : vtkCutMaterial ( const vtkCutMaterial & ) = delete ; void operator = ( const vtkCutMaterial & ) = delete ; } ;
## Error: token expected: ; but got: [identifier]!!!
