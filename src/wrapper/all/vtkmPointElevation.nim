## =============================================================================
##
##   Copyright (c) Kitware, Inc.
##   All rights reserved.
##   See LICENSE.txt for details.
##
##   This software is distributed WITHOUT ANY WARRANTY; without even
##   the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##   PURPOSE.  See the above copyright notice for more information.
##
##   Copyright 2012 Sandia Corporation.
##   Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
##   the U.S. Government retains certain rights in this software.
##
## =============================================================================
## *
##  @class   vtkmPointElevation
##  @brief   generate a scalar field along a specified direction
##
##  vtkmPointElevation is a filter that generates a scalar field along a specified
##  direction. The scalar field values lie within a user specified range, and are
##  generated by computing a projection of each dataset point onto a line. The line
##  can be oriented arbitrarily. A typical example is to generate scalars based
##  on elevation or height above a plane.
##
##

import
  vtkAcceleratorsVTKmFiltersModule, vtkElevationFilter

type
  vtkmPointElevation* {.importcpp: "vtkmPointElevation",
                       header: "vtkmPointElevation.h", bycopy.} = object of vtkElevationFilter
    vtkmPointElevation* {.importc: "vtkmPointElevation".}: VTK_NEWINSTANCE

  vtkmPointElevationSuperclass* = vtkElevationFilter

proc IsTypeOf*(`type`: cstring): vtkTypeBool {.
    importcpp: "vtkmPointElevation::IsTypeOf(@)", header: "vtkmPointElevation.h".}
proc IsA*(this: var vtkmPointElevation; `type`: cstring): vtkTypeBool {.
    importcpp: "IsA", header: "vtkmPointElevation.h".}
proc SafeDownCast*(o: ptr vtkObjectBase): ptr vtkmPointElevation {.
    importcpp: "vtkmPointElevation::SafeDownCast(@)",
    header: "vtkmPointElevation.h".}
## !!!Ignored construct:  * NewInstance ( ) const { return vtkmPointElevation :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkElevationFilter :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkmPointElevation :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkmPointElevation :: New ( ) ; } public : ;
## Error: identifier expected, but got: *!!!

proc PrintSelf*(this: var vtkmPointElevation; os: var ostream; indent: vtkIndent) {.
    importcpp: "PrintSelf", header: "vtkmPointElevation.h".}
proc New*(): ptr vtkmPointElevation {.importcpp: "vtkmPointElevation::New(@)",
                                  header: "vtkmPointElevation.h".}
## !!!Ignored construct:  /@{ *
##  When this flag is off (the default), then the computation will fall back
##  to the serial VTK version if VTK-m fails to run. When the flag is on,
##  the filter will generate an error if VTK-m fails to run. This is mostly
##  useful in testing to make sure the expected algorithm is run.
##  virtual vtkTypeBool GetForceVTKmForceVTKm ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ForceVTKm  of  << this -> ForceVTKm ) ; return this -> ForceVTKm ; } ;
## Error: expected ';'!!!

proc SetForceVTKm*(this: var vtkmPointElevation; _arg: vtkTypeBool) {.
    importcpp: "SetForceVTKm", header: "vtkmPointElevation.h".}
proc ForceVTKmOn*(this: var vtkmPointElevation) {.importcpp: "ForceVTKmOn",
    header: "vtkmPointElevation.h".}
proc ForceVTKmOff*(this: var vtkmPointElevation) {.importcpp: "ForceVTKmOff",
    header: "vtkmPointElevation.h".}
  ## /@}