## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkImprintFilter.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class   vtkImprintFilter
##  @brief   Imprint the contact surface of one object onto another surface
##
##  This filter imprints the contact surface of one vtkPolyData mesh onto
##  a second, input vtkPolyData mesh. There are two inputs to the filter:
##  the target, which is the surface to be imprinted, and the imprint, which
##  is the object imprinting the target.
##
##  A high level overview of the algorithm is as follows. 1) The target cells
##  are segregated into two subsets: those that may intersect the imprint
##  surface (the candidate cells determined by bounding box checks), and those
##  that do not. 2) The non-candidates are sent to the output, the candidate
##  intersection cells are further proceesed - eventually they will be
##  triangulated as a result of contact with the imprint, with the result of
##  the triangulation appended to the output. 3) The imprint points are projected
##  onto the candidate cells, determining a classification (on a target point,
##  on a target edge, interior to a target cell, outside the target).  4) The
##  non-outside imprint points are associated with one or more target cells.
##  5) The imprint edges are intersected with the target cell edges, producing
##  additional points associated with the the candidate cells, as well as
##  "fragments" or portions of edges associated with the candidate target
##  cells. 6) On a per-candidate-target-cell basis, the points and edge
##  fragments associated with that cell are used to triangulate the cell.
##  7) Finally, the triangulated target cells are appended to the output.
##
##  Several options exist to specify how to produce an output cell data array
##  that indicates whether the output cells are in the imprinted area. If
##  enabled, this output vtkSignedCharArray will have a value=1 for cells that
##  are in the imprinted area. Otherwise, the value=0 is indicating the cell
##  is not in contact with the imprinted area. The name of this cell data
##  array is "ImprintedCells".
##
##  The filter also has the option to pass through and generate point and cell
##  data.  If PassCellData is enabled, then the cell data associated with the
##  cropped cells, or cells passed through from the input mesh, are passed
##  through to the output. If PassPointData is enabled, then in similar
##  fashion the point data is passed through; however new points generated by
##  intersection may have point data interpolated in one of two ways. First,
##  the target mesh edges are interpolated at the new intersection points to
##  generate point data, or the imprint edges are interpolated at the new
##  intersection points to generate point data. Note: for PassPointData and
##  point interpolation to function, the filter requires that the point data
##  attributes (from the target mesh and imprint mesh) are exactly the
##  same. If they are not, then a set intersection operation is performed that
##  uses the point data arrays common to both the target and imprint meshes.
##
##  Some notes:
##  -- The algorithm assumes that the input target and imprint cells are convex.
##  -- If performing a PROJECTED_IMPRINT, the output is the imprint mesh with
##     the point coordinates modified by projecting the imprint points onto
##     the target. If the profection of an imprint point onto the target is
##     unsuccessful, the imprint point coordinates are not modified.
##  -- If performing a MERGED_IMPRINT, the number of output points is
##     (numTargetPts + numImprintPts + numEdgeIntPts).
##  -- Not all of the output points may be used, for example if an imprint point
##     is coincident (within the tolerance) of a target point, the target point
##     replaces the imprint point.
##  -- Candidate cells which may reside within the bounding box of the imprint
##     but may not actually intersect the imprint will be appended to the output
##     without triangulation.
##  -- Candidate cells that are intersected will be triangulated: i.e., triangles
##     will be produced and appended to the output.
##  -- Triangulation requires combining the points and edge fragments associated
##     with each target candidate cell, as well as the candidate cell's defining
##     points and edges, to produce the final triangulation.
##  -- Portions of the algorithm are SMP threaded. For example, steps #1 and #2
##     (candidate segregation); point projection step #3; cell triangulation
##     step #6. Future implementations may further parallelize the algorithm.
##  -- The algorithm produces an output cell data array that indicates
##     which output cells are in the imprinted area. This vtkSignedCharArray
##     has a value=0 for cells that were originally target cells; a value=2
##     for output cells that are in the imprinted region; and a value=1 for
##     cells that are in the transition region (between target and imprinted
##     cells). The name of this cell data array is "ImprintedCells".
##
##

import
  vtkFiltersModelingModule, vtkPolyDataAlgorithm

discard "forward decl of vtkStaticCellLocator"
type
  vtkImprintFilter* {.importcpp: "vtkImprintFilter", header: "vtkImprintFilter.h",
                     bycopy.} = object of vtkPolyDataAlgorithm ## /@{
                                                          ## *
                                                          ##  Standard methods to instantiate, print and provide type information.
                                                          ##
    vtkImprintFilter* {.importc: "vtkImprintFilter".}: VTK_NEWINSTANCE


proc New*(): ptr vtkImprintFilter {.importcpp: "vtkImprintFilter::New(@)",
                                header: "vtkImprintFilter.h".}
type
  vtkImprintFilterSuperclass* = vtkPolyDataAlgorithm

proc IsTypeOf*(`type`: cstring): vtkTypeBool {.
    importcpp: "vtkImprintFilter::IsTypeOf(@)", header: "vtkImprintFilter.h".}
proc IsA*(this: var vtkImprintFilter; `type`: cstring): vtkTypeBool {.importcpp: "IsA",
    header: "vtkImprintFilter.h".}
proc SafeDownCast*(o: ptr vtkObjectBase): ptr vtkImprintFilter {.
    importcpp: "vtkImprintFilter::SafeDownCast(@)", header: "vtkImprintFilter.h".}
## !!!Ignored construct:  * NewInstance ( ) const { return vtkImprintFilter :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkPolyDataAlgorithm :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkImprintFilter :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkImprintFilter :: New ( ) ; } public : ;
## Error: identifier expected, but got: *!!!

proc PrintSelf*(this: var vtkImprintFilter; os: var ostream; indent: vtkIndent) {.
    importcpp: "PrintSelf", header: "vtkImprintFilter.h".}
proc SetTargetConnection*(this: var vtkImprintFilter;
                         algOutput: ptr vtkAlgorithmOutput) {.
    importcpp: "SetTargetConnection", header: "vtkImprintFilter.h".}
proc GetTargetConnection*(this: var vtkImprintFilter): ptr vtkAlgorithmOutput {.
    importcpp: "GetTargetConnection", header: "vtkImprintFilter.h".}
proc SetTargetData*(this: var vtkImprintFilter; target: ptr vtkDataObject) {.
    importcpp: "SetTargetData", header: "vtkImprintFilter.h".}
proc GetTarget*(this: var vtkImprintFilter): ptr vtkDataObject {.
    importcpp: "GetTarget", header: "vtkImprintFilter.h".}
proc SetImprintConnection*(this: var vtkImprintFilter;
                          algOutput: ptr vtkAlgorithmOutput) {.
    importcpp: "SetImprintConnection", header: "vtkImprintFilter.h".}
proc GetImprintConnection*(this: var vtkImprintFilter): ptr vtkAlgorithmOutput {.
    importcpp: "GetImprintConnection", header: "vtkImprintFilter.h".}
proc SetImprintData*(this: var vtkImprintFilter; imprint: ptr vtkDataObject) {.
    importcpp: "SetImprintData", header: "vtkImprintFilter.h".}
proc GetImprint*(this: var vtkImprintFilter): ptr vtkDataObject {.
    importcpp: "GetImprint", header: "vtkImprintFilter.h".}
proc SetTolerance*(this: var vtkImprintFilter; _arg: cdouble) {.
    importcpp: "SetTolerance", header: "vtkImprintFilter.h".}
proc GetToleranceMinValue*(this: var vtkImprintFilter): cdouble {.
    importcpp: "GetToleranceMinValue", header: "vtkImprintFilter.h".}
proc GetToleranceMaxValue*(this: var vtkImprintFilter): cdouble {.
    importcpp: "GetToleranceMaxValue", header: "vtkImprintFilter.h".}
## !!!Ignored construct:  virtual double GetTolerance ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << Tolerance  of  << this -> Tolerance ) ; return this -> Tolerance ; } ;
## Error: expected ';'!!!

type
  vtkImprintFilterMergeTolType* {.size: sizeof(cint),
                                 importcpp: "vtkImprintFilter::MergeTolType",
                                 header: "vtkImprintFilter.h".} = enum
    ABSOLUTE_TOLERANCE = 0, RELATIVE_TO_PROJECTION_TOLERANCE = 1,
    RELATIVE_TO_MIN_EDGE_LENGTH = 2


proc SetToleranceMergeToleranceType*(this: var vtkImprintFilter; _arg: cint) {.
    importcpp: "SetToleranceMergeToleranceType", header: "vtkImprintFilter.h".}
proc GetToleranceMinValueMergeToleranceTypeMinValue*(this: var vtkImprintFilter): cint {.
    importcpp: "GetToleranceMinValueMergeToleranceTypeMinValue",
    header: "vtkImprintFilter.h".}
proc GetToleranceMaxValueMergeToleranceTypeMaxValue*(this: var vtkImprintFilter): cint {.
    importcpp: "GetToleranceMaxValueMergeToleranceTypeMaxValue",
    header: "vtkImprintFilter.h".}
## !!!Ignored construct:  virtual int GetToleranceMergeToleranceType ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << MergeToleranceType  of  << this -> MergeToleranceType ) ; return this -> MergeToleranceType ; } ;
## Error: expected ';'!!!

proc SetMergeToleranceTypeToAbsolute*(this: var vtkImprintFilter) {.
    importcpp: "SetMergeToleranceTypeToAbsolute", header: "vtkImprintFilter.h".}
proc SetMergeToleranceTypeToRelativeToProjection*(this: var vtkImprintFilter) {.
    importcpp: "SetMergeToleranceTypeToRelativeToProjection",
    header: "vtkImprintFilter.h".}
proc SetMergeToleranceTypeToMinEdge*(this: var vtkImprintFilter) {.
    importcpp: "SetMergeToleranceTypeToMinEdge", header: "vtkImprintFilter.h".}
proc SetToleranceMergeToleranceTypeMergeTolerance*(this: var vtkImprintFilter;
    _arg: cdouble) {.importcpp: "SetToleranceMergeToleranceTypeMergeTolerance",
                   header: "vtkImprintFilter.h".}
proc GetToleranceMinValueMergeToleranceTypeMinValueMergeToleranceMinValue*(
    this: var vtkImprintFilter): cdouble {.importcpp: "GetToleranceMinValueMergeToleranceTypeMinValueMergeToleranceMinValue",
                                       header: "vtkImprintFilter.h".}
proc GetToleranceMaxValueMergeToleranceTypeMaxValueMergeToleranceMaxValue*(
    this: var vtkImprintFilter): cdouble {.importcpp: "GetToleranceMaxValueMergeToleranceTypeMaxValueMergeToleranceMaxValue",
                                       header: "vtkImprintFilter.h".}
## !!!Ignored construct:  virtual double GetToleranceMergeToleranceTypeMergeTolerance ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << MergeTolerance  of  << this -> MergeTolerance ) ; return this -> MergeTolerance ; } ;
## Error: expected ';'!!!

type
  vtkImprintFilterSpecifiedOutput* {.size: sizeof(cint), importcpp: "vtkImprintFilter::SpecifiedOutput",
                                    header: "vtkImprintFilter.h".} = enum
    TARGET_CELLS = 0, IMPRINTED_CELLS = 1, PROJECTED_IMPRINT = 2, IMPRINTED_REGION = 3,
    MERGED_IMPRINT = 5


proc SetToleranceMergeToleranceTypeMergeToleranceOutputType*(
    this: var vtkImprintFilter; _arg: cint) {.
    importcpp: "SetToleranceMergeToleranceTypeMergeToleranceOutputType",
    header: "vtkImprintFilter.h".}
proc GetToleranceMinValueMergeToleranceTypeMinValueMergeToleranceMinValueOutputTypeMinValue*(
    this: var vtkImprintFilter): cint {.importcpp: "GetToleranceMinValueMergeToleranceTypeMinValueMergeToleranceMinValueOutputTypeMinValue",
                                    header: "vtkImprintFilter.h".}
proc GetToleranceMaxValueMergeToleranceTypeMaxValueMergeToleranceMaxValueOutputTypeMaxValue*(
    this: var vtkImprintFilter): cint {.importcpp: "GetToleranceMaxValueMergeToleranceTypeMaxValueMergeToleranceMaxValueOutputTypeMaxValue",
                                    header: "vtkImprintFilter.h".}
## !!!Ignored construct:  virtual int GetToleranceMergeToleranceTypeMergeToleranceOutputType ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << OutputType  of  << this -> OutputType ) ; return this -> OutputType ; } ;
## Error: expected ';'!!!

proc SetOutputTypeToTargetCells*(this: var vtkImprintFilter) {.
    importcpp: "SetOutputTypeToTargetCells", header: "vtkImprintFilter.h".}
proc SetOutputTypeToImprintedCells*(this: var vtkImprintFilter) {.
    importcpp: "SetOutputTypeToImprintedCells", header: "vtkImprintFilter.h".}
proc SetOutputTypeToProjectedImprint*(this: var vtkImprintFilter) {.
    importcpp: "SetOutputTypeToProjectedImprint", header: "vtkImprintFilter.h".}
proc SetOutputTypeToImprintedRegion*(this: var vtkImprintFilter) {.
    importcpp: "SetOutputTypeToImprintedRegion", header: "vtkImprintFilter.h".}
proc SetOutputTypeToMergedImprint*(this: var vtkImprintFilter) {.
    importcpp: "SetOutputTypeToMergedImprint", header: "vtkImprintFilter.h".}
proc SetBoundaryEdgeInsertion*(this: var vtkImprintFilter; _arg: bool) {.
    importcpp: "SetBoundaryEdgeInsertion", header: "vtkImprintFilter.h".}
## !!!Ignored construct:  virtual bool GetToleranceMergeToleranceTypeMergeToleranceOutputTypeBoundaryEdgeInsertion ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << BoundaryEdgeInsertion  of  << this -> BoundaryEdgeInsertion ) ; return this -> BoundaryEdgeInsertion ; } ;
## Error: expected ';'!!!

proc BoundaryEdgeInsertionOn*(this: var vtkImprintFilter) {.
    importcpp: "BoundaryEdgeInsertionOn", header: "vtkImprintFilter.h".}
proc BoundaryEdgeInsertionOff*(this: var vtkImprintFilter) {.
    importcpp: "BoundaryEdgeInsertionOff", header: "vtkImprintFilter.h".}
  ## /@}
  ## /@{
  ## *
  ##  Indicate whether cell data from the input target is to be passed through
  ##  to the output mesh. By default, PassCellData is enabled.
  ##
proc SetBoundaryEdgeInsertionPassCellData*(this: var vtkImprintFilter; _arg: bool) {.
    importcpp: "SetBoundaryEdgeInsertionPassCellData",
    header: "vtkImprintFilter.h".}
## !!!Ignored construct:  virtual bool GetToleranceMergeToleranceTypeMergeToleranceOutputTypeBoundaryEdgeInsertionPassCellData ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << PassCellData  of  << this -> PassCellData ) ; return this -> PassCellData ; } ;
## Error: expected ';'!!!

proc PassCellDataOn*(this: var vtkImprintFilter) {.importcpp: "PassCellDataOn",
    header: "vtkImprintFilter.h".}
proc PassCellDataOff*(this: var vtkImprintFilter) {.importcpp: "PassCellDataOff",
    header: "vtkImprintFilter.h".}
  ## /@}
  ## /@{
  ## *
  ##  Indicate whether point data from the input target mesh and the imprint
  ##  mesh are to be passed through and/or interpolated to the output mesh. By
  ##  default, PassPointData is enabled. Note: both the input mesh points and
  ##  the imprint points must have identical point data. Otherwise, a set
  ##  intersection operation will be performed to process just the point data
  ##  arrays common to both the mesh point data and imprint point data.
  ##
proc SetBoundaryEdgeInsertionPassCellDataPassPointData*(
    this: var vtkImprintFilter; _arg: bool) {.
    importcpp: "SetBoundaryEdgeInsertionPassCellDataPassPointData",
    header: "vtkImprintFilter.h".}
## !!!Ignored construct:  virtual bool GetToleranceMergeToleranceTypeMergeToleranceOutputTypeBoundaryEdgeInsertionPassCellDataPassPointData ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << PassPointData  of  << this -> PassPointData ) ; return this -> PassPointData ; } ;
## Error: expected ';'!!!

proc PassPointDataOn*(this: var vtkImprintFilter) {.importcpp: "PassPointDataOn",
    header: "vtkImprintFilter.h".}
proc PassPointDataOff*(this: var vtkImprintFilter) {.importcpp: "PassPointDataOff",
    header: "vtkImprintFilter.h".}
  ## /@}
type
  vtkImprintFilterPointInterpolationType* {.size: sizeof(cint),
      importcpp: "vtkImprintFilter::PointInterpolationType",
      header: "vtkImprintFilter.h".} = enum
    USE_TARGET_EDGES = 0, USE_IMPRINT_EDGES = 1


proc SetToleranceMergeToleranceTypeMergeToleranceOutputTypePointInterpolation*(
    this: var vtkImprintFilter; _arg: cint) {.importcpp: "SetToleranceMergeToleranceTypeMergeToleranceOutputTypePointInterpolation",
    header: "vtkImprintFilter.h".}
proc GetToleranceMinValueMergeToleranceTypeMinValueMergeToleranceMinValueOutputTypeMinValuePointInterpolationMinValue*(
    this: var vtkImprintFilter): cint {.importcpp: "GetToleranceMinValueMergeToleranceTypeMinValueMergeToleranceMinValueOutputTypeMinValuePointInterpolationMinValue",
                                    header: "vtkImprintFilter.h".}
proc GetToleranceMaxValueMergeToleranceTypeMaxValueMergeToleranceMaxValueOutputTypeMaxValuePointInterpolationMaxValue*(
    this: var vtkImprintFilter): cint {.importcpp: "GetToleranceMaxValueMergeToleranceTypeMaxValueMergeToleranceMaxValueOutputTypeMaxValuePointInterpolationMaxValue",
                                    header: "vtkImprintFilter.h".}
## !!!Ignored construct:  virtual int GetToleranceMergeToleranceTypeMergeToleranceOutputTypeBoundaryEdgeInsertionPassCellDataPassPointDataPointInterpolation ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << PointInterpolation  of  << this -> PointInterpolation ) ; return this -> PointInterpolation ; } ;
## Error: expected ';'!!!

proc SetPointInterpolationToTargetEdges*(this: var vtkImprintFilter) {.
    importcpp: "SetPointInterpolationToTargetEdges", header: "vtkImprintFilter.h".}
proc SetPointInterpolationToImprintEdges*(this: var vtkImprintFilter) {.
    importcpp: "SetPointInterpolationToImprintEdges", header: "vtkImprintFilter.h".}
type
  vtkImprintFilterDebugOutput* {.size: sizeof(cint),
                                importcpp: "vtkImprintFilter::DebugOutput",
                                header: "vtkImprintFilter.h".} = enum
    NO_DEBUG_OUTPUT = 0, TRIANGULATION_INPUT = 1, TRIANGULATION_OUTPUT = 2


proc SetBoundaryEdgeInsertionPassCellDataPassPointDataTriangulateOutput*(
    this: var vtkImprintFilter; _arg: bool) {.importcpp: "SetBoundaryEdgeInsertionPassCellDataPassPointDataTriangulateOutput",
    header: "vtkImprintFilter.h".}
## !!!Ignored construct:  virtual bool GetToleranceMergeToleranceTypeMergeToleranceOutputTypeBoundaryEdgeInsertionPassCellDataPassPointDataPointInterpolationTriangulateOutput ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << TriangulateOutput  of  << this -> TriangulateOutput ) ; return this -> TriangulateOutput ; } ;
## Error: expected ';'!!!

proc TriangulateOutputOn*(this: var vtkImprintFilter) {.
    importcpp: "TriangulateOutputOn", header: "vtkImprintFilter.h".}
proc TriangulateOutputOff*(this: var vtkImprintFilter) {.
    importcpp: "TriangulateOutputOff", header: "vtkImprintFilter.h".}
  ## @}
  ## @{
  ## *
  ##  The following methods support debugging. By default, NO_DEBUG_OUTPUT is
  ##  produced and the second output of this filter is empty. If TRIANGULATION_INPUT
  ##  is set, then the input points and edges contained by the target DebugCellId are
  ##  output to the second output to this filter.  If TRIANGULATION_OUTPUT is
  ##  set, then the output triangulation for the specified target cellId is
  ##  placed in a second output to this filter.
  ##
proc SetToleranceMergeToleranceTypeMergeToleranceOutputTypePointInterpolationDebugOutputType*(
    this: var vtkImprintFilter; _arg: cint) {.importcpp: "SetToleranceMergeToleranceTypeMergeToleranceOutputTypePointInterpolationDebugOutputType",
    header: "vtkImprintFilter.h".}
proc GetToleranceMinValueMergeToleranceTypeMinValueMergeToleranceMinValueOutputTypeMinValuePointInterpolationMinValueDebugOutputTypeMinValue*(
    this: var vtkImprintFilter): cint {.importcpp: "GetToleranceMinValueMergeToleranceTypeMinValueMergeToleranceMinValueOutputTypeMinValuePointInterpolationMinValueDebugOutputTypeMinValue",
                                    header: "vtkImprintFilter.h".}
proc GetToleranceMaxValueMergeToleranceTypeMaxValueMergeToleranceMaxValueOutputTypeMaxValuePointInterpolationMaxValueDebugOutputTypeMaxValue*(
    this: var vtkImprintFilter): cint {.importcpp: "GetToleranceMaxValueMergeToleranceTypeMaxValueMergeToleranceMaxValueOutputTypeMaxValuePointInterpolationMaxValueDebugOutputTypeMaxValue",
                                    header: "vtkImprintFilter.h".}
## !!!Ignored construct:  virtual int GetToleranceMergeToleranceTypeMergeToleranceOutputTypeBoundaryEdgeInsertionPassCellDataPassPointDataPointInterpolationTriangulateOutputDebugOutputType ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << DebugOutputType  of  << this -> DebugOutputType ) ; return this -> DebugOutputType ; } ;
## Error: expected ';'!!!

proc SetDebugOutputTypeToNoDebugOutput*(this: var vtkImprintFilter) {.
    importcpp: "SetDebugOutputTypeToNoDebugOutput", header: "vtkImprintFilter.h".}
proc SetDebugOutputTypeToTriangulationInput*(this: var vtkImprintFilter) {.
    importcpp: "SetDebugOutputTypeToTriangulationInput",
    header: "vtkImprintFilter.h".}
proc SetDebugOutputTypeToTriangulationOutput*(this: var vtkImprintFilter) {.
    importcpp: "SetDebugOutputTypeToTriangulationOutput",
    header: "vtkImprintFilter.h".}
proc SetBoundaryEdgeInsertionPassCellDataPassPointDataTriangulateOutputDebugCellId*(
    this: var vtkImprintFilter; _arg: vtkIdType) {.importcpp: "SetBoundaryEdgeInsertionPassCellDataPassPointDataTriangulateOutputDebugCellId",
    header: "vtkImprintFilter.h".}
## !!!Ignored construct:  virtual vtkIdType GetToleranceMergeToleranceTypeMergeToleranceOutputTypeBoundaryEdgeInsertionPassCellDataPassPointDataPointInterpolationTriangulateOutputDebugOutputTypeDebugCellId ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << DebugCellId  of  << this -> DebugCellId ) ; return this -> DebugCellId ; } ;
## Error: expected ';'!!!

proc GetDebugOutput*(this: var vtkImprintFilter): ptr vtkPolyData {.
    importcpp: "GetDebugOutput", header: "vtkImprintFilter.h".}