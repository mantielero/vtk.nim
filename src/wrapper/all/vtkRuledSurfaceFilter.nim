## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkRuledSurfaceFilter.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class   vtkRuledSurfaceFilter
##  @brief   generates a surface from a set of lines
##
##  vtkRuledSurfaceFilter is a filter that generates a surface from a set of
##  lines. The lines are assumed to be "parallel" in the sense that they do
##  not intersect and remain somewhat close to one another. A surface is
##  generated by connecting the points defining each pair of lines with
##  straight lines. This creates a strip for each pair of lines (i.e., a
##  triangulation is created from two generating lines). The filter can handle
##  an arbitrary number of lines, with lines i and i+1 assumed connected.
##  Note that there are several different approaches for creating the ruled
##  surface, the method for creating the surface can either use the input
##  points or resample from the polylines (using a user-specified resolution).
##
##  This filter offers some other important features. A DistanceFactor ivar is
##  used to decide when two lines are too far apart to connect. (The factor is
##  a multiple of the distance between the first two points of the two lines
##  defining the strip.) If the distance between the two generating lines
##  becomes too great, then the surface is not generated in that
##  region. (Note: if the lines separate and then merge, then a hole can be
##  generated in the surface.) In addition, the Offset and OnRation ivars can
##  be used to create nifty striped surfaces. Closed surfaces (e.g., tubes) can
##  be created by setting the CloseSurface ivar. (The surface can be closed
##  in the other direction by repeating the first and last point in the
##  polylines defining the surface.)
##
##  An important use of this filter is to combine it with vtkStreamTracer to
##  generate stream surfaces. It can also be used to create surfaces from
##  contours.
##
##  @warning
##  The number of lines must be greater than two if a surface is to be
##  generated.  sides (i.e., a ribbon), use vtkRibbonFilter.
##
##  @sa
##  vtkRibbonFilter vtkStreamTracer
##

import
  vtkFiltersModelingModule, vtkPolyDataAlgorithm

discard "forward decl of vtkIdList"
discard "forward decl of vtkPoints"
discard "forward decl of vtkPolyData"
const
  VTK_RULED_MODE_RESAMPLE* = 0
  VTK_RULED_MODE_POINT_WALK* = 1

type
  vtkRuledSurfaceFilter* {.importcpp: "vtkRuledSurfaceFilter",
                          header: "vtkRuledSurfaceFilter.h", bycopy.} = object of vtkPolyDataAlgorithm
    vtkRuledSurfaceFilter* {.importc: "vtkRuledSurfaceFilter".}: VTK_NEWINSTANCE

  vtkRuledSurfaceFilterSuperclass* = vtkPolyDataAlgorithm

proc IsTypeOf*(`type`: cstring): vtkTypeBool {.
    importcpp: "vtkRuledSurfaceFilter::IsTypeOf(@)",
    header: "vtkRuledSurfaceFilter.h".}
proc IsA*(this: var vtkRuledSurfaceFilter; `type`: cstring): vtkTypeBool {.
    importcpp: "IsA", header: "vtkRuledSurfaceFilter.h".}
proc SafeDownCast*(o: ptr vtkObjectBase): ptr vtkRuledSurfaceFilter {.
    importcpp: "vtkRuledSurfaceFilter::SafeDownCast(@)",
    header: "vtkRuledSurfaceFilter.h".}
## !!!Ignored construct:  * NewInstance ( ) const { return vtkRuledSurfaceFilter :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkPolyDataAlgorithm :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkRuledSurfaceFilter :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkRuledSurfaceFilter :: New ( ) ; } public : ;
## Error: identifier expected, but got: *!!!

proc PrintSelf*(this: var vtkRuledSurfaceFilter; os: var ostream; indent: vtkIndent) {.
    importcpp: "PrintSelf", header: "vtkRuledSurfaceFilter.h".}
proc New*(): ptr vtkRuledSurfaceFilter {.importcpp: "vtkRuledSurfaceFilter::New(@)",
                                     header: "vtkRuledSurfaceFilter.h".}
proc SetDistanceFactor*(this: var vtkRuledSurfaceFilter; _arg: cdouble) {.
    importcpp: "SetDistanceFactor", header: "vtkRuledSurfaceFilter.h".}
proc GetDistanceFactorMinValue*(this: var vtkRuledSurfaceFilter): cdouble {.
    importcpp: "GetDistanceFactorMinValue", header: "vtkRuledSurfaceFilter.h".}
proc GetDistanceFactorMaxValue*(this: var vtkRuledSurfaceFilter): cdouble {.
    importcpp: "GetDistanceFactorMaxValue", header: "vtkRuledSurfaceFilter.h".}
## !!!Ignored construct:  virtual double GetDistanceFactor ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << DistanceFactor  of  << this -> DistanceFactor ) ; return this -> DistanceFactor ; } ;
## Error: expected ';'!!!

proc SetDistanceFactorOnRatio*(this: var vtkRuledSurfaceFilter; _arg: cint) {.
    importcpp: "SetDistanceFactorOnRatio", header: "vtkRuledSurfaceFilter.h".}
proc GetDistanceFactorMinValueOnRatioMinValue*(this: var vtkRuledSurfaceFilter): cint {.
    importcpp: "GetDistanceFactorMinValueOnRatioMinValue",
    header: "vtkRuledSurfaceFilter.h".}
proc GetDistanceFactorMaxValueOnRatioMaxValue*(this: var vtkRuledSurfaceFilter): cint {.
    importcpp: "GetDistanceFactorMaxValueOnRatioMaxValue",
    header: "vtkRuledSurfaceFilter.h".}
## !!!Ignored construct:  virtual int GetDistanceFactorOnRatio ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << OnRatio  of  << this -> OnRatio ) ; return this -> OnRatio ; } ;
## Error: expected ';'!!!

proc SetDistanceFactorOnRatioOffset*(this: var vtkRuledSurfaceFilter; _arg: cint) {.
    importcpp: "SetDistanceFactorOnRatioOffset", header: "vtkRuledSurfaceFilter.h".}
proc GetDistanceFactorMinValueOnRatioMinValueOffsetMinValue*(
    this: var vtkRuledSurfaceFilter): cint {.
    importcpp: "GetDistanceFactorMinValueOnRatioMinValueOffsetMinValue",
    header: "vtkRuledSurfaceFilter.h".}
proc GetDistanceFactorMaxValueOnRatioMaxValueOffsetMaxValue*(
    this: var vtkRuledSurfaceFilter): cint {.
    importcpp: "GetDistanceFactorMaxValueOnRatioMaxValueOffsetMaxValue",
    header: "vtkRuledSurfaceFilter.h".}
## !!!Ignored construct:  virtual int GetDistanceFactorOnRatioOffset ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << Offset  of  << this -> Offset ) ; return this -> Offset ; } ;
## Error: expected ';'!!!

proc SetCloseSurface*(this: var vtkRuledSurfaceFilter; _arg: vtkTypeBool) {.
    importcpp: "SetCloseSurface", header: "vtkRuledSurfaceFilter.h".}
## !!!Ignored construct:  virtual vtkTypeBool GetDistanceFactorOnRatioOffsetCloseSurface ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << CloseSurface  of  << this -> CloseSurface ) ; return this -> CloseSurface ; } ;
## Error: expected ';'!!!

proc CloseSurfaceOn*(this: var vtkRuledSurfaceFilter) {.importcpp: "CloseSurfaceOn",
    header: "vtkRuledSurfaceFilter.h".}
proc CloseSurfaceOff*(this: var vtkRuledSurfaceFilter) {.
    importcpp: "CloseSurfaceOff", header: "vtkRuledSurfaceFilter.h".}
  ## /@}
  ## /@{
  ## *
  ##  Set the mode by which to create the ruled surface. (Dramatically
  ##  different results are possible depending on the chosen mode.) The
  ##  resample mode evenly resamples the polylines (based on length) and
  ##  generates triangle strips. The point walk mode uses the existing
  ##  points and walks around the polyline using existing points.
  ##
proc SetDistanceFactorOnRatioOffsetRuledMode*(this: var vtkRuledSurfaceFilter;
    _arg: cint) {.importcpp: "SetDistanceFactorOnRatioOffsetRuledMode",
                header: "vtkRuledSurfaceFilter.h".}
proc GetDistanceFactorMinValueOnRatioMinValueOffsetMinValueRuledModeMinValue*(
    this: var vtkRuledSurfaceFilter): cint {.importcpp: "GetDistanceFactorMinValueOnRatioMinValueOffsetMinValueRuledModeMinValue",
    header: "vtkRuledSurfaceFilter.h".}
proc GetDistanceFactorMaxValueOnRatioMaxValueOffsetMaxValueRuledModeMaxValue*(
    this: var vtkRuledSurfaceFilter): cint {.importcpp: "GetDistanceFactorMaxValueOnRatioMaxValueOffsetMaxValueRuledModeMaxValue",
    header: "vtkRuledSurfaceFilter.h".}
## !!!Ignored construct:  virtual int GetDistanceFactorOnRatioOffsetCloseSurfaceRuledMode ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << RuledMode  of  << this -> RuledMode ) ; return this -> RuledMode ; } ;
## Error: expected ';'!!!

proc SetRuledModeToResample*(this: var vtkRuledSurfaceFilter) {.
    importcpp: "SetRuledModeToResample", header: "vtkRuledSurfaceFilter.h".}
proc SetRuledModeToPointWalk*(this: var vtkRuledSurfaceFilter) {.
    importcpp: "SetRuledModeToPointWalk", header: "vtkRuledSurfaceFilter.h".}
proc GetRuledModeAsString*(this: var vtkRuledSurfaceFilter): cstring {.
    importcpp: "GetRuledModeAsString", header: "vtkRuledSurfaceFilter.h".}
proc SetResolution*(this: var vtkRuledSurfaceFilter; _arg1: cint; _arg2: cint) {.
    importcpp: "SetResolution", header: "vtkRuledSurfaceFilter.h".}
proc SetResolution*(this: var vtkRuledSurfaceFilter; _arg: array[2, cint]) {.
    importcpp: "SetResolution", header: "vtkRuledSurfaceFilter.h".}
## !!!Ignored construct:  virtual int * GetResolution ( ) VTK_SIZEHINT ( 2 ) { vtkDebugWithObjectMacro ( this , <<  returning  << Resolution  pointer  << this -> Resolution ) ; return this -> Resolution ; } VTK_WRAPEXCLUDE virtual void GetResolution ( int data [ 2 ] ) { for ( int i = 0 ; i < 2 ; i ++ ) { data [ i ] = this -> Resolution [ i ] ; } } ;
## Error: expected ';'!!!

proc SetCloseSurfacePassLines*(this: var vtkRuledSurfaceFilter; _arg: vtkTypeBool) {.
    importcpp: "SetCloseSurfacePassLines", header: "vtkRuledSurfaceFilter.h".}
## !!!Ignored construct:  virtual vtkTypeBool GetDistanceFactorOnRatioOffsetCloseSurfaceRuledModePassLines ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << PassLines  of  << this -> PassLines ) ; return this -> PassLines ; } ;
## Error: expected ';'!!!

proc PassLinesOn*(this: var vtkRuledSurfaceFilter) {.importcpp: "PassLinesOn",
    header: "vtkRuledSurfaceFilter.h".}
proc PassLinesOff*(this: var vtkRuledSurfaceFilter) {.importcpp: "PassLinesOff",
    header: "vtkRuledSurfaceFilter.h".}
  ## /@}
  ## /@{
  ## *
  ##  Indicate whether the starting points of the loops need to be determined.
  ##  If set to 0, then its assumes that the 0th point of each loop should be
  ##  always connected
  ##  By default the loops are not oriented.
  ##
proc SetCloseSurfacePassLinesOrientLoops*(this: var vtkRuledSurfaceFilter;
    _arg: vtkTypeBool) {.importcpp: "SetCloseSurfacePassLinesOrientLoops",
                       header: "vtkRuledSurfaceFilter.h".}
## !!!Ignored construct:  virtual vtkTypeBool GetDistanceFactorOnRatioOffsetCloseSurfaceRuledModePassLinesOrientLoops ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << OrientLoops  of  << this -> OrientLoops ) ; return this -> OrientLoops ; } ;
## Error: expected ';'!!!

proc OrientLoopsOn*(this: var vtkRuledSurfaceFilter) {.importcpp: "OrientLoopsOn",
    header: "vtkRuledSurfaceFilter.h".}
proc OrientLoopsOff*(this: var vtkRuledSurfaceFilter) {.importcpp: "OrientLoopsOff",
    header: "vtkRuledSurfaceFilter.h".}
  ## /@}