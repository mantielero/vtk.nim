## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkPLinearExtrusionFilter.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class   vtkPLinearExtrusionFilter
##  @brief   Subclass that handles piece invariance.
##
##  vtkPLinearExtrusionFilter is a parallel version of vtkLinearExtrusionFilter.
##
##  @sa
##  vtkLinearExtrusionFilter
##

## !!!Ignored construct:  # vtkPLinearExtrusionFilter_h [NewLine] # vtkPLinearExtrusionFilter_h [NewLine] # vtkFiltersParallelModule.h  For export macro # vtkLinearExtrusionFilter.h [NewLine] class VTKFILTERSPARALLEL_EXPORT vtkPLinearExtrusionFilter : public vtkLinearExtrusionFilter { public : protected : const char * GetClassNameInternal ( ) const override { return thisClass ; } public : typedef vtkLinearExtrusionFilter Superclass ; static vtkTypeBool IsTypeOf ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 1 ; } return vtkLinearExtrusionFilter :: IsTypeOf ( type ) ; } vtkTypeBool IsA ( const char * type ) override { return this -> vtkPLinearExtrusionFilter :: IsTypeOf ( type ) ; } static vtkPLinearExtrusionFilter * SafeDownCast ( vtkObjectBase * o ) { if ( o && o -> IsA ( thisClass ) ) { return static_cast < vtkPLinearExtrusionFilter * > ( o ) ; } return nullptr ; } VTK_NEWINSTANCE vtkPLinearExtrusionFilter * NewInstance ( ) const { return vtkPLinearExtrusionFilter :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkLinearExtrusionFilter :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkPLinearExtrusionFilter :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkPLinearExtrusionFilter :: New ( ) ; } public : ; void PrintSelf ( ostream & os , vtkIndent indent ) override ; *
##  Create an object with PieceInvariant off.
##  static vtkPLinearExtrusionFilter * New ( ) ;  To get piece invariance, this filter has to request an
##  extra ghost level.  Since piece invariance is not very
##  important for this filter,  it is optional.  Without invariance,
##  Internal surfaces will be generated.  These surface
##  Are hidden by the normal surface generated by this filter.
##  By default, PieceInvariance is off. virtual void SetPieceInvariant ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  PieceInvariant  to  << _arg ) ; if ( this -> PieceInvariant != _arg ) { this -> PieceInvariant = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetPieceInvariant ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << PieceInvariant  of  << this -> PieceInvariant ) ; return this -> PieceInvariant ; } ; virtual void PieceInvariantOn ( ) { this -> SetPieceInvariant ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void PieceInvariantOff ( ) { this -> SetPieceInvariant ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; protected : vtkPLinearExtrusionFilter ( ) ; ~ vtkPLinearExtrusionFilter ( ) override = default ; int RequestData ( vtkInformation * , vtkInformationVector * * , vtkInformationVector * ) override ; int RequestUpdateExtent ( vtkInformation * , vtkInformationVector * * , vtkInformationVector * ) override ; vtkTypeBool PieceInvariant ; private : vtkPLinearExtrusionFilter ( const vtkPLinearExtrusionFilter & ) = delete ; void operator = ( const vtkPLinearExtrusionFilter & ) = delete ; } ;
## Error: token expected: ; but got: [identifier]!!!
