## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkQuadraturePointsGenerator.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class   vtkQuadraturePointsGenerator
##
##
##  Create a vtkPolyData on its output containing the vertices
##  for the quadrature points for one of the vtkDataArrays present
##  on its input vtkUnstructuredGrid. If the input data set has
##  has FieldData generated by vtkQuadraturePointInterpolator then
##  this will be set as point data. Note: Point sets are generated
##  per field array. This is because each field array may contain
##  its own dictionary.
##
##  @sa
##  vtkQuadraturePointInterpolator, vtkQuadratureSchemeDefinition,
##  vtkInformationQuadratureSchemeDefinitionVectorKey
##

## !!!Ignored construct:  # vtkQuadraturePointsGenerator_h [NewLine] # vtkQuadraturePointsGenerator_h [NewLine] # vtkFiltersGeneralModule.h  For export macro # vtkPolyDataAlgorithm.h [NewLine] class vtkPolyData ;
## Error: token expected: ; but got: [identifier]!!!

discard "forward decl of vtkUnstructuredGrid"
discard "forward decl of vtkInformation"
discard "forward decl of vtkInformationVector"
## !!!Ignored construct:  class VTKFILTERSGENERAL_EXPORT vtkQuadraturePointsGenerator : public vtkPolyDataAlgorithm { public : protected : const char * GetClassNameInternal ( ) const override { return thisClass ; } public : typedef vtkPolyDataAlgorithm Superclass ; static vtkTypeBool IsTypeOf ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 1 ; } return vtkPolyDataAlgorithm :: IsTypeOf ( type ) ; } vtkTypeBool IsA ( const char * type ) override { return this -> vtkQuadraturePointsGenerator :: IsTypeOf ( type ) ; } static vtkQuadraturePointsGenerator * SafeDownCast ( vtkObjectBase * o ) { if ( o && o -> IsA ( thisClass ) ) { return static_cast < vtkQuadraturePointsGenerator * > ( o ) ; } return nullptr ; } VTK_NEWINSTANCE vtkQuadraturePointsGenerator * NewInstance ( ) const { return vtkQuadraturePointsGenerator :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkPolyDataAlgorithm :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkQuadraturePointsGenerator :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkQuadraturePointsGenerator :: New ( ) ; } public : ; void PrintSelf ( ostream & os , vtkIndent indent ) override ; static vtkQuadraturePointsGenerator * New ( ) ; protected : int FillInputPortInformation ( int port , vtkInformation * info ) override ; int RequestData ( vtkInformation * req , vtkInformationVector * * input , vtkInformationVector * output ) override ; *
##  Generate the point set .
##  int Generate ( vtkUnstructuredGrid * usgIn , vtkDataArray * offsets , vtkPolyData * pdOut ) ; int GenerateField ( vtkUnstructuredGrid * usgIn , vtkDataArray * data , vtkDataArray * offsets , vtkPolyData * pdOut ) ; vtkQuadraturePointsGenerator ( ) ; ~ vtkQuadraturePointsGenerator ( ) override ; private : vtkQuadraturePointsGenerator ( const vtkQuadraturePointsGenerator & ) = delete ; void operator = ( const vtkQuadraturePointsGenerator & ) = delete ; } ;
## Error: token expected: ; but got: [identifier]!!!
