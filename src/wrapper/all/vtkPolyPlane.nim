## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkPolyPlane.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class   vtkPolyPlane
##  @brief   Implicit function that is generated by extrusion of a polyline along the Z axis
##
##  vtkPolyPlane is, as the name suggests, an extrusion of a vtkPolyLine.
##  The extrusion direction is assumed to be the Z vector. It can be used in
##  combination with a vtkCutter to cut a dataset with a polyplane.
##  vtkPolyPlane is a concrete implementation of the abstract class
##  vtkImplicitFunction.
##
##  @todo
##  Generalize to extrusions along arbitrary directions.
##

## !!!Ignored construct:  # vtkPolyPlane_h [NewLine] # vtkPolyPlane_h [NewLine] # vtkCommonDataModelModule.h  For export macro # vtkImplicitFunction.h [NewLine] class vtkPolyLine ;
## Error: token expected: ; but got: [identifier]!!!

discard "forward decl of vtkDoubleArray"
## !!!Ignored construct:  class VTKCOMMONDATAMODEL_EXPORT vtkPolyPlane : public vtkImplicitFunction { public : *
##  Construct plane passing through origin and normal to z-axis.
##  static vtkPolyPlane * New ( ) ; protected : const char * GetClassNameInternal ( ) const override { return thisClass ; } public : typedef vtkImplicitFunction Superclass ; static vtkTypeBool IsTypeOf ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 1 ; } return vtkImplicitFunction :: IsTypeOf ( type ) ; } vtkTypeBool IsA ( const char * type ) override { return this -> vtkPolyPlane :: IsTypeOf ( type ) ; } static vtkPolyPlane * SafeDownCast ( vtkObjectBase * o ) { if ( o && o -> IsA ( thisClass ) ) { return static_cast < vtkPolyPlane * > ( o ) ; } return nullptr ; } VTK_NEWINSTANCE vtkPolyPlane * NewInstance ( ) const { return vtkPolyPlane :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkImplicitFunction :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkPolyPlane :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkPolyPlane :: New ( ) ; } public : ; void PrintSelf ( ostream & os , vtkIndent indent ) override ; /@{ *
##  Evaluate plane equation for point x[3].
##  using vtkImplicitFunction :: EvaluateFunction ; double EvaluateFunction ( double x [ 3 ] ) override ; /@} *
##  Evaluate function gradient at point x[3].
##  void EvaluateGradient ( double x [ 3 ] , double g [ 3 ] ) override ; /@{ *
##  Set/get point through which plane passes. Plane is defined by point
##  and normal.
##  virtual void SetPolyLine ( vtkPolyLine * ) ; virtual vtkPolyLine * GetnamePolyLine ( ) { vtkDebugWithObjectMacro ( this , <<  returning  PolyLine  address  << static_cast < vtkPolyLine * > ( this -> PolyLine ) ) ; return this -> PolyLine ; } ; /@} *
##  Override GetMTime to include the polyline
##  vtkMTimeType GetMTime ( ) override ; protected : vtkPolyPlane ( ) ; ~ vtkPolyPlane ( ) override ; void ComputeNormals ( ) ; double ExtrusionDirection [ 3 ] ; vtkPolyLine * PolyLine ; vtkTimeStamp NormalComputeTime ; vtkDoubleArray * Normals ; vtkIdType ClosestPlaneIdx ; private : vtkPolyPlane ( const vtkPolyPlane & ) = delete ; void operator = ( const vtkPolyPlane & ) = delete ; } ;
## Error: token expected: ; but got: [identifier]!!!
