## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkImageChangeInformation.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class   vtkImageChangeInformation
##  @brief   modify spacing, origin and extent.
##
##  vtkImageChangeInformation  modify the spacing, origin, or extent of
##  the data without changing the data itself.  The data is not resampled
##  by this filter, only the information accompanying the data is modified.
##

## !!!Ignored construct:  # vtkImageChangeInformation_h [NewLine] # vtkImageChangeInformation_h [NewLine] # vtkImageAlgorithm.h [NewLine] # vtkImagingCoreModule.h  For export macro [NewLine] class vtkImageData ;
## Error: token expected: ; but got: [identifier]!!!

## !!!Ignored construct:  class VTKIMAGINGCORE_EXPORT vtkImageChangeInformation : public vtkImageAlgorithm { public : static vtkImageChangeInformation * New ( ) ; protected : const char * GetClassNameInternal ( ) const override { return thisClass ; } public : typedef vtkImageAlgorithm Superclass ; static vtkTypeBool IsTypeOf ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 1 ; } return vtkImageAlgorithm :: IsTypeOf ( type ) ; } vtkTypeBool IsA ( const char * type ) override { return this -> vtkImageChangeInformation :: IsTypeOf ( type ) ; } static vtkImageChangeInformation * SafeDownCast ( vtkObjectBase * o ) { if ( o && o -> IsA ( thisClass ) ) { return static_cast < vtkImageChangeInformation * > ( o ) ; } return nullptr ; } VTK_NEWINSTANCE vtkImageChangeInformation * NewInstance ( ) const { return vtkImageChangeInformation :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkImageAlgorithm :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkImageChangeInformation :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkImageChangeInformation :: New ( ) ; } public : ; void PrintSelf ( ostream & os , vtkIndent indent ) override ; /@{ *
##  Copy the information from another data set.  By default,
##  the information is copied from the input.
##  virtual void SetInformationInputData ( vtkImageData * ) ; virtual vtkImageData * GetInformationInput ( ) ; /@} /@{ *
##  Specify new starting values for the extent explicitly.
##  These values are used as WholeExtent[0], WholeExtent[2] and
##  WholeExtent[4] of the output.  The default is to the
##  use the extent start of the Input, or of the InformationInput
##  if InformationInput is set.
##  virtual void SetOutputExtentStart ( int _arg1 , int _arg2 , int _arg3 ) { vtkDebugWithObjectMacro ( this , <<  setting  << OutputExtentStart  to ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; if ( ( this -> OutputExtentStart [ 0 ] != _arg1 ) || ( this -> OutputExtentStart [ 1 ] != _arg2 ) || ( this -> OutputExtentStart [ 2 ] != _arg3 ) ) { this -> OutputExtentStart [ 0 ] = _arg1 ; this -> OutputExtentStart [ 1 ] = _arg2 ; this -> OutputExtentStart [ 2 ] = _arg3 ; this -> Modified ( ) ; } } virtual void SetOutputExtentStart ( const int _arg [ 3 ] ) { this -> SetOutputExtentStart ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual int * GetOutputExtentStart ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << OutputExtentStart  pointer  << this -> OutputExtentStart ) ; return this -> OutputExtentStart ; } VTK_WRAPEXCLUDE virtual void GetOutputExtentStart ( int & _arg1 , int & _arg2 , int & _arg3 ) { _arg1 = this -> OutputExtentStart [ 0 ] ; _arg2 = this -> OutputExtentStart [ 1 ] ; _arg3 = this -> OutputExtentStart [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << OutputExtentStart  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetOutputExtentStart ( int _arg [ 3 ] ) { this -> GetOutputExtentStart ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; /@} /@{ *
##  Specify a new data spacing explicitly.  The default is to
##  use the spacing of the Input, or of the InformationInput
##  if InformationInput is set.
##  virtual void SetOutputExtentStartOutputSpacing ( double _arg1 , double _arg2 , double _arg3 ) { vtkDebugWithObjectMacro ( this , <<  setting  << OutputSpacing  to ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; if ( ( this -> OutputSpacing [ 0 ] != _arg1 ) || ( this -> OutputSpacing [ 1 ] != _arg2 ) || ( this -> OutputSpacing [ 2 ] != _arg3 ) ) { this -> OutputSpacing [ 0 ] = _arg1 ; this -> OutputSpacing [ 1 ] = _arg2 ; this -> OutputSpacing [ 2 ] = _arg3 ; this -> Modified ( ) ; } } virtual void SetOutputExtentStartOutputSpacing ( const double _arg [ 3 ] ) { this -> SetOutputExtentStartOutputSpacing ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual double * GetOutputExtentStartOutputSpacing ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << OutputSpacing  pointer  << this -> OutputSpacing ) ; return this -> OutputSpacing ; } VTK_WRAPEXCLUDE virtual void GetOutputExtentStartOutputSpacing ( double & _arg1 , double & _arg2 , double & _arg3 ) { _arg1 = this -> OutputSpacing [ 0 ] ; _arg2 = this -> OutputSpacing [ 1 ] ; _arg3 = this -> OutputSpacing [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << OutputSpacing  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetOutputExtentStartOutputSpacing ( double _arg [ 3 ] ) { this -> GetOutputExtentStartOutputSpacing ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; /@} /@{ *
##  Specify a new data origin explicitly.  The default is to
##  use the origin of the Input, or of the InformationInput
##  if InformationInput is set.
##  virtual void SetOutputExtentStartOutputSpacingOutputOrigin ( double _arg1 , double _arg2 , double _arg3 ) { vtkDebugWithObjectMacro ( this , <<  setting  << OutputOrigin  to ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; if ( ( this -> OutputOrigin [ 0 ] != _arg1 ) || ( this -> OutputOrigin [ 1 ] != _arg2 ) || ( this -> OutputOrigin [ 2 ] != _arg3 ) ) { this -> OutputOrigin [ 0 ] = _arg1 ; this -> OutputOrigin [ 1 ] = _arg2 ; this -> OutputOrigin [ 2 ] = _arg3 ; this -> Modified ( ) ; } } virtual void SetOutputExtentStartOutputSpacingOutputOrigin ( const double _arg [ 3 ] ) { this -> SetOutputExtentStartOutputSpacingOutputOrigin ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual double * GetOutputExtentStartOutputSpacingOutputOrigin ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << OutputOrigin  pointer  << this -> OutputOrigin ) ; return this -> OutputOrigin ; } VTK_WRAPEXCLUDE virtual void GetOutputExtentStartOutputSpacingOutputOrigin ( double & _arg1 , double & _arg2 , double & _arg3 ) { _arg1 = this -> OutputOrigin [ 0 ] ; _arg2 = this -> OutputOrigin [ 1 ] ; _arg3 = this -> OutputOrigin [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << OutputOrigin  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetOutputExtentStartOutputSpacingOutputOrigin ( double _arg [ 3 ] ) { this -> GetOutputExtentStartOutputSpacingOutputOrigin ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; /@} /@{ *
##  Set the Origin of the output so that image coordinate (0,0,0)
##  lies at the Center of the data set.  This will override
##  SetOutputOrigin.  This is often a useful operation to apply
##  before using vtkImageReslice to apply a transformation to an image.
##  virtual void SetCenterImage ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  CenterImage  to  << _arg ) ; if ( this -> CenterImage != _arg ) { this -> CenterImage = _arg ; this -> Modified ( ) ; } } ; virtual void CenterImageOn ( ) { this -> SetCenterImage ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void CenterImageOff ( ) { this -> SetCenterImage ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; virtual vtkTypeBool GetCenterImage ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << CenterImage  of  << this -> CenterImage ) ; return this -> CenterImage ; } ; /@} /@{ *
##  Apply a translation to the extent.
##  virtual void SetOutputExtentStartOutputSpacingOutputOriginExtentTranslation ( int _arg1 , int _arg2 , int _arg3 ) { vtkDebugWithObjectMacro ( this , <<  setting  << ExtentTranslation  to ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; if ( ( this -> ExtentTranslation [ 0 ] != _arg1 ) || ( this -> ExtentTranslation [ 1 ] != _arg2 ) || ( this -> ExtentTranslation [ 2 ] != _arg3 ) ) { this -> ExtentTranslation [ 0 ] = _arg1 ; this -> ExtentTranslation [ 1 ] = _arg2 ; this -> ExtentTranslation [ 2 ] = _arg3 ; this -> Modified ( ) ; } } virtual void SetOutputExtentStartOutputSpacingOutputOriginExtentTranslation ( const int _arg [ 3 ] ) { this -> SetOutputExtentStartOutputSpacingOutputOriginExtentTranslation ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual int * GetOutputExtentStartOutputSpacingOutputOriginExtentTranslation ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << ExtentTranslation  pointer  << this -> ExtentTranslation ) ; return this -> ExtentTranslation ; } VTK_WRAPEXCLUDE virtual void GetOutputExtentStartOutputSpacingOutputOriginExtentTranslation ( int & _arg1 , int & _arg2 , int & _arg3 ) { _arg1 = this -> ExtentTranslation [ 0 ] ; _arg2 = this -> ExtentTranslation [ 1 ] ; _arg3 = this -> ExtentTranslation [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << ExtentTranslation  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetOutputExtentStartOutputSpacingOutputOriginExtentTranslation ( int _arg [ 3 ] ) { this -> GetOutputExtentStartOutputSpacingOutputOriginExtentTranslation ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; /@} /@{ *
##  Apply a scale factor to the spacing.
##  virtual void SetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScale ( double _arg1 , double _arg2 , double _arg3 ) { vtkDebugWithObjectMacro ( this , <<  setting  << SpacingScale  to ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; if ( ( this -> SpacingScale [ 0 ] != _arg1 ) || ( this -> SpacingScale [ 1 ] != _arg2 ) || ( this -> SpacingScale [ 2 ] != _arg3 ) ) { this -> SpacingScale [ 0 ] = _arg1 ; this -> SpacingScale [ 1 ] = _arg2 ; this -> SpacingScale [ 2 ] = _arg3 ; this -> Modified ( ) ; } } virtual void SetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScale ( const double _arg [ 3 ] ) { this -> SetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScale ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual double * GetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScale ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << SpacingScale  pointer  << this -> SpacingScale ) ; return this -> SpacingScale ; } VTK_WRAPEXCLUDE virtual void GetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScale ( double & _arg1 , double & _arg2 , double & _arg3 ) { _arg1 = this -> SpacingScale [ 0 ] ; _arg2 = this -> SpacingScale [ 1 ] ; _arg3 = this -> SpacingScale [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << SpacingScale  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScale ( double _arg [ 3 ] ) { this -> GetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScale ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; /@} /@{ *
##  Apply a translation to the origin.
##  virtual void SetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScaleOriginTranslation ( double _arg1 , double _arg2 , double _arg3 ) { vtkDebugWithObjectMacro ( this , <<  setting  << OriginTranslation  to ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; if ( ( this -> OriginTranslation [ 0 ] != _arg1 ) || ( this -> OriginTranslation [ 1 ] != _arg2 ) || ( this -> OriginTranslation [ 2 ] != _arg3 ) ) { this -> OriginTranslation [ 0 ] = _arg1 ; this -> OriginTranslation [ 1 ] = _arg2 ; this -> OriginTranslation [ 2 ] = _arg3 ; this -> Modified ( ) ; } } virtual void SetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScaleOriginTranslation ( const double _arg [ 3 ] ) { this -> SetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScaleOriginTranslation ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual double * GetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScaleOriginTranslation ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << OriginTranslation  pointer  << this -> OriginTranslation ) ; return this -> OriginTranslation ; } VTK_WRAPEXCLUDE virtual void GetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScaleOriginTranslation ( double & _arg1 , double & _arg2 , double & _arg3 ) { _arg1 = this -> OriginTranslation [ 0 ] ; _arg2 = this -> OriginTranslation [ 1 ] ; _arg3 = this -> OriginTranslation [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << OriginTranslation  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScaleOriginTranslation ( double _arg [ 3 ] ) { this -> GetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScaleOriginTranslation ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; /@} /@{ *
##  Apply a scale to the origin.  The scale is applied
##  before the translation.
##  virtual void SetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScaleOriginTranslationOriginScale ( double _arg1 , double _arg2 , double _arg3 ) { vtkDebugWithObjectMacro ( this , <<  setting  << OriginScale  to ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; if ( ( this -> OriginScale [ 0 ] != _arg1 ) || ( this -> OriginScale [ 1 ] != _arg2 ) || ( this -> OriginScale [ 2 ] != _arg3 ) ) { this -> OriginScale [ 0 ] = _arg1 ; this -> OriginScale [ 1 ] = _arg2 ; this -> OriginScale [ 2 ] = _arg3 ; this -> Modified ( ) ; } } virtual void SetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScaleOriginTranslationOriginScale ( const double _arg [ 3 ] ) { this -> SetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScaleOriginTranslationOriginScale ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual double * GetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScaleOriginTranslationOriginScale ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << OriginScale  pointer  << this -> OriginScale ) ; return this -> OriginScale ; } VTK_WRAPEXCLUDE virtual void GetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScaleOriginTranslationOriginScale ( double & _arg1 , double & _arg2 , double & _arg3 ) { _arg1 = this -> OriginScale [ 0 ] ; _arg2 = this -> OriginScale [ 1 ] ; _arg3 = this -> OriginScale [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << OriginScale  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScaleOriginTranslationOriginScale ( double _arg [ 3 ] ) { this -> GetOutputExtentStartOutputSpacingOutputOriginExtentTranslationSpacingScaleOriginTranslationOriginScale ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; /@} protected : vtkImageChangeInformation ( ) ; ~ vtkImageChangeInformation ( ) override ; vtkTypeBool CenterImage ; int OutputExtentStart [ 3 ] ; int ExtentTranslation [ 3 ] ; int FinalExtentTranslation [ 3 ] ; double OutputSpacing [ 3 ] ; double SpacingScale [ 3 ] ; double OutputOrigin [ 3 ] ; double OriginScale [ 3 ] ; double OriginTranslation [ 3 ] ; int RequestUpdateExtent ( vtkInformation * , vtkInformationVector * * , vtkInformationVector * ) override ; int RequestInformation ( vtkInformation * , vtkInformationVector * * , vtkInformationVector * ) override ; int RequestData ( vtkInformation * , vtkInformationVector * * , vtkInformationVector * ) override ; int FillInputPortInformation ( int port , vtkInformation * info ) override ; private : vtkImageChangeInformation ( const vtkImageChangeInformation & ) = delete ; void operator = ( const vtkImageChangeInformation & ) = delete ; } ;
## Error: token expected: ; but got: [identifier]!!!
