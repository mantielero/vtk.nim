## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkElevationFilter.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class   vtkElevationFilter
##  @brief   generate scalars along a specified direction
##
##  vtkElevationFilter is a filter to generate scalar values from a
##  dataset.  The scalar values lie within a user specified range, and
##  are generated by computing a projection of each dataset point onto
##  a line. The line can be oriented arbitrarily. A typical example is
##  to generate scalars based on elevation or height above a plane.
##
##  @warning
##  vtkSimpleElevationFilter may be easier to use in many cases; e.g.,
##  compute vertical elevation above zero z-point.
##
##  @warning
##  This class has been threaded with vtkSMPTools. Using TBB or other
##  non-sequential type (set in the CMake variable
##  VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
##
##  @sa
##  vtkSimpleElevationFilter
##

import
  vtkDataSetAlgorithm, vtkFiltersCoreModule

type
  vtkElevationFilter* {.importcpp: "vtkElevationFilter",
                       header: "vtkElevationFilter.h", bycopy.} = object of vtkDataSetAlgorithm
    vtkElevationFilter* {.importc: "vtkElevationFilter".}: VTK_NEWINSTANCE


proc New*(): ptr vtkElevationFilter {.importcpp: "vtkElevationFilter::New(@)",
                                  header: "vtkElevationFilter.h".}
type
  vtkElevationFilterSuperclass* = vtkDataSetAlgorithm

proc IsTypeOf*(`type`: cstring): vtkTypeBool {.
    importcpp: "vtkElevationFilter::IsTypeOf(@)", header: "vtkElevationFilter.h".}
proc IsA*(this: var vtkElevationFilter; `type`: cstring): vtkTypeBool {.
    importcpp: "IsA", header: "vtkElevationFilter.h".}
proc SafeDownCast*(o: ptr vtkObjectBase): ptr vtkElevationFilter {.
    importcpp: "vtkElevationFilter::SafeDownCast(@)",
    header: "vtkElevationFilter.h".}
## !!!Ignored construct:  * NewInstance ( ) const { return vtkElevationFilter :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkDataSetAlgorithm :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkElevationFilter :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkElevationFilter :: New ( ) ; } public : ;
## Error: identifier expected, but got: *!!!

proc PrintSelf*(this: var vtkElevationFilter; os: var ostream; indent: vtkIndent) {.
    importcpp: "PrintSelf", header: "vtkElevationFilter.h".}
proc SetLowPoint*(this: var vtkElevationFilter; _arg1: cdouble; _arg2: cdouble;
                 _arg3: cdouble) {.importcpp: "SetLowPoint",
                                 header: "vtkElevationFilter.h".}
proc SetLowPoint*(this: var vtkElevationFilter; _arg: array[3, cdouble]) {.
    importcpp: "SetLowPoint", header: "vtkElevationFilter.h".}
## !!!Ignored construct:  virtual double * GetLowPoint ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << LowPoint  pointer  << this -> LowPoint ) ; return this -> LowPoint ; } VTK_WRAPEXCLUDE virtual void GetLowPoint ( double data [ 3 ] ) { for ( int i = 0 ; i < 3 ; i ++ ) { data [ i ] = this -> LowPoint [ i ] ; } } ;
## Error: expected ';'!!!

proc SetLowPointHighPoint*(this: var vtkElevationFilter; _arg1: cdouble;
                          _arg2: cdouble; _arg3: cdouble) {.
    importcpp: "SetLowPointHighPoint", header: "vtkElevationFilter.h".}
proc SetLowPointHighPoint*(this: var vtkElevationFilter; _arg: array[3, cdouble]) {.
    importcpp: "SetLowPointHighPoint", header: "vtkElevationFilter.h".}
## !!!Ignored construct:  virtual double * GetLowPointHighPoint ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << HighPoint  pointer  << this -> HighPoint ) ; return this -> HighPoint ; } VTK_WRAPEXCLUDE virtual void GetLowPointHighPoint ( double data [ 3 ] ) { for ( int i = 0 ; i < 3 ; i ++ ) { data [ i ] = this -> HighPoint [ i ] ; } } ;
## Error: expected ';'!!!

proc SetScalarRange*(this: var vtkElevationFilter; _arg1: cdouble; _arg2: cdouble) {.
    importcpp: "SetScalarRange", header: "vtkElevationFilter.h".}
proc SetScalarRange*(this: var vtkElevationFilter; _arg: array[2, cdouble]) {.
    importcpp: "SetScalarRange", header: "vtkElevationFilter.h".}
## !!!Ignored construct:  virtual double * GetLowPointHighPointScalarRange ( ) VTK_SIZEHINT ( 2 ) { vtkDebugWithObjectMacro ( this , <<  returning  << ScalarRange  pointer  << this -> ScalarRange ) ; return this -> ScalarRange ; } VTK_WRAPEXCLUDE virtual void GetLowPointHighPointScalarRange ( double data [ 2 ] ) { for ( int i = 0 ; i < 2 ; i ++ ) { data [ i ] = this -> ScalarRange [ i ] ; } } ;
## Error: expected ';'!!!
