## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkIOSSWriter.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class vtkIOSSWriter
##  @brief writer using IOSS
##
##  vtkIOSSWriter is a writer to write datasets using IOSS library. Currently
##  this writer supports writing Exodus files. This writer is a work in progress
##  and currently only supports targeted use-cases. The writer will be
##  iteratively cleaned up and fixed to support all types of incoming datasets.
##

import
  vtkDataObjectAlgorithm, vtkIOIOSSModule

discard "forward decl of vtkMultiProcessController"
type
  vtkIOSSWriter* {.importcpp: "vtkIOSSWriter", header: "vtkIOSSWriter.h", bycopy.} = object of vtkDataObjectAlgorithm
    vtkIOSSWriter* {.importc: "vtkIOSSWriter".}: VTK_NEWINSTANCE


proc New*(): ptr vtkIOSSWriter {.importcpp: "vtkIOSSWriter::New(@)",
                             header: "vtkIOSSWriter.h".}
type
  vtkIOSSWriterSuperclass* = vtkDataObjectAlgorithm

proc IsTypeOf*(`type`: cstring): vtkTypeBool {.
    importcpp: "vtkIOSSWriter::IsTypeOf(@)", header: "vtkIOSSWriter.h".}
proc IsA*(this: var vtkIOSSWriter; `type`: cstring): vtkTypeBool {.importcpp: "IsA",
    header: "vtkIOSSWriter.h".}
proc SafeDownCast*(o: ptr vtkObjectBase): ptr vtkIOSSWriter {.
    importcpp: "vtkIOSSWriter::SafeDownCast(@)", header: "vtkIOSSWriter.h".}
## !!!Ignored construct:  * NewInstance ( ) const { return vtkIOSSWriter :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkDataObjectAlgorithm :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkIOSSWriter :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkIOSSWriter :: New ( ) ; } public : ;
## Error: identifier expected, but got: *!!!

proc PrintSelf*(this: var vtkIOSSWriter; os: var ostream; indent: vtkIndent) {.
    importcpp: "PrintSelf", header: "vtkIOSSWriter.h".}
proc SetFileName*(this: var vtkIOSSWriter; _arg: cstring) {.importcpp: "SetFileName",
    header: "vtkIOSSWriter.h".}
proc GetFileName*(this: var vtkIOSSWriter): cstring {.importcpp: "GetFileName",
    header: "vtkIOSSWriter.h".}
  ## /@}
  ## /@{
  ## *
  ##  Exodus wants global ids to start with 1, while VTK generally produces
  ##  global ids starting with 0. Set this to true (default false), if the global
  ##  ids are generated by VTK and hence start with 0. When writing to the output
  ##  file, they will be offset by 1 to ensure the ids are valid exodus ids.
  ##
proc SetOffsetGlobalIds*(this: var vtkIOSSWriter; _arg: bool) {.
    importcpp: "SetOffsetGlobalIds", header: "vtkIOSSWriter.h".}
## !!!Ignored construct:  virtual bool GetOffsetGlobalIds ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << OffsetGlobalIds  of  << this -> OffsetGlobalIds ) ; return this -> OffsetGlobalIds ; } ;
## Error: expected ';'!!!

proc OffsetGlobalIdsOn*(this: var vtkIOSSWriter) {.importcpp: "OffsetGlobalIdsOn",
    header: "vtkIOSSWriter.h".}
proc OffsetGlobalIdsOff*(this: var vtkIOSSWriter) {.importcpp: "OffsetGlobalIdsOff",
    header: "vtkIOSSWriter.h".}
  ## /@}
  ## /@{
  ## *
  ##  If input is untransformed IOSS dataset, then the writer can preserve entity
  ##  group classifications, such as element blocks, side sets etc. The same is
  ##  not true if the input has been transformed e.g. through a clip filter. Thus
  ##  flag is used to indicate whether the input has valid element
  ##  classifications.
  ##
proc SetOffsetGlobalIdsPreserveInputEntityGroups*(this: var vtkIOSSWriter;
    _arg: bool) {.importcpp: "SetOffsetGlobalIdsPreserveInputEntityGroups",
                header: "vtkIOSSWriter.h".}
## !!!Ignored construct:  virtual bool GetOffsetGlobalIdsPreserveInputEntityGroups ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << PreserveInputEntityGroups  of  << this -> PreserveInputEntityGroups ) ; return this -> PreserveInputEntityGroups ; } ;
## Error: expected ';'!!!

proc PreserveInputEntityGroupsOn*(this: var vtkIOSSWriter) {.
    importcpp: "PreserveInputEntityGroupsOn", header: "vtkIOSSWriter.h".}
proc PreserveInputEntityGroupsOff*(this: var vtkIOSSWriter) {.
    importcpp: "PreserveInputEntityGroupsOff", header: "vtkIOSSWriter.h".}
  ## /@}
  ## /@{
  ## *
  ##  If input dataset has displacements pre-applied, setting the displacement
  ##  magnitude to non-zero ensures that the point coordinates in the dataset are
  ##  correctly transformed using the displacement field array, if present.
  ##
  ##  Defaults to 1.0.
  ##
proc SetDisplacementMagnitude*(this: var vtkIOSSWriter; _arg: cdouble) {.
    importcpp: "SetDisplacementMagnitude", header: "vtkIOSSWriter.h".}
proc GetDisplacementMagnitudeMinValue*(this: var vtkIOSSWriter): cdouble {.
    importcpp: "GetDisplacementMagnitudeMinValue", header: "vtkIOSSWriter.h".}
proc GetDisplacementMagnitudeMaxValue*(this: var vtkIOSSWriter): cdouble {.
    importcpp: "GetDisplacementMagnitudeMaxValue", header: "vtkIOSSWriter.h".}
## !!!Ignored construct:  virtual double GetOffsetGlobalIdsPreserveInputEntityGroupsDisplacementMagnitude ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << DisplacementMagnitude  of  << this -> DisplacementMagnitude ) ; return this -> DisplacementMagnitude ; } ;
## Error: expected ';'!!!

proc SetDisplacementMagnitudeMaximumTimeStepsPerFile*(this: var vtkIOSSWriter;
    _arg: cint) {.importcpp: "SetDisplacementMagnitudeMaximumTimeStepsPerFile",
                header: "vtkIOSSWriter.h".}
proc GetDisplacementMagnitudeMinValueMaximumTimeStepsPerFileMinValue*(
    this: var vtkIOSSWriter): cint {.importcpp: "GetDisplacementMagnitudeMinValueMaximumTimeStepsPerFileMinValue",
                                 header: "vtkIOSSWriter.h".}
proc GetDisplacementMagnitudeMaxValueMaximumTimeStepsPerFileMaxValue*(
    this: var vtkIOSSWriter): cint {.importcpp: "GetDisplacementMagnitudeMaxValueMaximumTimeStepsPerFileMaxValue",
                                 header: "vtkIOSSWriter.h".}
## !!!Ignored construct:  virtual int GetOffsetGlobalIdsPreserveInputEntityGroupsDisplacementMagnitudeMaximumTimeStepsPerFile ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << MaximumTimeStepsPerFile  of  << this -> MaximumTimeStepsPerFile ) ; return this -> MaximumTimeStepsPerFile ; } ;
## Error: expected ';'!!!

proc SetController*(this: var vtkIOSSWriter;
                   controller: ptr vtkMultiProcessController) {.
    importcpp: "SetController", header: "vtkIOSSWriter.h".}
proc GetnameController*(this: var vtkIOSSWriter): ptr vtkMultiProcessController {.
    importcpp: "GetnameController", header: "vtkIOSSWriter.h".}
  ## /@}
  ## *
  ##  Writes the input dataset.
  ##
proc Write*(this: var vtkIOSSWriter): bool {.importcpp: "Write",
                                        header: "vtkIOSSWriter.h".}