## =========================================================================
## Program:   Visualization Toolkit
## Module:    vtkAxisActor.h
## Language:  C++
##
## Copyright (c) 1993-2000 Ken Martin, Will Schroeder, Bill Lorensen
## All rights reserved.
## This software is distributed WITHOUT ANY WARRANTY; without even
## the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
## PURPOSE.  See the above copyright notice for more information.
## =========================================================================
## *
##  @class   vtkAxisActor
##  @brief   Create an axis with tick marks and labels
##
##  vtkAxisActor creates an axis with tick marks, labels, and/or a title,
##  depending on the particular instance variable settings. It is assumed that
##  the axes is part of a bounding box and is orthogonal to one of the
##  coordinate axes.  To use this class, you typically specify two points
##  defining the start and end points of the line (xyz definition using
##  vtkCoordinate class), the axis type (X, Y or Z), the axis location in
##  relation to the bounding box, the bounding box, the number of labels, and
##  the data range (min,max). You can also control what parts of the axis are
##  visible including the line, the tick marks, the labels, and the title. It
##  is also possible to control gridlines, and specify on which 'side' the
##  tickmarks are drawn (again with respect to the underlying assumed
##  bounding box). You can also specify the label format (a printf style format).
##
##  This class decides how to locate the labels, and how to create reasonable
##  tick marks and labels.
##
##  Labels follow the camera so as to be legible from any viewpoint.
##
##  The instance variables Point1 and Point2 are instances of vtkCoordinate.
##  All calculations and references are in World Coordinates.
##
##  @par Thanks:
##  This class was written by:
##  Hank Childs, Kathleen Bonnell, Amy Squillacote, Brad Whitlock,
##  Eric Brugger, Claire Guilbaud, Nicolas Dolegieviez, Will Schroeder,
##  Karthik Krishnan, Aashish Chaudhary, Philippe Pebay, David Gobbi,
##  David Partyka, Utkarsh Ayachit David Cole, Francois Bertel, and Mark Olesen
##  Part of this work was supported by CEA/DIF - Commissariat a l'Energie Atomique,
##  Centre DAM Ile-De-France, BP12, F-91297 Arpajon, France.
##
##  @sa
##  vtkActor vtkVectorText vtkPolyDataMapper vtkAxisActor2D vtkCoordinate
##

## !!!Ignored construct:  # vtkAxisActor_h [NewLine] # vtkAxisActor_h [NewLine] # vtkActor.h [NewLine] # vtkRenderingAnnotationModule.h  For export macro [NewLine] class vtkAxisFollower ;
## Error: token expected: ; but got: [identifier]!!!

discard "forward decl of vtkCamera"
discard "forward decl of vtkCoordinate"
discard "forward decl of vtkFollower"
discard "forward decl of vtkPoints"
discard "forward decl of vtkPolyData"
discard "forward decl of vtkPolyDataMapper"
discard "forward decl of vtkProp3DAxisFollower"
discard "forward decl of vtkProperty2D"
discard "forward decl of vtkStringArray"
discard "forward decl of vtkTextActor"
discard "forward decl of vtkTextActor3D"
discard "forward decl of vtkTextProperty"
discard "forward decl of vtkVectorText"
## !!!Ignored construct:  class VTKRENDERINGANNOTATION_EXPORT vtkAxisActor : public vtkActor { public : protected : const char * GetClassNameInternal ( ) const override { return thisClass ; } public : typedef vtkActor Superclass ; static vtkTypeBool IsTypeOf ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 1 ; } return vtkActor :: IsTypeOf ( type ) ; } vtkTypeBool IsA ( const char * type ) override { return this -> vtkAxisActor :: IsTypeOf ( type ) ; } static vtkAxisActor * SafeDownCast ( vtkObjectBase * o ) { if ( o && o -> IsA ( thisClass ) ) { return static_cast < vtkAxisActor * > ( o ) ; } return nullptr ; } VTK_NEWINSTANCE vtkAxisActor * NewInstance ( ) const { return vtkAxisActor :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkActor :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkAxisActor :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkAxisActor :: New ( ) ; } public : ; void PrintSelf ( ostream & os , vtkIndent indent ) override ; *
##  Instantiate object.
##  static vtkAxisActor * New ( ) ; /@{ *
##  Specify the position of the first point defining the axis.
##  virtual vtkCoordinate * GetPoint1Coordinate ( ) ; virtual void SetPoint1 ( double x [ 3 ] ) { this -> SetPoint1 ( x [ 0 ] , x [ 1 ] , x [ 2 ] ) ; } virtual void SetPoint1 ( double x , double y , double z ) ; virtual double * GetPoint1 ( ) ; /@} /@{ *
##  Specify the position of the second point defining the axis.
##  virtual vtkCoordinate * GetPoint2Coordinate ( ) ; virtual void SetPoint2 ( double x [ 3 ] ) { this -> SetPoint2 ( x [ 0 ] , x [ 1 ] , x [ 2 ] ) ; } virtual void SetPoint2 ( double x , double y , double z ) ; virtual double * GetPoint2 ( ) ; /@} /@{ *
##  Specify the (min,max) axis range. This will be used in the generation
##  of labels, if labels are visible.
##  virtual void SetRange ( double _arg1 , double _arg2 ) { vtkDebugWithObjectMacro ( this , <<  setting  << Range  to ( << _arg1 << , << _arg2 << ) ) ; if ( ( this -> Range [ 0 ] != _arg1 ) || ( this -> Range [ 1 ] != _arg2 ) ) { this -> Range [ 0 ] = _arg1 ; this -> Range [ 1 ] = _arg2 ; this -> Modified ( ) ; } } void SetRange ( const double _arg [ 2 ] ) { this -> SetRange ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; virtual double * GetRange ( ) VTK_SIZEHINT ( 2 ) { vtkDebugWithObjectMacro ( this , <<  returning  << Range  pointer  << this -> Range ) ; return this -> Range ; } VTK_WRAPEXCLUDE virtual void GetRange ( double data [ 2 ] ) { for ( int i = 0 ; i < 2 ; i ++ ) { data [ i ] = this -> Range [ i ] ; } } ; /@} /@{ *
##  Set or get the bounds for this Actor as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax).
##  void SetBounds ( const double bounds [ 6 ] ) ; void SetBounds ( double xmin , double xmax , double ymin , double ymax , double zmin , double zmax ) ; double * GetBounds ( void ) VTK_SIZEHINT ( 6 ) override ; void GetBounds ( double bounds [ 6 ] ) ; /@} /@{ *
##  Set/Get the format with which to print the labels on the axis.
##  virtual void SetLabelFormat ( const char * _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << LabelFormat  to  << ( _arg ? _arg : (null) ) ) ; if ( this -> LabelFormat == nullptr && _arg == nullptr ) { return ; } if ( this -> LabelFormat && _arg && ( ! strcmp ( this -> LabelFormat , _arg ) ) ) { return ; } delete [ ] this -> LabelFormat ; if ( _arg ) { size_t n = strlen ( _arg ) + 1 ; char * cp1 = new char [ n ] ; const char * cp2 = ( _arg ) ; this -> LabelFormat = cp1 ; do { * cp1 ++ = * cp2 ++ ; } while ( -- n ) ; } else { this -> LabelFormat = nullptr ; } this -> Modified ( ) ; } ; virtual char * GetLabelFormat ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << LabelFormat  of  << ( this -> LabelFormat ? this -> LabelFormat : (null) ) ) ; return this -> LabelFormat ; } ; /@} /@{ *
##  Render text as polygons (vtkVectorText) or as sprites (vtkTextActor3D).
##  In 2D mode, the value is ignored and text is rendered as vtkTextActor.
##  False(0) by default.
##  See Also:
##  GetUse2DMode(), SetUse2DMode
##  virtual void SetUseTextActor3D ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  UseTextActor3D  to  << _arg ) ; if ( this -> UseTextActor3D != _arg ) { this -> UseTextActor3D = _arg ; this -> Modified ( ) ; } } ; virtual int GetUseTextActor3D ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << UseTextActor3D  of  << this -> UseTextActor3D ) ; return this -> UseTextActor3D ; } ; /@} /@{ *
##  Set/Get the flag that controls whether the minor ticks are visible.
##  virtual void SetUseTextActor3DMinorTicksVisible ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  MinorTicksVisible  to  << _arg ) ; if ( this -> MinorTicksVisible != _arg ) { this -> MinorTicksVisible = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetUseTextActor3DMinorTicksVisible ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << MinorTicksVisible  of  << this -> MinorTicksVisible ) ; return this -> MinorTicksVisible ; } ; virtual void MinorTicksVisibleOn ( ) { this -> SetMinorTicksVisible ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void MinorTicksVisibleOff ( ) { this -> SetMinorTicksVisible ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get the title of the axis actor,
##  void SetTitle ( const char * t ) ; virtual char * GetLabelFormatTitle ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << Title  of  << ( this -> Title ? this -> Title : (null) ) ) ; return this -> Title ; } ; /@} /@{ *
##  Set/Get the common exponent of the labels values
##  void SetExponent ( const char * t ) ; virtual char * GetLabelFormatTitleExponent ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << Exponent  of  << ( this -> Exponent ? this -> Exponent : (null) ) ) ; return this -> Exponent ; } ; /@} /@{ *
##  Set/Get the size of the major tick marks
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSize ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  MajorTickSize  to  << _arg ) ; if ( this -> MajorTickSize != _arg ) { this -> MajorTickSize = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSize ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << MajorTickSize  of  << this -> MajorTickSize ) ; return this -> MajorTickSize ; } ; /@} /@{ *
##  Set/Get the size of the major tick marks
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSize ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  MinorTickSize  to  << _arg ) ; if ( this -> MinorTickSize != _arg ) { this -> MinorTickSize = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSize ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << MinorTickSize  of  << this -> MinorTickSize ) ; return this -> MinorTickSize ; } ; /@} enum TickLocation { VTK_TICKS_INSIDE = 0 , VTK_TICKS_OUTSIDE = 1 , VTK_TICKS_BOTH = 2 } ; /@{ *
##  Set/Get the location of the ticks.
##  Inside: tick end toward positive direction of perpendicular axes.
##  Outside: tick end toward negative direction of perpendicular axes.
##  virtual void SetTickLocation ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << TickLocation  to  << _arg ) ; if ( this -> TickLocation != ( _arg < VTK_TICKS_INSIDE ? VTK_TICKS_INSIDE : ( _arg > VTK_TICKS_BOTH ? VTK_TICKS_BOTH : _arg ) ) ) { this -> TickLocation = ( _arg < VTK_TICKS_INSIDE ? VTK_TICKS_INSIDE : ( _arg > VTK_TICKS_BOTH ? VTK_TICKS_BOTH : _arg ) ) ; this -> Modified ( ) ; } } virtual int GetTickLocationMinValue ( ) { return VTK_TICKS_INSIDE ; } virtual int GetTickLocationMaxValue ( ) { return VTK_TICKS_BOTH ; } ; virtual int GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocation ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << TickLocation  of  << this -> TickLocation ) ; return this -> TickLocation ; } ; /@} void SetTickLocationToInside ( void ) { this -> SetTickLocation ( VTK_TICKS_INSIDE ) ; } void SetTickLocationToOutside ( void ) { this -> SetTickLocation ( VTK_TICKS_OUTSIDE ) ; } void SetTickLocationToBoth ( void ) { this -> SetTickLocation ( VTK_TICKS_BOTH ) ; } /@{ *
##  Set/Get visibility of the axis line.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibility ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  AxisVisibility  to  << _arg ) ; if ( this -> AxisVisibility != _arg ) { this -> AxisVisibility = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibility ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << AxisVisibility  of  << this -> AxisVisibility ) ; return this -> AxisVisibility ; } ; virtual void AxisVisibilityOn ( ) { this -> SetMinorTicksVisibleAxisVisibility ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void AxisVisibilityOff ( ) { this -> SetMinorTicksVisibleAxisVisibility ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get visibility of the axis major tick marks.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibility ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  TickVisibility  to  << _arg ) ; if ( this -> TickVisibility != _arg ) { this -> TickVisibility = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibility ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << TickVisibility  of  << this -> TickVisibility ) ; return this -> TickVisibility ; } ; virtual void TickVisibilityOn ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibility ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void TickVisibilityOff ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibility ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get visibility of the axis labels.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibility ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  LabelVisibility  to  << _arg ) ; if ( this -> LabelVisibility != _arg ) { this -> LabelVisibility = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibility ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << LabelVisibility  of  << this -> LabelVisibility ) ; return this -> LabelVisibility ; } ; virtual void LabelVisibilityOn ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibility ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void LabelVisibilityOff ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibility ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get visibility of the axis title.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibility ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  TitleVisibility  to  << _arg ) ; if ( this -> TitleVisibility != _arg ) { this -> TitleVisibility = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibility ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << TitleVisibility  of  << this -> TitleVisibility ) ; return this -> TitleVisibility ; } ; virtual void TitleVisibilityOn ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibility ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void TitleVisibilityOff ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibility ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get visibility of the axis detached exponent.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibility ( bool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  ExponentVisibility  to  << _arg ) ; if ( this -> ExponentVisibility != _arg ) { this -> ExponentVisibility = _arg ; this -> Modified ( ) ; } } ; virtual bool GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibility ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ExponentVisibility  of  << this -> ExponentVisibility ) ; return this -> ExponentVisibility ; } ; virtual void ExponentVisibilityOn ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibility ( static_cast < bool > ( 1 ) ) ; } virtual void ExponentVisibilityOff ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibility ( static_cast < bool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get visibility of the axis detached exponent.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrection ( bool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  LastMajorTickPointCorrection  to  << _arg ) ; if ( this -> LastMajorTickPointCorrection != _arg ) { this -> LastMajorTickPointCorrection = _arg ; this -> Modified ( ) ; } } ; virtual bool GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrection ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << LastMajorTickPointCorrection  of  << this -> LastMajorTickPointCorrection ) ; return this -> LastMajorTickPointCorrection ; } ; virtual void LastMajorTickPointCorrectionOn ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrection ( static_cast < bool > ( 1 ) ) ; } virtual void LastMajorTickPointCorrectionOff ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrection ( static_cast < bool > ( 0 ) ) ; } ; /@} enum AlignLocation { VTK_ALIGN_TOP = 0 , VTK_ALIGN_BOTTOM = 1 , VTK_ALIGN_POINT1 = 2 , VTK_ALIGN_POINT2 = 3 } ; /@{ *
##  Get/Set the alignment of the title related to the axis.
##  Possible Alignment: VTK_ALIGN_TOP, VTK_ALIGN_BOTTOM, VTK_ALIGN_POINT1, VTK_ALIGN_POINT2
##  virtual void SetTitleAlignLocation ( int location ) ; virtual int GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocation ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << TitleAlignLocation  of  << this -> TitleAlignLocation ) ; return this -> TitleAlignLocation ; } ; /@} /@{ *
##  Get/Set the location of the Detached Exponent related to the axis.
##  Possible Location: VTK_ALIGN_TOP, VTK_ALIGN_BOTTOM, VTK_ALIGN_POINT1, VTK_ALIGN_POINT2
##  virtual void SetExponentLocation ( int location ) ; virtual int GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocation ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ExponentLocation  of  << this -> ExponentLocation ) ; return this -> ExponentLocation ; } ; /@} /@{ *
##  Set/Get the axis title text property.
##  virtual void SetTitleTextProperty ( vtkTextProperty * p ) ; virtual vtkTextProperty * GetnameTitleTextProperty ( ) { vtkDebugWithObjectMacro ( this , <<  returning  TitleTextProperty  address  << static_cast < vtkTextProperty * > ( this -> TitleTextProperty ) ) ; return this -> TitleTextProperty ; } ; /@} /@{ *
##  Set/Get the axis labels text property.
##  virtual void SetLabelTextProperty ( vtkTextProperty * p ) ; virtual vtkTextProperty * GetnameTitleTextPropertyLabelTextProperty ( ) { vtkDebugWithObjectMacro ( this , <<  returning  LabelTextProperty  address  << static_cast < vtkTextProperty * > ( this -> LabelTextProperty ) ) ; return this -> LabelTextProperty ; } ; /@} /@{ *
##  Get/Set axis actor property (axis and its ticks) (kept for compatibility)
##  void SetAxisLinesProperty ( vtkProperty * ) ; vtkProperty * GetAxisLinesProperty ( ) ; /@} /@{ *
##  Get/Set main line axis actor property
##  void SetAxisMainLineProperty ( vtkProperty * ) ; vtkProperty * GetAxisMainLineProperty ( ) ; /@} /@{ *
##  Get/Set axis actor property (axis and its ticks)
##  void SetAxisMajorTicksProperty ( vtkProperty * ) ; vtkProperty * GetAxisMajorTicksProperty ( ) ; /@} /@{ *
##  Get/Set axis actor property (axis and its ticks)
##  void SetAxisMinorTicksProperty ( vtkProperty * ) ; vtkProperty * GetAxisMinorTicksProperty ( ) ; /@} /@{ *
##  Get/Set gridlines actor property (outer grid lines)
##  void SetGridlinesProperty ( vtkProperty * ) ; vtkProperty * GetGridlinesProperty ( ) ; /@} /@{ *
##  Get/Set inner gridlines actor property
##  void SetInnerGridlinesProperty ( vtkProperty * ) ; vtkProperty * GetInnerGridlinesProperty ( ) ; /@} /@{ *
##  Get/Set gridPolys actor property (grid quads)
##  void SetGridpolysProperty ( vtkProperty * ) ; vtkProperty * GetGridpolysProperty ( ) ; /@} /@{ *
##  Set/Get whether gridlines should be drawn.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlines ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  DrawGridlines  to  << _arg ) ; if ( this -> DrawGridlines != _arg ) { this -> DrawGridlines = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlines ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << DrawGridlines  of  << this -> DrawGridlines ) ; return this -> DrawGridlines ; } ; virtual void DrawGridlinesOn ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlines ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void DrawGridlinesOff ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlines ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get whether ONLY the gridlines should be drawn.
##  This will only draw GridLines and will skip any other part of the rendering
##  such as Axis/Tick/Title/...
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnly ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  DrawGridlinesOnly  to  << _arg ) ; if ( this -> DrawGridlinesOnly != _arg ) { this -> DrawGridlinesOnly = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnly ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << DrawGridlinesOnly  of  << this -> DrawGridlinesOnly ) ; return this -> DrawGridlinesOnly ; } ; virtual void DrawGridlinesOnlyOn ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnly ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void DrawGridlinesOnlyOff ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnly ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocation ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  DrawGridlinesLocation  to  << _arg ) ; if ( this -> DrawGridlinesLocation != _arg ) { this -> DrawGridlinesLocation = _arg ; this -> Modified ( ) ; } } ; virtual int GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocation ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << DrawGridlinesLocation  of  << this -> DrawGridlinesLocation ) ; return this -> DrawGridlinesLocation ; } ; /@{ *
##  Set/Get whether inner gridlines should be drawn.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlines ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  DrawInnerGridlines  to  << _arg ) ; if ( this -> DrawInnerGridlines != _arg ) { this -> DrawInnerGridlines = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlines ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << DrawInnerGridlines  of  << this -> DrawInnerGridlines ) ; return this -> DrawInnerGridlines ; } ; virtual void DrawInnerGridlinesOn ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawInnerGridlines ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void DrawInnerGridlinesOff ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawInnerGridlines ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get the length to use when drawing gridlines.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLength ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  GridlineXLength  to  << _arg ) ; if ( this -> GridlineXLength != _arg ) { this -> GridlineXLength = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLength ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << GridlineXLength  of  << this -> GridlineXLength ) ; return this -> GridlineXLength ; } ; virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLength ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  GridlineYLength  to  << _arg ) ; if ( this -> GridlineYLength != _arg ) { this -> GridlineYLength = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLength ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << GridlineYLength  of  << this -> GridlineYLength ) ; return this -> GridlineYLength ; } ; virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLength ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  GridlineZLength  to  << _arg ) ; if ( this -> GridlineZLength != _arg ) { this -> GridlineZLength = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLength ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << GridlineZLength  of  << this -> GridlineZLength ) ; return this -> GridlineZLength ; } ; /@} /@{ *
##  Set/Get whether gridpolys should be drawn.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolys ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  DrawGridpolys  to  << _arg ) ; if ( this -> DrawGridpolys != _arg ) { this -> DrawGridpolys = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolys ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << DrawGridpolys  of  << this -> DrawGridpolys ) ; return this -> DrawGridpolys ; } ; virtual void DrawGridpolysOn ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawInnerGridlinesDrawGridpolys ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void DrawGridpolysOff ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawInnerGridlinesDrawGridpolys ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} enum AxisType { VTK_AXIS_TYPE_X = 0 , VTK_AXIS_TYPE_Y = 1 , VTK_AXIS_TYPE_Z = 2 } ; /@{ *
##  Set/Get the type of this axis.
##  virtual void SetTickLocationAxisType ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << AxisType  to  << _arg ) ; if ( this -> AxisType != ( _arg < VTK_AXIS_TYPE_X ? VTK_AXIS_TYPE_X : ( _arg > VTK_AXIS_TYPE_Z ? VTK_AXIS_TYPE_Z : _arg ) ) ) { this -> AxisType = ( _arg < VTK_AXIS_TYPE_X ? VTK_AXIS_TYPE_X : ( _arg > VTK_AXIS_TYPE_Z ? VTK_AXIS_TYPE_Z : _arg ) ) ; this -> Modified ( ) ; } } virtual int GetTickLocationMinValueAxisTypeMinValue ( ) { return VTK_AXIS_TYPE_X ; } virtual int GetTickLocationMaxValueAxisTypeMaxValue ( ) { return VTK_AXIS_TYPE_Z ; } ; virtual int GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisType ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << AxisType  of  << this -> AxisType ) ; return this -> AxisType ; } ; void SetAxisTypeToX ( void ) { this -> SetAxisType ( VTK_AXIS_TYPE_X ) ; } void SetAxisTypeToY ( void ) { this -> SetAxisType ( VTK_AXIS_TYPE_Y ) ; } void SetAxisTypeToZ ( void ) { this -> SetAxisType ( VTK_AXIS_TYPE_Z ) ; } /@} enum AxisPosition { VTK_AXIS_POS_MINMIN = 0 , VTK_AXIS_POS_MINMAX = 1 , VTK_AXIS_POS_MAXMAX = 2 , VTK_AXIS_POS_MAXMIN = 3 } ; /@{ *
##  Set/Get The type of scale, enable logarithmic scale or linear by default
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLog ( bool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  Log  to  << _arg ) ; if ( this -> Log != _arg ) { this -> Log = _arg ; this -> Modified ( ) ; } } ; virtual bool GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLog ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << Log  of  << this -> Log ) ; return this -> Log ; } ; virtual void LogOn ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawInnerGridlinesDrawGridpolysLog ( static_cast < bool > ( 1 ) ) ; } virtual void LogOff ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawInnerGridlinesDrawGridpolysLog ( static_cast < bool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get the position of this axis (in relation to an an
##  assumed bounding box).  For an x-type axis, MINMIN corresponds
##  to the x-edge in the bounding box where Y values are minimum and
##  Z values are minimum. For a y-type axis, MAXMIN corresponds to the
##  y-edge where X values are maximum and Z values are minimum.
##  virtual void SetTickLocationAxisTypeAxisPosition ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << AxisPosition  to  << _arg ) ; if ( this -> AxisPosition != ( _arg < VTK_AXIS_POS_MINMIN ? VTK_AXIS_POS_MINMIN : ( _arg > VTK_AXIS_POS_MAXMIN ? VTK_AXIS_POS_MAXMIN : _arg ) ) ) { this -> AxisPosition = ( _arg < VTK_AXIS_POS_MINMIN ? VTK_AXIS_POS_MINMIN : ( _arg > VTK_AXIS_POS_MAXMIN ? VTK_AXIS_POS_MAXMIN : _arg ) ) ; this -> Modified ( ) ; } } virtual int GetTickLocationMinValueAxisTypeMinValueAxisPositionMinValue ( ) { return VTK_AXIS_POS_MINMIN ; } virtual int GetTickLocationMaxValueAxisTypeMaxValueAxisPositionMaxValue ( ) { return VTK_AXIS_POS_MAXMIN ; } ; virtual int GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPosition ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << AxisPosition  of  << this -> AxisPosition ) ; return this -> AxisPosition ; } ; /@} void SetAxisPositionToMinMin ( void ) { this -> SetAxisPosition ( VTK_AXIS_POS_MINMIN ) ; } void SetAxisPositionToMinMax ( void ) { this -> SetAxisPosition ( VTK_AXIS_POS_MINMAX ) ; } void SetAxisPositionToMaxMax ( void ) { this -> SetAxisPosition ( VTK_AXIS_POS_MAXMAX ) ; } void SetAxisPositionToMaxMin ( void ) { this -> SetAxisPosition ( VTK_AXIS_POS_MAXMIN ) ; } /@{ *
##  Set/Get the camera for this axis.  The camera is used by the
##  labels to 'follow' the camera and be legible from any viewpoint.
##  virtual void SetCamera ( vtkCamera * ) ; virtual vtkCamera * GetnameTitleTextPropertyLabelTextPropertyCamera ( ) { vtkDebugWithObjectMacro ( this , <<  returning  Camera  address  << static_cast < vtkCamera * > ( this -> Camera ) ) ; return this -> Camera ; } ; /@} /@{ *
##  Draw the axis.
##  int RenderOpaqueGeometry ( vtkViewport * viewport ) override ; virtual int RenderTranslucentGeometry ( vtkViewport * viewport ) ; int RenderTranslucentPolygonalGeometry ( vtkViewport * viewport ) override ; int RenderOverlay ( vtkViewport * viewport ) override ; vtkTypeBool HasTranslucentPolygonalGeometry ( ) override ; /@} *
##  Release any graphics resources that are being consumed by this actor.
##  The parameter window could be used to determine which graphic
##  resources to release.
##  void ReleaseGraphicsResources ( vtkWindow * ) override ; double ComputeMaxLabelLength ( const double [ 3 ] ) ; double ComputeTitleLength ( const double [ 3 ] ) ; void SetLabelScale ( const double scale ) ; void SetLabelScale ( int labelIndex , const double scale ) ; void SetTitleScale ( const double scale ) ; /@{ *
##  Set/Get the starting position for minor and major tick points,
##  and the delta values that determine their spacing.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStart ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  MinorStart  to  << _arg ) ; if ( this -> MinorStart != _arg ) { this -> MinorStart = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStart ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << MinorStart  of  << this -> MinorStart ) ; return this -> MinorStart ; } ; double GetMajorStart ( int axis ) ; void SetMajorStart ( int axis , double value ) ;  vtkSetMacro(MajorStart, double);
##  vtkGetMacro(MajorStart, double); virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinor ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  DeltaMinor  to  << _arg ) ; if ( this -> DeltaMinor != _arg ) { this -> DeltaMinor = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinor ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << DeltaMinor  of  << this -> DeltaMinor ) ; return this -> DeltaMinor ; } ; double GetDeltaMajor ( int axis ) ; void SetDeltaMajor ( int axis , double value ) ;  vtkSetMacro(DeltaMajor, double);
##  vtkGetMacro(DeltaMajor, double);
## /@} /@{ *
##  Set/Get the starting position for minor and major tick points on
##  the range and the delta values that determine their spacing. The
##  range and the position need not be identical. ie the displayed
##  values need not match the actual positions in 3D space.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStart ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  MinorRangeStart  to  << _arg ) ; if ( this -> MinorRangeStart != _arg ) { this -> MinorRangeStart = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStart ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << MinorRangeStart  of  << this -> MinorRangeStart ) ; return this -> MinorRangeStart ; } ; virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStartMajorRangeStart ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  MajorRangeStart  to  << _arg ) ; if ( this -> MajorRangeStart != _arg ) { this -> MajorRangeStart = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStart ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << MajorRangeStart  of  << this -> MajorRangeStart ) ; return this -> MajorRangeStart ; } ; virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinor ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  DeltaRangeMinor  to  << _arg ) ; if ( this -> DeltaRangeMinor != _arg ) { this -> DeltaRangeMinor = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinor ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << DeltaRangeMinor  of  << this -> DeltaRangeMinor ) ; return this -> DeltaRangeMinor ; } ; virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajor ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  DeltaRangeMajor  to  << _arg ) ; if ( this -> DeltaRangeMajor != _arg ) { this -> DeltaRangeMajor = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajor ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << DeltaRangeMajor  of  << this -> DeltaRangeMajor ) ; return this -> DeltaRangeMajor ; } ; /@} void SetLabels ( vtkStringArray * labels ) ; void BuildAxis ( vtkViewport * viewport , bool ) ; /@{ *
##  Get title actor and it is responsible for drawing
##  title text.
##  virtual vtkAxisFollower * GetnameTitleTextPropertyLabelTextPropertyCameraTitleActor ( ) { vtkDebugWithObjectMacro ( this , <<  returning  TitleActor  address  << static_cast < vtkAxisFollower * > ( this -> TitleActor ) ) ; return this -> TitleActor ; } ; /@} /@{ *
##  Get exponent follower actor
##  virtual vtkAxisFollower * GetnameTitleTextPropertyLabelTextPropertyCameraTitleActorExponentActor ( ) { vtkDebugWithObjectMacro ( this , <<  returning  ExponentActor  address  << static_cast < vtkAxisFollower * > ( this -> ExponentActor ) ) ; return this -> ExponentActor ; } ; /@} *
##  Get label actors responsigle for drawing label text.
##  inline vtkAxisFollower * * GetLabelActors ( ) { return this -> LabelActors ; } /@{ *
##  Get title actor and it is responsible for drawing
##  title text.
##  virtual vtkProp3DAxisFollower * GetnameTitleTextPropertyLabelTextPropertyCameraTitleActorExponentActorTitleProp3D ( ) { vtkDebugWithObjectMacro ( this , <<  returning  TitleProp3D  address  << static_cast < vtkProp3DAxisFollower * > ( this -> TitleProp3D ) ) ; return this -> TitleProp3D ; } ; /@} *
##  Get label actors responsigle for drawing label text.
##  inline vtkProp3DAxisFollower * * GetLabelProps3D ( ) { return this -> LabelProps3D ; } /@{ *
##  Get title actor and it is responsible for drawing
##  title text.
##  virtual vtkProp3DAxisFollower * GetnameTitleTextPropertyLabelTextPropertyCameraTitleActorExponentActorTitleProp3DExponentProp3D ( ) { vtkDebugWithObjectMacro ( this , <<  returning  ExponentProp3D  address  << static_cast < vtkProp3DAxisFollower * > ( this -> ExponentProp3D ) ) ; return this -> ExponentProp3D ; } ; /@} /@{ *
##  Get total number of labels built. Once built
##  this count does not change.
##  virtual int GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorNumberOfLabelsBuilt ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << NumberOfLabelsBuilt  of  << this -> NumberOfLabelsBuilt ) ; return this -> NumberOfLabelsBuilt ; } ; /@} /@{ *
##  Set/Get flag whether to calculate title offset.
##  Default is true.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorCalculateTitleOffset ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  CalculateTitleOffset  to  << _arg ) ; if ( this -> CalculateTitleOffset != _arg ) { this -> CalculateTitleOffset = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorNumberOfLabelsBuiltCalculateTitleOffset ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << CalculateTitleOffset  of  << this -> CalculateTitleOffset ) ; return this -> CalculateTitleOffset ; } ; virtual void CalculateTitleOffsetOn ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawInnerGridlinesDrawGridpolysLogCalculateTitleOffset ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void CalculateTitleOffsetOff ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawInnerGridlinesDrawGridpolysLogCalculateTitleOffset ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get flag whether to calculate label offset.
##  Default is true.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorCalculateTitleOffsetCalculateLabelOffset ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  CalculateLabelOffset  to  << _arg ) ; if ( this -> CalculateLabelOffset != _arg ) { this -> CalculateLabelOffset = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorNumberOfLabelsBuiltCalculateTitleOffsetCalculateLabelOffset ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << CalculateLabelOffset  of  << this -> CalculateLabelOffset ) ; return this -> CalculateLabelOffset ; } ; virtual void CalculateLabelOffsetOn ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawInnerGridlinesDrawGridpolysLogCalculateTitleOffsetCalculateLabelOffset ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void CalculateLabelOffsetOff ( ) { this -> SetMinorTicksVisibleAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawInnerGridlinesDrawGridpolysLogCalculateTitleOffsetCalculateLabelOffset ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get the 2D mode
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorCalculateTitleOffsetCalculateLabelOffsetUse2DMode ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  Use2DMode  to  << _arg ) ; if ( this -> Use2DMode != _arg ) { this -> Use2DMode = _arg ; this -> Modified ( ) ; } } ; virtual int GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorNumberOfLabelsBuiltCalculateTitleOffsetCalculateLabelOffsetUse2DMode ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << Use2DMode  of  << this -> Use2DMode ) ; return this -> Use2DMode ; } ; /@} /@{ *
##  Set/Get the 2D mode the vertical offset for X title in 2D mode
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2D ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  VerticalOffsetXTitle2D  to  << _arg ) ; if ( this -> VerticalOffsetXTitle2D != _arg ) { this -> VerticalOffsetXTitle2D = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorNumberOfLabelsBuiltCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2D ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << VerticalOffsetXTitle2D  of  << this -> VerticalOffsetXTitle2D ) ; return this -> VerticalOffsetXTitle2D ; } ; /@} /@{ *
##  Set/Get the 2D mode the horizontal offset for Y title in 2D mode
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2DHorizontalOffsetYTitle2D ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  HorizontalOffsetYTitle2D  to  << _arg ) ; if ( this -> HorizontalOffsetYTitle2D != _arg ) { this -> HorizontalOffsetYTitle2D = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorNumberOfLabelsBuiltCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2DHorizontalOffsetYTitle2D ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << HorizontalOffsetYTitle2D  of  << this -> HorizontalOffsetYTitle2D ) ; return this -> HorizontalOffsetYTitle2D ; } ; /@} /@{ *
##  Set/Get whether title position must be saved in 2D mode
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2DHorizontalOffsetYTitle2DSaveTitlePosition ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  SaveTitlePosition  to  << _arg ) ; if ( this -> SaveTitlePosition != _arg ) { this -> SaveTitlePosition = _arg ; this -> Modified ( ) ; } } ; virtual int GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorNumberOfLabelsBuiltCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2DHorizontalOffsetYTitle2DSaveTitlePosition ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << SaveTitlePosition  of  << this -> SaveTitlePosition ) ; return this -> SaveTitlePosition ; } ; /@} /@{ *
##  Provide real vector for non aligned axis
##  virtual void SetAxisBaseForX ( double _arg1 , double _arg2 , double _arg3 ) { vtkDebugWithObjectMacro ( this , <<  setting  << AxisBaseForX  to ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; if ( ( this -> AxisBaseForX [ 0 ] != _arg1 ) || ( this -> AxisBaseForX [ 1 ] != _arg2 ) || ( this -> AxisBaseForX [ 2 ] != _arg3 ) ) { this -> AxisBaseForX [ 0 ] = _arg1 ; this -> AxisBaseForX [ 1 ] = _arg2 ; this -> AxisBaseForX [ 2 ] = _arg3 ; this -> Modified ( ) ; } } virtual void SetAxisBaseForX ( const double _arg [ 3 ] ) { this -> SetAxisBaseForX ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual double * GetAxisBaseForX ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << AxisBaseForX  pointer  << this -> AxisBaseForX ) ; return this -> AxisBaseForX ; } VTK_WRAPEXCLUDE virtual void GetAxisBaseForX ( double & _arg1 , double & _arg2 , double & _arg3 ) { _arg1 = this -> AxisBaseForX [ 0 ] ; _arg2 = this -> AxisBaseForX [ 1 ] ; _arg3 = this -> AxisBaseForX [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << AxisBaseForX  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetAxisBaseForX ( double _arg [ 3 ] ) { this -> GetAxisBaseForX ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; /@} /@{ *
##  Provide real vector for non aligned axis
##  virtual void SetAxisBaseForXAxisBaseForY ( double _arg1 , double _arg2 , double _arg3 ) { vtkDebugWithObjectMacro ( this , <<  setting  << AxisBaseForY  to ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; if ( ( this -> AxisBaseForY [ 0 ] != _arg1 ) || ( this -> AxisBaseForY [ 1 ] != _arg2 ) || ( this -> AxisBaseForY [ 2 ] != _arg3 ) ) { this -> AxisBaseForY [ 0 ] = _arg1 ; this -> AxisBaseForY [ 1 ] = _arg2 ; this -> AxisBaseForY [ 2 ] = _arg3 ; this -> Modified ( ) ; } } virtual void SetAxisBaseForXAxisBaseForY ( const double _arg [ 3 ] ) { this -> SetAxisBaseForXAxisBaseForY ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual double * GetAxisBaseForXAxisBaseForY ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << AxisBaseForY  pointer  << this -> AxisBaseForY ) ; return this -> AxisBaseForY ; } VTK_WRAPEXCLUDE virtual void GetAxisBaseForXAxisBaseForY ( double & _arg1 , double & _arg2 , double & _arg3 ) { _arg1 = this -> AxisBaseForY [ 0 ] ; _arg2 = this -> AxisBaseForY [ 1 ] ; _arg3 = this -> AxisBaseForY [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << AxisBaseForY  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetAxisBaseForXAxisBaseForY ( double _arg [ 3 ] ) { this -> GetAxisBaseForXAxisBaseForY ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; /@} /@{ *
##  Provide real vector for non aligned axis
##  virtual void SetAxisBaseForXAxisBaseForYAxisBaseForZ ( double _arg1 , double _arg2 , double _arg3 ) { vtkDebugWithObjectMacro ( this , <<  setting  << AxisBaseForZ  to ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; if ( ( this -> AxisBaseForZ [ 0 ] != _arg1 ) || ( this -> AxisBaseForZ [ 1 ] != _arg2 ) || ( this -> AxisBaseForZ [ 2 ] != _arg3 ) ) { this -> AxisBaseForZ [ 0 ] = _arg1 ; this -> AxisBaseForZ [ 1 ] = _arg2 ; this -> AxisBaseForZ [ 2 ] = _arg3 ; this -> Modified ( ) ; } } virtual void SetAxisBaseForXAxisBaseForYAxisBaseForZ ( const double _arg [ 3 ] ) { this -> SetAxisBaseForXAxisBaseForYAxisBaseForZ ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual double * GetAxisBaseForXAxisBaseForYAxisBaseForZ ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << AxisBaseForZ  pointer  << this -> AxisBaseForZ ) ; return this -> AxisBaseForZ ; } VTK_WRAPEXCLUDE virtual void GetAxisBaseForXAxisBaseForYAxisBaseForZ ( double & _arg1 , double & _arg2 , double & _arg3 ) { _arg1 = this -> AxisBaseForZ [ 0 ] ; _arg2 = this -> AxisBaseForZ [ 1 ] ; _arg3 = this -> AxisBaseForZ [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << AxisBaseForZ  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetAxisBaseForXAxisBaseForYAxisBaseForZ ( double _arg [ 3 ] ) { this -> GetAxisBaseForXAxisBaseForYAxisBaseForZ ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; /@} /@{ *
##  Notify the axes that is not part of a cube anymore
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2DHorizontalOffsetYTitle2DSaveTitlePositionAxisOnOrigin ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  AxisOnOrigin  to  << _arg ) ; if ( this -> AxisOnOrigin != _arg ) { this -> AxisOnOrigin = _arg ; this -> Modified ( ) ; } } ; virtual int GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorNumberOfLabelsBuiltCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2DHorizontalOffsetYTitle2DSaveTitlePositionAxisOnOrigin ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << AxisOnOrigin  of  << this -> AxisOnOrigin ) ; return this -> AxisOnOrigin ; } ; /@} /@{ *
##  Set/Get the offsets used to position texts.
##  virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2DHorizontalOffsetYTitle2DSaveTitlePositionAxisOnOriginLabelOffset ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  LabelOffset  to  << _arg ) ; if ( this -> LabelOffset != _arg ) { this -> LabelOffset = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorNumberOfLabelsBuiltCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2DHorizontalOffsetYTitle2DSaveTitlePositionAxisOnOriginLabelOffset ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << LabelOffset  of  << this -> LabelOffset ) ; return this -> LabelOffset ; } ; virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2DHorizontalOffsetYTitle2DSaveTitlePositionAxisOnOriginLabelOffsetTitleOffset ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  TitleOffset  to  << _arg ) ; if ( this -> TitleOffset != _arg ) { this -> TitleOffset = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorNumberOfLabelsBuiltCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2DHorizontalOffsetYTitle2DSaveTitlePositionAxisOnOriginLabelOffsetTitleOffset ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << TitleOffset  of  << this -> TitleOffset ) ; return this -> TitleOffset ; } ; virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2DHorizontalOffsetYTitle2DSaveTitlePositionAxisOnOriginLabelOffsetTitleOffsetExponentOffset ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  ExponentOffset  to  << _arg ) ; if ( this -> ExponentOffset != _arg ) { this -> ExponentOffset = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorNumberOfLabelsBuiltCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2DHorizontalOffsetYTitle2DSaveTitlePositionAxisOnOriginLabelOffsetTitleOffsetExponentOffset ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ExponentOffset  of  << this -> ExponentOffset ) ; return this -> ExponentOffset ; } ; virtual void SetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysLogMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2DHorizontalOffsetYTitle2DSaveTitlePositionAxisOnOriginLabelOffsetTitleOffsetExponentOffsetScreenSize ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  ScreenSize  to  << _arg ) ; if ( this -> ScreenSize != _arg ) { this -> ScreenSize = _arg ; this -> Modified ( ) ; } } ; virtual double GetUseTextActor3DMinorTicksVisibleMajorTickSizeMinorTickSizeTickLocationAxisVisibilityTickVisibilityLabelVisibilityTitleVisibilityExponentVisibilityLastMajorTickPointCorrectionTitleAlignLocationExponentLocationDrawGridlinesDrawGridlinesOnlyDrawGridlinesLocationDrawInnerGridlinesGridlineXLengthGridlineYLengthGridlineZLengthDrawGridpolysAxisTypeLogAxisPositionMinorStartDeltaMinorMinorRangeStartMajorRangeStartDeltaRangeMinorDeltaRangeMajorNumberOfLabelsBuiltCalculateTitleOffsetCalculateLabelOffsetUse2DModeVerticalOffsetXTitle2DHorizontalOffsetYTitle2DSaveTitlePositionAxisOnOriginLabelOffsetTitleOffsetExponentOffsetScreenSize ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ScreenSize  of  << this -> ScreenSize ) ; return this -> ScreenSize ; } ; /@} protected : vtkAxisActor ( ) ; ~ vtkAxisActor ( ) override ; char * Title ; char * Exponent ; double Range [ 2 ] ; double LastRange [ 2 ] ; char * LabelFormat ; int UseTextActor3D ; int NumberOfLabelsBuilt ; vtkTypeBool MinorTicksVisible ; int LastMinorTicksVisible ; *
##  The location of the ticks.
##  Inside: tick end toward positive direction of perpendicular axes.
##  Outside: tick end toward negative direction of perpendicular axes.
##  int TickLocation ; *
##  Hold the alignment property of the title related to the axis.
##  Possible Alignment: VTK_ALIGN_BOTTOM, VTK_ALIGN_TOP, VTK_ALIGN_POINT1, VTK_ALIGN_POINT2.
##  int TitleAlignLocation ; *
##  Hold the alignment property of the exponent coming from the label values.
##  Possible Alignment: VTK_ALIGN_BOTTOM, VTK_ALIGN_TOP, VTK_ALIGN_POINT1, VTK_ALIGN_POINT2.
##  int ExponentLocation ; vtkTypeBool DrawGridlines ; vtkTypeBool DrawGridlinesOnly ; int LastDrawGridlines ; int DrawGridlinesLocation ;  0: all | 1: closest | 2: farest int LastDrawGridlinesLocation ;  0: all | 1: closest | 2: farest double GridlineXLength ; double GridlineYLength ; double GridlineZLength ; vtkTypeBool DrawInnerGridlines ; int LastDrawInnerGridlines ; vtkTypeBool DrawGridpolys ; int LastDrawGridpolys ; vtkTypeBool AxisVisibility ; vtkTypeBool TickVisibility ; int LastTickVisibility ; vtkTypeBool LabelVisibility ; vtkTypeBool TitleVisibility ; bool ExponentVisibility ; bool LastMajorTickPointCorrection ; bool Log ; int AxisType ; int AxisPosition ;  coordinate system for axisAxtor, relative to world coordinates double AxisBaseForX [ 3 ] ; double AxisBaseForY [ 3 ] ; double AxisBaseForZ [ 3 ] ; private : vtkAxisActor ( const vtkAxisActor & ) = delete ; void operator = ( const vtkAxisActor & ) = delete ; void TransformBounds ( vtkViewport * , double bnds [ 6 ] ) ; void BuildLabels ( vtkViewport * , bool ) ; void BuildLabels2D ( vtkViewport * , bool ) ; void SetLabelPositions ( vtkViewport * , bool ) ; void SetLabelPositions2D ( vtkViewport * , bool ) ; *
##  Set orientation of the actor 2D (follower) to keep the axis orientation and stay on the right
##  size
##  void RotateActor2DFromAxisProjection ( vtkTextActor * pActor2D ) ; *
##  Init the geometry of the title. (no positioning or orientation)
##  void InitTitle ( ) ; *
##  Init the geometry of the common exponent of the labels values. (no positioning or orientation)
##  void InitExponent ( ) ; *
##  This method set the text and set the base position of the follower from the axis
##  The position will be modified in vtkAxisFollower::Render() sub-functions according to the
##  camera position
##  for convenience purpose.
##  void BuildTitle ( bool ) ; *
##  Build the actor to display the exponent in case it should appear next to the title or next to
##  p2 coordinate.
##  void BuildExponent ( bool force ) ; void BuildExponent2D ( vtkViewport * viewport , bool force ) ; void BuildTitle2D ( vtkViewport * viewport , bool ) ; void SetAxisPointsAndLines ( void ) ; bool BuildTickPoints ( double p1 [ 3 ] , double p2 [ 3 ] , bool force ) ;  Build major ticks for linear scale. void BuildMajorTicks ( double p1 [ 3 ] , double p2 [ 3 ] , double localCoordSys [ 3 ] [ 3 ] ) ;  Build major ticks for logarithmic scale. void BuildMajorTicksLog ( double p1 [ 3 ] , double p2 [ 3 ] , double localCoordSys [ 3 ] [ 3 ] ) ;  Build minor ticks for linear scale. void BuildMinorTicks ( double p1 [ 3 ] , double p2 [ 3 ] , double localCoordSys [ 3 ] [ 3 ] ) ;  Build minor ticks for logarithmic scale enabled void BuildMinorTicksLog ( double p1 [ 3 ] , double p2 [ 3 ] , double localCoordSys [ 3 ] [ 3 ] ) ; void BuildAxisGridLines ( double p1 [ 3 ] , double p2 [ 3 ] , double localCoordSys [ 3 ] [ 3 ] ) ; bool TickVisibilityChanged ( void ) ; vtkProperty * NewTitleProperty ( ) ; vtkProperty2D * NewTitleProperty2D ( ) ; vtkProperty * NewLabelProperty ( ) ; bool BoundsDisplayCoordinateChanged ( vtkViewport * viewport ) ; vtkCoordinate * Point1Coordinate ; vtkCoordinate * Point2Coordinate ; double MajorTickSize ; double MinorTickSize ;  For each axis (for the inner gridline generation) double MajorStart [ 3 ] ; double DeltaMajor [ 3 ] ; double MinorStart ; double DeltaMinor ;  For the ticks, w.r.t to the set range double MajorRangeStart ; double MinorRangeStart ; *
##  step between 2 minor ticks, in range value (values displayed on the axis)
##  double DeltaRangeMinor ; *
##  step between 2 major ticks, in range value (values displayed on the axis)
##  double DeltaRangeMajor ; int LastAxisPosition ; int LastAxisType ; int LastTickLocation ; double LastLabelStart ; vtkPoints * MinorTickPts ; vtkPoints * MajorTickPts ; vtkPoints * GridlinePts ; vtkPoints * InnerGridlinePts ; vtkPoints * GridpolyPts ; vtkVectorText * TitleVector ; vtkPolyDataMapper * TitleMapper ; vtkAxisFollower * TitleActor ; vtkTextActor * TitleActor2D ; vtkProp3DAxisFollower * TitleProp3D ; vtkTextActor3D * TitleActor3D ; vtkTextProperty * TitleTextProperty ; /@{ *
##  Mapper/Actor used to display a common exponent of the label values
##  vtkVectorText * ExponentVector ; vtkPolyDataMapper * ExponentMapper ; vtkAxisFollower * ExponentActor ; vtkTextActor * ExponentActor2D ; vtkProp3DAxisFollower * ExponentProp3D ; vtkTextActor3D * ExponentActor3D ; /@} vtkVectorText * * LabelVectors ; vtkPolyDataMapper * * LabelMappers ; vtkAxisFollower * * LabelActors ; vtkProp3DAxisFollower * * LabelProps3D ; vtkTextActor * * LabelActors2D ; vtkTextActor3D * * LabelActors3D ; vtkTextProperty * LabelTextProperty ;  Main line axis vtkPolyData * AxisLines ; vtkPolyDataMapper * AxisLinesMapper ; vtkActor * AxisLinesActor ;  Ticks of the axis vtkPolyData * AxisMajorTicks , * AxisMinorTicks ; vtkPolyDataMapper * AxisMajorTicksMapper , * AxisMinorTicksMapper ; vtkActor * AxisMajorTicksActor , * AxisMinorTicksActor ; vtkPolyData * Gridlines ; vtkPolyDataMapper * GridlinesMapper ; vtkActor * GridlinesActor ; vtkPolyData * InnerGridlines ; vtkPolyDataMapper * InnerGridlinesMapper ; vtkActor * InnerGridlinesActor ; vtkPolyData * Gridpolys ; vtkPolyDataMapper * GridpolysMapper ; vtkActor * GridpolysActor ; vtkCamera * Camera ; vtkTimeStamp BuildTime ; vtkTimeStamp BuildTickPointsTime ; vtkTimeStamp BoundsTime ; vtkTimeStamp LabelBuildTime ; vtkTimeStamp TitleTextTime ; vtkTimeStamp ExponentTextTime ; int AxisOnOrigin ; int AxisHasZeroLength ; vtkTypeBool CalculateTitleOffset ; vtkTypeBool CalculateLabelOffset ; *
##  Use xy-axis only when Use2DMode=1:
##  int Use2DMode ; *
##  Vertical offset in display coordinates for X axis title (used in 2D mode only)
##  Default: -40
##  double VerticalOffsetXTitle2D ; *
##  Vertical offset in display coordinates for X axis title (used in 2D mode only)
##  Default: -50
##  double HorizontalOffsetYTitle2D ; *
##  Save title position (used in 2D mode only):
##  val = 0 : no need to save position (doesn't stick actors in a position)
##  val = 1 : positions have to be saved during the next render pass
##  val = 2 : positions are saved; use them
##  int SaveTitlePosition ; *
##  Constant position for the title (used in 2D mode only)
##  double TitleConstantPosition [ 2 ] ; *
##  True if the 2D title has to be built, false otherwise
##  bool NeedBuild2D ; double LastMinDisplayCoordinate [ 3 ] ; double LastMaxDisplayCoordinate [ 3 ] ; double TickVector [ 3 ] ; /@{ *
##  Offsets used to position text.
##  double ScreenSize ; double LabelOffset ; double TitleOffset ; double ExponentOffset ; /@} } ;
## Error: token expected: ; but got: [identifier]!!!
