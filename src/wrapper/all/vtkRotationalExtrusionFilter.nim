## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkRotationalExtrusionFilter.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class   vtkRotationalExtrusionFilter
##  @brief   sweep polygonal data creating "skirt" from free edges and lines, and lines from vertices
##
##  vtkRotationalExtrusionFilter is a modeling filter. It takes polygonal
##  data as input and generates polygonal data on output. The input dataset
##  is swept around an axis to create new polygonal primitives. These
##  primitives form a "skirt" or swept surface. For example, sweeping a
##  line results in a cylindrical shell, and sweeping a circle creates a
##  torus.
##
##  There are a number of control parameters for this filter. You can
##  control whether the sweep of a 2D object (i.e., polygon or triangle
##  strip) is capped with the generating geometry via the "Capping" instance
##  variable. Also, you can control the angle of rotation, whether
##  translation along the axis is performed along with the rotation, and around
##  which axis this is done.
##  (Translation is useful for creating "springs".) You also can adjust
##  the radius of the generating geometry using the "DeltaRotation" instance
##  variable.
##
##  The skirt is generated by locating certain topological features. Free
##  edges (edges of polygons or triangle strips only used by one polygon or
##  triangle strips) generate surfaces. This is true also of lines or
##  polylines. Vertices generate lines.
##
##  This filter can be used to model axisymmetric objects like cylinders,
##  bottles, and wine glasses; or translational/rotational symmetric objects
##  like springs or corkscrews.
##
##  @warning
##  If the object sweeps 360 degrees, radius does not vary, and the object
##  does not translate, capping is not performed. This is because the cap
##  is unnecessary.
##
##  @warning
##  Some polygonal objects have no free edges (e.g., sphere). When swept,
##  this will result in two separate surfaces if capping is on, or no surface
##  if capping is off.
##
##  @sa
##  vtkLinearExtrusionFilter
##

import
  vtkFiltersModelingModule, vtkPolyDataAlgorithm

type
  vtkRotationalExtrusionFilter* {.importcpp: "vtkRotationalExtrusionFilter",
                                 header: "vtkRotationalExtrusionFilter.h", bycopy.} = object of vtkPolyDataAlgorithm
    vtkRotationalExtrusionFilter* {.importc: "vtkRotationalExtrusionFilter".}: VTK_NEWINSTANCE

  vtkRotationalExtrusionFilterSuperclass* = vtkPolyDataAlgorithm

proc IsTypeOf*(`type`: cstring): vtkTypeBool {.
    importcpp: "vtkRotationalExtrusionFilter::IsTypeOf(@)",
    header: "vtkRotationalExtrusionFilter.h".}
proc IsA*(this: var vtkRotationalExtrusionFilter; `type`: cstring): vtkTypeBool {.
    importcpp: "IsA", header: "vtkRotationalExtrusionFilter.h".}
proc SafeDownCast*(o: ptr vtkObjectBase): ptr vtkRotationalExtrusionFilter {.
    importcpp: "vtkRotationalExtrusionFilter::SafeDownCast(@)",
    header: "vtkRotationalExtrusionFilter.h".}
## !!!Ignored construct:  * NewInstance ( ) const { return vtkRotationalExtrusionFilter :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkPolyDataAlgorithm :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkRotationalExtrusionFilter :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkRotationalExtrusionFilter :: New ( ) ; } public : ;
## Error: identifier expected, but got: *!!!

proc PrintSelf*(this: var vtkRotationalExtrusionFilter; os: var ostream;
               indent: vtkIndent) {.importcpp: "PrintSelf",
                                  header: "vtkRotationalExtrusionFilter.h".}
proc New*(): ptr vtkRotationalExtrusionFilter {.
    importcpp: "vtkRotationalExtrusionFilter::New(@)",
    header: "vtkRotationalExtrusionFilter.h".}
proc SetResolution*(this: var vtkRotationalExtrusionFilter; _arg: cint) {.
    importcpp: "SetResolution", header: "vtkRotationalExtrusionFilter.h".}
proc GetResolutionMinValue*(this: var vtkRotationalExtrusionFilter): cint {.
    importcpp: "GetResolutionMinValue", header: "vtkRotationalExtrusionFilter.h".}
proc GetResolutionMaxValue*(this: var vtkRotationalExtrusionFilter): cint {.
    importcpp: "GetResolutionMaxValue", header: "vtkRotationalExtrusionFilter.h".}
## !!!Ignored construct:  virtual int GetResolution ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << Resolution  of  << this -> Resolution ) ; return this -> Resolution ; } ;
## Error: expected ';'!!!

proc SetCapping*(this: var vtkRotationalExtrusionFilter; _arg: vtkTypeBool) {.
    importcpp: "SetCapping", header: "vtkRotationalExtrusionFilter.h".}
## !!!Ignored construct:  virtual vtkTypeBool GetResolutionCapping ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << Capping  of  << this -> Capping ) ; return this -> Capping ; } ;
## Error: expected ';'!!!

proc CappingOn*(this: var vtkRotationalExtrusionFilter) {.importcpp: "CappingOn",
    header: "vtkRotationalExtrusionFilter.h".}
proc CappingOff*(this: var vtkRotationalExtrusionFilter) {.importcpp: "CappingOff",
    header: "vtkRotationalExtrusionFilter.h".}
  ## /@}
  ## /@{
  ## *
  ##  Set/Get angle of rotation.
  ##
proc SetCappingAngle*(this: var vtkRotationalExtrusionFilter; _arg: cdouble) {.
    importcpp: "SetCappingAngle", header: "vtkRotationalExtrusionFilter.h".}
## !!!Ignored construct:  virtual double GetResolutionCappingAngle ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << Angle  of  << this -> Angle ) ; return this -> Angle ; } ;
## Error: expected ';'!!!

proc SetCappingAngleTranslation*(this: var vtkRotationalExtrusionFilter;
                                _arg: cdouble) {.
    importcpp: "SetCappingAngleTranslation",
    header: "vtkRotationalExtrusionFilter.h".}
## !!!Ignored construct:  virtual double GetResolutionCappingAngleTranslation ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << Translation  of  << this -> Translation ) ; return this -> Translation ; } ;
## Error: expected ';'!!!

proc SetCappingAngleTranslationDeltaRadius*(
    this: var vtkRotationalExtrusionFilter; _arg: cdouble) {.
    importcpp: "SetCappingAngleTranslationDeltaRadius",
    header: "vtkRotationalExtrusionFilter.h".}
## !!!Ignored construct:  virtual double GetResolutionCappingAngleTranslationDeltaRadius ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << DeltaRadius  of  << this -> DeltaRadius ) ; return this -> DeltaRadius ; } ;
## Error: expected ';'!!!

proc SetRotationAxis*(this: var vtkRotationalExtrusionFilter; _arg1: cdouble;
                     _arg2: cdouble; _arg3: cdouble) {.importcpp: "SetRotationAxis",
    header: "vtkRotationalExtrusionFilter.h".}
proc SetRotationAxis*(this: var vtkRotationalExtrusionFilter;
                     _arg: array[3, cdouble]) {.importcpp: "SetRotationAxis",
    header: "vtkRotationalExtrusionFilter.h".}
## !!!Ignored construct:  virtual double * GetRotationAxis ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << RotationAxis  pointer  << this -> RotationAxis ) ; return this -> RotationAxis ; } VTK_WRAPEXCLUDE virtual void GetRotationAxis ( double & _arg1 , double & _arg2 , double & _arg3 ) { _arg1 = this -> RotationAxis [ 0 ] ; _arg2 = this -> RotationAxis [ 1 ] ; _arg3 = this -> RotationAxis [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << RotationAxis  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetRotationAxis ( double _arg [ 3 ] ) { this -> GetRotationAxis ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ;
## Error: expected ';'!!!
