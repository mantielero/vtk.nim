## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkVPICReader.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class   vtkVPICReader
##  @brief   class for reading VPIC data files
##
##  vtkDataReader is a helper superclass that reads the vtk data file header,
##  dataset type, and attribute data (point and cell attributes such as
##  scalars, vectors, normals, etc.) from a vtk data file.  See text for
##  the format of the various vtk file types.
##
##  @sa
##  vtkPolyDataReader vtkStructuredPointsReader vtkStructuredGridReader
##  vtkUnstructuredGridReader vtkRectilinearGridReader
##

## !!!Ignored construct:  # vtkVPICReader_h [NewLine] # vtkVPICReader_h [NewLine] # vtkIOVPICModule.h  For export macro # vtkImageAlgorithm.h [NewLine] class vtkCallbackCommand ;
## Error: token expected: ; but got: [identifier]!!!

discard "forward decl of vtkDataArraySelection"
discard "forward decl of vtkFloatArray"
discard "forward decl of vtkStdString"
discard "forward decl of vtkMultiProcessController"
discard "forward decl of vtkInformation"
discard "forward decl of VPICDataSet"
discard "forward decl of GridExchange"
## !!!Ignored construct:  class VTKIOVPIC_EXPORT vtkVPICReader : public vtkImageAlgorithm { public : static vtkVPICReader * New ( ) ; protected : const char * GetClassNameInternal ( ) const override { return thisClass ; } public : typedef vtkImageAlgorithm Superclass ; static vtkTypeBool IsTypeOf ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 1 ; } return vtkImageAlgorithm :: IsTypeOf ( type ) ; } vtkTypeBool IsA ( const char * type ) override { return this -> vtkVPICReader :: IsTypeOf ( type ) ; } static vtkVPICReader * SafeDownCast ( vtkObjectBase * o ) { if ( o && o -> IsA ( thisClass ) ) { return static_cast < vtkVPICReader * > ( o ) ; } return nullptr ; } VTK_NEWINSTANCE vtkVPICReader * NewInstance ( ) const { return vtkVPICReader :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkImageAlgorithm :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkVPICReader :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkVPICReader :: New ( ) ; } public : ; void PrintSelf ( ostream & os , vtkIndent indent ) override ; /@{ *
##  Specify file name of VPIC data file to read.
##  virtual void SetFileName ( VTK_FILEPATH const char * _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << FileName  to  << ( _arg ? _arg : (null) ) ) ; if ( this -> FileName == nullptr && _arg == nullptr ) { return ; } if ( this -> FileName && _arg && ( ! strcmp ( this -> FileName , _arg ) ) ) { return ; } delete [ ] this -> FileName ; if ( _arg ) { size_t n = strlen ( _arg ) + 1 ; char * cp1 = new char [ n ] ; const char * cp2 = ( _arg ) ; this -> FileName = cp1 ; do { * cp1 ++ = * cp2 ++ ; } while ( -- n ) ; } else { this -> FileName = nullptr ; } this -> Modified ( ) ; } ; virtual VTK_FILEPATH VTK_FUTURE_CONST char * GetFileName ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << FileName  of  << ( this -> FileName ? this -> FileName : (null) ) ) ; return this -> FileName ; } ; /@} /@{ *
##  Set the stride in each dimension
##  virtual void SetStride ( int _arg1 , int _arg2 , int _arg3 ) { vtkDebugWithObjectMacro ( this , <<  setting  << Stride  to ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; if ( ( this -> Stride [ 0 ] != _arg1 ) || ( this -> Stride [ 1 ] != _arg2 ) || ( this -> Stride [ 2 ] != _arg3 ) ) { this -> Stride [ 0 ] = _arg1 ; this -> Stride [ 1 ] = _arg2 ; this -> Stride [ 2 ] = _arg3 ; this -> Modified ( ) ; } } virtual void SetStride ( const int _arg [ 3 ] ) { this -> SetStride ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; virtual int * GetStride ( ) VTK_SIZEHINT ( 3 ) { vtkDebugWithObjectMacro ( this , <<  returning  << Stride  pointer  << this -> Stride ) ; return this -> Stride ; } VTK_WRAPEXCLUDE virtual void GetStride ( int & _arg1 , int & _arg2 , int & _arg3 ) { _arg1 = this -> Stride [ 0 ] ; _arg2 = this -> Stride [ 1 ] ; _arg3 = this -> Stride [ 2 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << Stride  = ( << _arg1 << , << _arg2 << , << _arg3 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetStride ( int _arg [ 3 ] ) { this -> GetStride ( _arg [ 0 ] , _arg [ 1 ] , _arg [ 2 ] ) ; } ; /@} /@{ *
##  Set the simulation file decomposition in each dimension
##  virtual void SetXExtent ( int _arg1 , int _arg2 ) { vtkDebugWithObjectMacro ( this , <<  setting  << XExtent  to ( << _arg1 << , << _arg2 << ) ) ; if ( ( this -> XExtent [ 0 ] != _arg1 ) || ( this -> XExtent [ 1 ] != _arg2 ) ) { this -> XExtent [ 0 ] = _arg1 ; this -> XExtent [ 1 ] = _arg2 ; this -> Modified ( ) ; } } void SetXExtent ( const int _arg [ 2 ] ) { this -> SetXExtent ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; virtual void SetXExtentYExtent ( int _arg1 , int _arg2 ) { vtkDebugWithObjectMacro ( this , <<  setting  << YExtent  to ( << _arg1 << , << _arg2 << ) ) ; if ( ( this -> YExtent [ 0 ] != _arg1 ) || ( this -> YExtent [ 1 ] != _arg2 ) ) { this -> YExtent [ 0 ] = _arg1 ; this -> YExtent [ 1 ] = _arg2 ; this -> Modified ( ) ; } } void SetXExtentYExtent ( const int _arg [ 2 ] ) { this -> SetXExtentYExtent ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; virtual void SetXExtentYExtentZExtent ( int _arg1 , int _arg2 ) { vtkDebugWithObjectMacro ( this , <<  setting  << ZExtent  to ( << _arg1 << , << _arg2 << ) ) ; if ( ( this -> ZExtent [ 0 ] != _arg1 ) || ( this -> ZExtent [ 1 ] != _arg2 ) ) { this -> ZExtent [ 0 ] = _arg1 ; this -> ZExtent [ 1 ] = _arg2 ; this -> Modified ( ) ; } } void SetXExtentYExtentZExtent ( const int _arg [ 2 ] ) { this -> SetXExtentYExtentZExtent ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; /@}  Get the full layout size in files for setting the range in GUI virtual int * GetXLayout ( ) VTK_SIZEHINT ( 2 ) { vtkDebugWithObjectMacro ( this , <<  returning  << XLayout  pointer  << this -> XLayout ) ; return this -> XLayout ; } VTK_WRAPEXCLUDE virtual void GetXLayout ( int & _arg1 , int & _arg2 ) { _arg1 = this -> XLayout [ 0 ] ; _arg2 = this -> XLayout [ 1 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << XLayout  = ( << _arg1 << , << _arg2 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetXLayout ( int _arg [ 2 ] ) { this -> GetXLayout ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; virtual int * GetXLayoutYLayout ( ) VTK_SIZEHINT ( 2 ) { vtkDebugWithObjectMacro ( this , <<  returning  << YLayout  pointer  << this -> YLayout ) ; return this -> YLayout ; } VTK_WRAPEXCLUDE virtual void GetXLayoutYLayout ( int & _arg1 , int & _arg2 ) { _arg1 = this -> YLayout [ 0 ] ; _arg2 = this -> YLayout [ 1 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << YLayout  = ( << _arg1 << , << _arg2 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetXLayoutYLayout ( int _arg [ 2 ] ) { this -> GetXLayoutYLayout ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; virtual int * GetXLayoutYLayoutZLayout ( ) VTK_SIZEHINT ( 2 ) { vtkDebugWithObjectMacro ( this , <<  returning  << ZLayout  pointer  << this -> ZLayout ) ; return this -> ZLayout ; } VTK_WRAPEXCLUDE virtual void GetXLayoutYLayoutZLayout ( int & _arg1 , int & _arg2 ) { _arg1 = this -> ZLayout [ 0 ] ; _arg2 = this -> ZLayout [ 1 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << ZLayout  = ( << _arg1 << , << _arg2 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetXLayoutYLayoutZLayout ( int _arg [ 2 ] ) { this -> GetXLayoutYLayoutZLayout ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; /@{ *
##  Get the reader's output
##  vtkImageData * GetOutput ( ) ; vtkImageData * GetOutput ( int index ) ; /@} /@{ *
##  The following methods allow selective reading of solutions fields.
##  By default, ALL data fields on the nodes are read, but this can
##  be modified.
##  int GetNumberOfPointArrays ( ) ; const char * GetPointArrayName ( int index ) ; int GetPointArrayStatus ( const char * name ) ; void SetPointArrayStatus ( const char * name , int status ) ; void DisableAllPointArrays ( ) ; void EnableAllPointArrays ( ) ; /@} protected : vtkVPICReader ( ) ; ~ vtkVPICReader ( ) override ; char * FileName ;  First field part file giving path int Rank ;  Number of this processor int TotalRank ;  Number of processors int UsedRank ;  Number of processors used in display VPICDataSet * vpicData ;  Data structure controlling access GridExchange * exchanger ;  Exchange ghost cells between procs vtkIdType NumberOfNodes ;  Number of points in grid vtkIdType NumberOfCells ;  Number of cells in grid vtkIdType NumberOfTuples ;  Number of tuples in sub extent int WholeExtent [ 6 ] ;  Problem image extent int SubExtent [ 6 ] ;  Processor problem extent int Dimension [ 3 ] ;  Size of image int SubDimension [ 3 ] ;  Size of subextent of image int XLayout [ 2 ] ;  Extent in complete files int YLayout [ 2 ] ;  Extent in complete files int ZLayout [ 2 ] ;  Extent in complete files int NumberOfVariables ;  Number of variables to display vtkStdString * VariableName ;  Names of each variable int * VariableStruct ;  Scalar, vector or tensor int NumberOfTimeSteps ;  Temporal domain double * TimeSteps ;  Times available for request int CurrentTimeStep ;  Time currently displayed int Stride [ 3 ] ;  Stride over actual data int XExtent [ 2 ] ;  Subview extent in files int YExtent [ 2 ] ;  Subview extent in files int ZExtent [ 2 ] ;  Subview extent in files vtkFloatArray * * data ;  Actual data arrays int * dataLoaded ;  Data is loaded for current time int Start [ 3 ] ;  Start offset for processor w ghosts int GhostDimension [ 3 ] ;  Dimension including ghosts on proc int NumberOfGhostTuples ;  Total ghost cells per component int ghostLevel0 ;  Left plane number of ghosts int ghostLevel1 ;  Right plane number of ghosts  Controls initializing and querrying MPI void SetMPIController ( vtkMultiProcessController * ) ; vtkMultiProcessController * MPIController ;  Selected field of interest vtkDataArraySelection * PointDataArraySelection ;  Observer to modify this object when array selections are modified vtkCallbackCommand * SelectionObserver ; int RequestData ( vtkInformation * , vtkInformationVector * * , vtkInformationVector * ) override ; int RequestInformation ( vtkInformation * , vtkInformationVector * * inVector , vtkInformationVector * ) override ; void LoadVariableData ( int var , int timeStep ) ; void LoadComponent ( float * varData , float * block , int comp , int numberOfComponents ) ; static void SelectionCallback ( vtkObject * caller , unsigned long eid , void * clientdata , void * calldata ) ; static void EventCallback ( vtkObject * caller , unsigned long eid , void * clientdata , void * calldata ) ; private : vtkVPICReader ( const vtkVPICReader & ) = delete ; void operator = ( const vtkVPICReader & ) = delete ; } ;
## Error: token expected: ; but got: [identifier]!!!
