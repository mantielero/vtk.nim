## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkAnnotatedCubeActor.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class   vtkAnnotatedCubeActor
##  @brief   a 3D cube with face labels
##
##  vtkAnnotatedCubeActor is a hybrid 3D actor used to represent an anatomical
##  orientation marker in a scene.  The class consists of a 3D unit cube centered
##  on the origin with each face labelled in correspondence to a particular
##  coordinate direction.  For example, with Cartesian directions, the user
##  defined text labels could be: +X, -X, +Y, -Y, +Z, -Z, while for anatomical
##  directions: A, P, L, R, S, I.  Text is automatically centered on each cube
##  face and is not restriceted to single characters. In addition to or in
##  replace of a solid text label representation, the outline edges of the labels
##  can be displayed.  The individual properties of the cube, face labels
##  and text outlines can be manipulated as can their visibility.
##
##  @warning
##  vtkAnnotatedCubeActor is primarily intended for use with
##  vtkOrientationMarkerWidget. The cube face text is generated by vtkVectorText
##  and therefore the font attributes are restricted.
##
##  @sa
##  vtkAxesActor vtkOrientationMarkerWidget vtkVectorText
##

## !!!Ignored construct:  # vtkAnnotatedCubeActor_h [NewLine] # vtkAnnotatedCubeActor_h [NewLine] # vtkProp3D.h [NewLine] # vtkRenderingAnnotationModule.h  For export macro [NewLine] class vtkActor ;
## Error: token expected: ; but got: [identifier]!!!

discard "forward decl of vtkAppendPolyData"
discard "forward decl of vtkAssembly"
discard "forward decl of vtkCubeSource"
discard "forward decl of vtkFeatureEdges"
discard "forward decl of vtkPropCollection"
discard "forward decl of vtkProperty"
discard "forward decl of vtkRenderer"
discard "forward decl of vtkTransform"
discard "forward decl of vtkTransformFilter"
discard "forward decl of vtkVectorText"
## !!!Ignored construct:  class VTKRENDERINGANNOTATION_EXPORT vtkAnnotatedCubeActor : public vtkProp3D { public : static vtkAnnotatedCubeActor * New ( ) ; protected : const char * GetClassNameInternal ( ) const override { return thisClass ; } public : typedef vtkProp3D Superclass ; static vtkTypeBool IsTypeOf ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 1 ; } return vtkProp3D :: IsTypeOf ( type ) ; } vtkTypeBool IsA ( const char * type ) override { return this -> vtkAnnotatedCubeActor :: IsTypeOf ( type ) ; } static vtkAnnotatedCubeActor * SafeDownCast ( vtkObjectBase * o ) { if ( o && o -> IsA ( thisClass ) ) { return static_cast < vtkAnnotatedCubeActor * > ( o ) ; } return nullptr ; } VTK_NEWINSTANCE vtkAnnotatedCubeActor * NewInstance ( ) const { return vtkAnnotatedCubeActor :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkProp3D :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkAnnotatedCubeActor :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkAnnotatedCubeActor :: New ( ) ; } public : ; void PrintSelf ( ostream & os , vtkIndent indent ) override ; *
##  For some exporters and other other operations we must be
##  able to collect all the actors or volumes. These methods
##  are used in that process.
##  void GetActors ( vtkPropCollection * ) override ; /@{ *
##  Support the standard render methods.
##  int RenderOpaqueGeometry ( vtkViewport * viewport ) override ; int RenderTranslucentPolygonalGeometry ( vtkViewport * viewport ) override ; /@} *
##  Does this prop have some translucent polygonal geometry?
##  vtkTypeBool HasTranslucentPolygonalGeometry ( ) override ; *
##  Shallow copy of an axes actor. Overloads the virtual vtkProp method.
##  void ShallowCopy ( vtkProp * prop ) override ; *
##  Release any graphics resources that are being consumed by this actor.
##  The parameter window could be used to determine which graphic
##  resources to release.
##  void ReleaseGraphicsResources ( vtkWindow * ) override ; /@{ *
##  Get the bounds for this Actor as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax). (The
##  method GetBounds(double bounds[6]) is available from the superclass.)
##  void GetBounds ( double bounds [ 6 ] ) ; double * GetBounds ( ) VTK_SIZEHINT ( 6 ) override ; /@} *
##  Get the actors mtime plus consider its properties and texture if set.
##  vtkMTimeType GetMTime ( ) override ; /@{ *
##  Set/Get the scale factor for the face text
##  void SetFaceTextScale ( double ) ; virtual double GetFaceTextScale ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << FaceTextScale  of  << this -> FaceTextScale ) ; return this -> FaceTextScale ; } ; /@} /@{ *
##  Get the individual face text properties.
##  vtkProperty * GetXPlusFaceProperty ( ) ; vtkProperty * GetXMinusFaceProperty ( ) ; vtkProperty * GetYPlusFaceProperty ( ) ; vtkProperty * GetYMinusFaceProperty ( ) ; vtkProperty * GetZPlusFaceProperty ( ) ; vtkProperty * GetZMinusFaceProperty ( ) ; /@} *
##  Get the cube properties.
##  vtkProperty * GetCubeProperty ( ) ; *
##  Get the text edges properties.
##  vtkProperty * GetTextEdgesProperty ( ) ; /@{ *
##  Set/get the face text.
##  virtual void SetXPlusFaceText ( const char * _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << XPlusFaceText  to  << ( _arg ? _arg : (null) ) ) ; if ( this -> XPlusFaceText == nullptr && _arg == nullptr ) { return ; } if ( this -> XPlusFaceText && _arg && ( ! strcmp ( this -> XPlusFaceText , _arg ) ) ) { return ; } delete [ ] this -> XPlusFaceText ; if ( _arg ) { size_t n = strlen ( _arg ) + 1 ; char * cp1 = new char [ n ] ; const char * cp2 = ( _arg ) ; this -> XPlusFaceText = cp1 ; do { * cp1 ++ = * cp2 ++ ; } while ( -- n ) ; } else { this -> XPlusFaceText = nullptr ; } this -> Modified ( ) ; } ; virtual char * GetXPlusFaceText ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << XPlusFaceText  of  << ( this -> XPlusFaceText ? this -> XPlusFaceText : (null) ) ) ; return this -> XPlusFaceText ; } ; virtual void SetXPlusFaceTextXMinusFaceText ( const char * _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << XMinusFaceText  to  << ( _arg ? _arg : (null) ) ) ; if ( this -> XMinusFaceText == nullptr && _arg == nullptr ) { return ; } if ( this -> XMinusFaceText && _arg && ( ! strcmp ( this -> XMinusFaceText , _arg ) ) ) { return ; } delete [ ] this -> XMinusFaceText ; if ( _arg ) { size_t n = strlen ( _arg ) + 1 ; char * cp1 = new char [ n ] ; const char * cp2 = ( _arg ) ; this -> XMinusFaceText = cp1 ; do { * cp1 ++ = * cp2 ++ ; } while ( -- n ) ; } else { this -> XMinusFaceText = nullptr ; } this -> Modified ( ) ; } ; virtual char * GetXPlusFaceTextXMinusFaceText ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << XMinusFaceText  of  << ( this -> XMinusFaceText ? this -> XMinusFaceText : (null) ) ) ; return this -> XMinusFaceText ; } ; virtual void SetXPlusFaceTextXMinusFaceTextYPlusFaceText ( const char * _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << YPlusFaceText  to  << ( _arg ? _arg : (null) ) ) ; if ( this -> YPlusFaceText == nullptr && _arg == nullptr ) { return ; } if ( this -> YPlusFaceText && _arg && ( ! strcmp ( this -> YPlusFaceText , _arg ) ) ) { return ; } delete [ ] this -> YPlusFaceText ; if ( _arg ) { size_t n = strlen ( _arg ) + 1 ; char * cp1 = new char [ n ] ; const char * cp2 = ( _arg ) ; this -> YPlusFaceText = cp1 ; do { * cp1 ++ = * cp2 ++ ; } while ( -- n ) ; } else { this -> YPlusFaceText = nullptr ; } this -> Modified ( ) ; } ; virtual char * GetXPlusFaceTextXMinusFaceTextYPlusFaceText ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << YPlusFaceText  of  << ( this -> YPlusFaceText ? this -> YPlusFaceText : (null) ) ) ; return this -> YPlusFaceText ; } ; virtual void SetXPlusFaceTextXMinusFaceTextYPlusFaceTextYMinusFaceText ( const char * _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << YMinusFaceText  to  << ( _arg ? _arg : (null) ) ) ; if ( this -> YMinusFaceText == nullptr && _arg == nullptr ) { return ; } if ( this -> YMinusFaceText && _arg && ( ! strcmp ( this -> YMinusFaceText , _arg ) ) ) { return ; } delete [ ] this -> YMinusFaceText ; if ( _arg ) { size_t n = strlen ( _arg ) + 1 ; char * cp1 = new char [ n ] ; const char * cp2 = ( _arg ) ; this -> YMinusFaceText = cp1 ; do { * cp1 ++ = * cp2 ++ ; } while ( -- n ) ; } else { this -> YMinusFaceText = nullptr ; } this -> Modified ( ) ; } ; virtual char * GetXPlusFaceTextXMinusFaceTextYPlusFaceTextYMinusFaceText ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << YMinusFaceText  of  << ( this -> YMinusFaceText ? this -> YMinusFaceText : (null) ) ) ; return this -> YMinusFaceText ; } ; virtual void SetXPlusFaceTextXMinusFaceTextYPlusFaceTextYMinusFaceTextZPlusFaceText ( const char * _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << ZPlusFaceText  to  << ( _arg ? _arg : (null) ) ) ; if ( this -> ZPlusFaceText == nullptr && _arg == nullptr ) { return ; } if ( this -> ZPlusFaceText && _arg && ( ! strcmp ( this -> ZPlusFaceText , _arg ) ) ) { return ; } delete [ ] this -> ZPlusFaceText ; if ( _arg ) { size_t n = strlen ( _arg ) + 1 ; char * cp1 = new char [ n ] ; const char * cp2 = ( _arg ) ; this -> ZPlusFaceText = cp1 ; do { * cp1 ++ = * cp2 ++ ; } while ( -- n ) ; } else { this -> ZPlusFaceText = nullptr ; } this -> Modified ( ) ; } ; virtual char * GetXPlusFaceTextXMinusFaceTextYPlusFaceTextYMinusFaceTextZPlusFaceText ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << ZPlusFaceText  of  << ( this -> ZPlusFaceText ? this -> ZPlusFaceText : (null) ) ) ; return this -> ZPlusFaceText ; } ; virtual void SetXPlusFaceTextXMinusFaceTextYPlusFaceTextYMinusFaceTextZPlusFaceTextZMinusFaceText ( const char * _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << ZMinusFaceText  to  << ( _arg ? _arg : (null) ) ) ; if ( this -> ZMinusFaceText == nullptr && _arg == nullptr ) { return ; } if ( this -> ZMinusFaceText && _arg && ( ! strcmp ( this -> ZMinusFaceText , _arg ) ) ) { return ; } delete [ ] this -> ZMinusFaceText ; if ( _arg ) { size_t n = strlen ( _arg ) + 1 ; char * cp1 = new char [ n ] ; const char * cp2 = ( _arg ) ; this -> ZMinusFaceText = cp1 ; do { * cp1 ++ = * cp2 ++ ; } while ( -- n ) ; } else { this -> ZMinusFaceText = nullptr ; } this -> Modified ( ) ; } ; virtual char * GetXPlusFaceTextXMinusFaceTextYPlusFaceTextYMinusFaceTextZPlusFaceTextZMinusFaceText ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << ZMinusFaceText  of  << ( this -> ZMinusFaceText ? this -> ZMinusFaceText : (null) ) ) ; return this -> ZMinusFaceText ; } ; /@} /@{ *
##  Enable/disable drawing the vector text edges.
##  void SetTextEdgesVisibility ( int ) ; int GetTextEdgesVisibility ( ) ; /@} /@{ *
##  Enable/disable drawing the cube.
##  void SetCubeVisibility ( int ) ; int GetCubeVisibility ( ) ; /@} /@{ *
##  Enable/disable drawing the vector text.
##  void SetFaceTextVisibility ( int ) ; int GetFaceTextVisibility ( ) ; /@} /@{ *
##  Augment individual face text orientations.
##  virtual void SetXFaceTextRotation ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  XFaceTextRotation  to  << _arg ) ; if ( this -> XFaceTextRotation != _arg ) { this -> XFaceTextRotation = _arg ; this -> Modified ( ) ; } } ; virtual double GetFaceTextScaleXFaceTextRotation ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << XFaceTextRotation  of  << this -> XFaceTextRotation ) ; return this -> XFaceTextRotation ; } ; virtual void SetXFaceTextRotationYFaceTextRotation ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  YFaceTextRotation  to  << _arg ) ; if ( this -> YFaceTextRotation != _arg ) { this -> YFaceTextRotation = _arg ; this -> Modified ( ) ; } } ; virtual double GetFaceTextScaleXFaceTextRotationYFaceTextRotation ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << YFaceTextRotation  of  << this -> YFaceTextRotation ) ; return this -> YFaceTextRotation ; } ; virtual void SetXFaceTextRotationYFaceTextRotationZFaceTextRotation ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  ZFaceTextRotation  to  << _arg ) ; if ( this -> ZFaceTextRotation != _arg ) { this -> ZFaceTextRotation = _arg ; this -> Modified ( ) ; } } ; virtual double GetFaceTextScaleXFaceTextRotationYFaceTextRotationZFaceTextRotation ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ZFaceTextRotation  of  << this -> ZFaceTextRotation ) ; return this -> ZFaceTextRotation ; } ; /@} *
##  Get the assembly so that user supplied transforms can be applied
##  vtkAssembly * GetAssembly ( ) { return this -> Assembly ; } protected : vtkAnnotatedCubeActor ( ) ; ~ vtkAnnotatedCubeActor ( ) override ; vtkCubeSource * CubeSource ; vtkActor * CubeActor ; vtkAppendPolyData * AppendTextEdges ; vtkFeatureEdges * ExtractTextEdges ; vtkActor * TextEdgesActor ; void UpdateProps ( ) ; char * XPlusFaceText ; char * XMinusFaceText ; char * YPlusFaceText ; char * YMinusFaceText ; char * ZPlusFaceText ; char * ZMinusFaceText ; double FaceTextScale ; double XFaceTextRotation ; double YFaceTextRotation ; double ZFaceTextRotation ; vtkVectorText * XPlusFaceVectorText ; vtkVectorText * XMinusFaceVectorText ; vtkVectorText * YPlusFaceVectorText ; vtkVectorText * YMinusFaceVectorText ; vtkVectorText * ZPlusFaceVectorText ; vtkVectorText * ZMinusFaceVectorText ; vtkActor * XPlusFaceActor ; vtkActor * XMinusFaceActor ; vtkActor * YPlusFaceActor ; vtkActor * YMinusFaceActor ; vtkActor * ZPlusFaceActor ; vtkActor * ZMinusFaceActor ; vtkTransformFilter * InternalTransformFilter ; vtkTransform * InternalTransform ; vtkAssembly * Assembly ; private : vtkAnnotatedCubeActor ( const vtkAnnotatedCubeActor & ) = delete ; void operator = ( const vtkAnnotatedCubeActor & ) = delete ; } ;
## Error: token expected: ; but got: [identifier]!!!
