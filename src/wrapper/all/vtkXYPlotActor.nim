## =========================================================================
##
##   Program:   Visualization Toolkit
##   Module:    vtkXYPlotActor.h
##
##   Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
##   All rights reserved.
##   See Copyright.txt or http://www.kitware.com/Copyright.htm for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notice for more information.
##
## =========================================================================
## *
##  @class   vtkXYPlotActor
##  @brief   generate an x-y plot from input dataset(s) or field data
##
##  vtkXYPlotActor creates an x-y plot of data from one or more input data
##  sets or field data. The class plots dataset scalar values (y-axis) against
##  the points (x-axis). The x-axis values are generated by taking the point
##  ids, computing a cumulative arc length, or a normalized arc length. More
##  than one input data set can be specified to generate multiple plots.
##  Alternatively, if field data is supplied as input, the class plots one
##  component against another. (The user must specify which component to use
##  as the x-axis and which for the y-axis.)
##
##  To use this class to plot dataset(s), you must specify one or more
##  input datasets containing scalar and point data.  You'll probably also
##  want to invoke a method to control how the point coordinates are converted
##  into x values (by default point ids are used).
##
##  To use this class to plot field data, you must specify one or more input
##  data objects with its associated field data. You'll also want to specify
##  which component to use as the x-axis and which to use as the y-axis.
##  Note that when plotting field data, the x and y values are used directly
##  (i.e., there are no options to normalize the components).
##
##  Once you've set up the plot, you'll want to position it.  The
##  PositionCoordinate defines the lower-left location of the x-y plot
##  (specified in normalized viewport coordinates) and the Position2Coordinate
##  define the upper-right corner. (Note: the Position2Coordinate is relative
##  to PositionCoordinate, so you can move the vtkXYPlotActor around the
##  viewport by setting just the PositionCoordinate.) The combination of the
##  two position coordinates specifies a rectangle in which the plot will lie.
##
##  Optional features include the ability to specify axes labels, label
##  format and plot title. You can also
##  manually specify the x and y plot ranges (by default they are computed
##  automatically). The Border instance variable is used to create space
##  between the boundary of the plot window (specified by PositionCoordinate
##  and Position2Coordinate) and the plot itself.
##
##  The font property of the plot title can be modified through the
##  TitleTextProperty attribute.
##  The font property of the axes titles and labels can be modified through the
##  AxisTitleTextProperty and AxisLabelTextProperty attributes. You may also
##  use the GetXAxisActor2D or GetYAxisActor2D methods
##  to access each individual axis actor to modify their font properties.
##  In the same way, the GetLegendBoxActor method can be used to access
##  the legend box actor to modify its font properties.
##
##  There are several advanced features as well. You can assign per curve
##  properties (such as color and a plot symbol). (Note that each input
##  dataset and/or data object creates a single curve.) Another option is to
##  add a plot legend that graphically indicates the correspondence between
##  the curve, curve symbols, and the data source. You can also exchange the
##  x and y axes if you prefer you plot orientation that way.
##
##  @warning
##  If you are interested in plotting something other than scalar data, you
##  can use the vtk data shuffling filters (e.g.,
##  vtkAttributeDataToFieldDataFilter and vtkFieldDataToAttributeDataFilter)
##  to convert the data into scalar data and/or points.
##
##  @par Thanks:
##  This class was written by:
##  Will Schroeder, Jim Miller, Charles Law, Sebastien Barre, Amy Squillacote,
##  Ken Martin, Mathieu Malaterre, Jeff Lee, Francois Finet, Julien Bertel,
##  Claire Guilbaud, and Philippe Pebay
##
##  @sa
##  vtkActor2D vtkTextMapper vtkScalarBarActor vtkAxisActor2D vtkCubeAxesActor2D
##  vtkAttributeDataToFieldDataFilter vtkFieldDataToAttributeDataFilter
##  vtkTextProperty
##

## !!!Ignored construct:  # vtkXYPlotActor_h [NewLine] # vtkXYPlotActor_h [NewLine] # VTK_XYPLOT_INDEX 0 [NewLine] # VTK_XYPLOT_ARC_LENGTH 1 [NewLine] # VTK_XYPLOT_NORMALIZED_ARC_LENGTH 2 [NewLine] # VTK_XYPLOT_VALUE 3 [NewLine] # VTK_XYPLOT_ROW 0 [NewLine] # VTK_XYPLOT_COLUMN 1 [NewLine] # VTK_XYPLOT_Y_AXIS_TOP 0 [NewLine] # VTK_XYPLOT_Y_AXIS_HCENTER 1 [NewLine] # VTK_XYPLOT_Y_AXIS_VCENTER 2  rotate by 90 degrees (y-axis aligned) [NewLine] # vtkActor2D.h [NewLine] # vtkRenderingAnnotationModule.h  For export macro # vtkSmartPointer.h  For SP [NewLine] class vtkXYPlotActorConnections ;
## Error: token expected: ; but got: [identifier]!!!

discard "forward decl of vtkAlgorithmOutput"
discard "forward decl of vtkAppendPolyData"
discard "forward decl of vtkAxisActor2D"
discard "forward decl of vtkDataObject"
discard "forward decl of vtkDataObjectCollection"
discard "forward decl of vtkDataSet"
discard "forward decl of vtkDataSetCollection"
discard "forward decl of vtkDoubleArray"
discard "forward decl of vtkGlyph2D"
discard "forward decl of vtkGlyphSource2D"
discard "forward decl of vtkIntArray"
discard "forward decl of vtkLegendBoxActor"
discard "forward decl of vtkPlanes"
discard "forward decl of vtkPolyData"
discard "forward decl of vtkPolyDataMapper2D"
discard "forward decl of vtkTextActor"
discard "forward decl of vtkTextMapper"
discard "forward decl of vtkTextProperty"
## !!!Ignored construct:  class VTKRENDERINGANNOTATION_EXPORT vtkXYPlotActor : public vtkActor2D { public : protected : const char * GetClassNameInternal ( ) const override { return thisClass ; } public : typedef vtkActor2D Superclass ; static vtkTypeBool IsTypeOf ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 1 ; } return vtkActor2D :: IsTypeOf ( type ) ; } vtkTypeBool IsA ( const char * type ) override { return this -> vtkXYPlotActor :: IsTypeOf ( type ) ; } static vtkXYPlotActor * SafeDownCast ( vtkObjectBase * o ) { if ( o && o -> IsA ( thisClass ) ) { return static_cast < vtkXYPlotActor * > ( o ) ; } return nullptr ; } VTK_NEWINSTANCE vtkXYPlotActor * NewInstance ( ) const { return vtkXYPlotActor :: SafeDownCast ( this -> NewInstanceInternal ( ) ) ; } static vtkIdType GetNumberOfGenerationsFromBaseType ( const char * type ) { if ( ! strcmp ( thisClass , type ) ) { return 0 ; } return 1 + vtkActor2D :: GetNumberOfGenerationsFromBaseType ( type ) ; } vtkIdType GetNumberOfGenerationsFromBase ( const char * type ) override { return this -> vtkXYPlotActor :: GetNumberOfGenerationsFromBaseType ( type ) ; } public : protected : vtkObjectBase * NewInstanceInternal ( ) const override { return vtkXYPlotActor :: New ( ) ; } public : ; void PrintSelf ( ostream & os , vtkIndent indent ) override ; *
##  Instantiate object with autorange computation; bold, italic, and shadows
##  on; arial font family; the number of labels set to 5 for the x and y
##  axes; a label format of "%-#6.3g"; and x coordinates computed from point
##  ids.
##  static vtkXYPlotActor * New ( ) ; ---Data Set Input----------------------------------------------------------
##  The following methods are used to plot input datasets. Datasets
##  will be plotted if set as input; otherwise the input data objects
##  will be plotted (if defined). /@{ *
##  Add a dataset to the list of data to append. The array name specifies
##  which point array to plot. The array must be a vtkDataArray subclass, i.e.
##  a numeric array. If the array name is NULL, then the default
##  scalars are used.  The array can have multiple components, but only the
##  first component is ploted. Note that AddInputDataSet() does not setup
##  a pipeline connection whereas AddInputConnection() does.
##  void AddDataSetInput ( vtkDataSet * ds , const char * arrayName , int component ) ; void AddDataSetInput ( vtkDataSet * ds ) { this -> AddDataSetInput ( ds , nullptr , 0 ) ; } void AddDataSetInputConnection ( vtkAlgorithmOutput * in , const char * arrayName , int component ) ; void AddDataSetInputConnection ( vtkAlgorithmOutput * in ) { this -> AddDataSetInputConnection ( in , nullptr , 0 ) ; } /@} /@{ *
##  Remove a dataset from the list of data to append.
##  void RemoveDataSetInput ( vtkDataSet * ds , const char * arrayName , int component ) ; void RemoveDataSetInput ( vtkDataSet * ds ) { this -> RemoveDataSetInput ( ds , nullptr , 0 ) ; } void RemoveDataSetInputConnection ( vtkAlgorithmOutput * in , const char * arrayName , int component ) ; void RemoveDataSetInputConnection ( vtkAlgorithmOutput * in ) { this -> RemoveDataSetInputConnection ( in , nullptr , 0 ) ; } /@} *
##  This removes all of the data set inputs,
##  but does not change the data object inputs.
##  void RemoveAllDataSetInputConnections ( ) ; /@{ *
##  If plotting points by value, which component to use to determine the
##  value. This sets a value per each input dataset (i.e., the ith dataset).
##  void SetPointComponent ( int i , int comp ) ; int GetPointComponent ( int i ) ; ---end Data Set Input-----------------------------------------------------
## /@} /@{ *
##  Specify how the independent (x) variable is computed from the points.
##  The independent variable can be the scalar/point index (i.e., point id),
##  the accumulated arc length along the points, the normalized arc length,
##  or by component value. If plotting datasets (e.g., points), the value
##  that is used is specified by the PointComponent ivar.  (Note: these
##  methods also control how field data is plotted. Field data is usually
##  plotted by value or index, if plotting length 1-dimensional length
##  measures are used.)
##  virtual void SetXValues ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << XValues  to  << _arg ) ; if ( this -> XValues != ( _arg < VTK_XYPLOT_INDEX ? VTK_XYPLOT_INDEX : ( _arg > VTK_XYPLOT_VALUE ? VTK_XYPLOT_VALUE : _arg ) ) ) { this -> XValues = ( _arg < VTK_XYPLOT_INDEX ? VTK_XYPLOT_INDEX : ( _arg > VTK_XYPLOT_VALUE ? VTK_XYPLOT_VALUE : _arg ) ) ; this -> Modified ( ) ; } } virtual int GetXValuesMinValue ( ) { return VTK_XYPLOT_INDEX ; } virtual int GetXValuesMaxValue ( ) { return VTK_XYPLOT_VALUE ; } ; virtual int GetXValues ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << XValues  of  << this -> XValues ) ; return this -> XValues ; } ; void SetXValuesToIndex ( ) { this -> SetXValues ( VTK_XYPLOT_INDEX ) ; } void SetXValuesToArcLength ( ) { this -> SetXValues ( VTK_XYPLOT_ARC_LENGTH ) ; } void SetXValuesToNormalizedArcLength ( ) { this -> SetXValues ( VTK_XYPLOT_NORMALIZED_ARC_LENGTH ) ; } void SetXValuesToValue ( ) { this -> SetXValues ( VTK_XYPLOT_VALUE ) ; } const char * GetXValuesAsString ( ) ; /@} ---Data Object Input------------------------------------------------------
##  The following methods are used to plot input data objects. Datasets will
##  be plotted in preference to data objects if set as input; otherwise the
##  input data objects will be plotted (if defined). /@{ *
##  Add a data object to the list of data to display.
##  void AddDataObjectInput ( vtkDataObject * in ) ; void AddDataObjectInputConnection ( vtkAlgorithmOutput * alg ) ; /@} /@{ *
##  Remove a dataset from the list of data to display.
##  void RemoveDataObjectInputConnection ( vtkAlgorithmOutput * aout ) ; void RemoveDataObjectInput ( vtkDataObject * in ) ; /@} /@{ *
##  Indicate whether to plot rows or columns. If plotting rows, then
##  the dependent variables is taken from a specified row,
##  versus rows (y).
##  virtual void SetXValuesDataObjectPlotMode ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << DataObjectPlotMode  to  << _arg ) ; if ( this -> DataObjectPlotMode != ( _arg < VTK_XYPLOT_ROW ? VTK_XYPLOT_ROW : ( _arg > VTK_XYPLOT_COLUMN ? VTK_XYPLOT_COLUMN : _arg ) ) ) { this -> DataObjectPlotMode = ( _arg < VTK_XYPLOT_ROW ? VTK_XYPLOT_ROW : ( _arg > VTK_XYPLOT_COLUMN ? VTK_XYPLOT_COLUMN : _arg ) ) ; this -> Modified ( ) ; } } virtual int GetXValuesMinValueDataObjectPlotModeMinValue ( ) { return VTK_XYPLOT_ROW ; } virtual int GetXValuesMaxValueDataObjectPlotModeMaxValue ( ) { return VTK_XYPLOT_COLUMN ; } ; virtual int GetXValuesDataObjectPlotMode ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << DataObjectPlotMode  of  << this -> DataObjectPlotMode ) ; return this -> DataObjectPlotMode ; } ; void SetDataObjectPlotModeToRows ( ) { this -> SetDataObjectPlotMode ( VTK_XYPLOT_ROW ) ; } void SetDataObjectPlotModeToColumns ( ) { this -> SetDataObjectPlotMode ( VTK_XYPLOT_COLUMN ) ; } const char * GetDataObjectPlotModeAsString ( ) ; /@} /@{ *
##  Specify which component of the input data object to use as the
##  independent variable for the ith input data object. (This ivar is
##  ignored if plotting the index.) Note that the value is interpreted
##  differently depending on DataObjectPlotMode. If the mode is Rows, then
##  the value of DataObjectXComponent is the row number; otherwise it's the
##  column number.
##  void SetDataObjectXComponent ( int i , int comp ) ; int GetDataObjectXComponent ( int i ) ; /@} /@{ *
##  Specify which component of the input data object to use as the
##  dependent variable for the ith input data object. (This ivar is
##  ignored if plotting the index.) Note that the value is interpreted
##  differently depending on DataObjectPlotMode. If the mode is Rows, then
##  the value of DataObjectYComponent is the row number; otherwise it's the
##  column number.
##  void SetDataObjectYComponent ( int i , int comp ) ; int GetDataObjectYComponent ( int i ) ; ---end Data Object Input--------------------------------------------------
## /@} ---Per Curve Properties---------------------------------------------------
##  The following methods are used to set properties on each curve that is
##  plotted. Each input dataset (or data object) results in one curve. The
##  methods that follow have an index i that corresponds to the input dataset
##  or data object. void SetPlotColor ( int i , double r , double g , double b ) ; void SetPlotColor ( int i , const double color [ 3 ] ) { this -> SetPlotColor ( i , color [ 0 ] , color [ 1 ] , color [ 2 ] ) ; } double * GetPlotColor ( int i ) VTK_SIZEHINT ( 3 ) ; void SetPlotSymbol ( int i , vtkPolyData * input ) ; vtkPolyData * GetPlotSymbol ( int i ) ; void SetPlotLabel ( int i , const char * label ) ; const char * GetPlotLabel ( int i ) ;  Allow per-curve specification of line and point rendering.  These override
##  global settings PlotPoints and PlotLines.  If not on, the default behavior
##  is governed by PlotPoints and PlotLines ivars. virtual vtkTypeBool GetXValuesDataObjectPlotModePlotCurvePoints ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << PlotCurvePoints  of  << this -> PlotCurvePoints ) ; return this -> PlotCurvePoints ; } ; virtual void SetPlotCurvePoints ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  PlotCurvePoints  to  << _arg ) ; if ( this -> PlotCurvePoints != _arg ) { this -> PlotCurvePoints = _arg ; this -> Modified ( ) ; } } ; virtual void PlotCurvePointsOn ( ) { this -> SetPlotCurvePoints ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void PlotCurvePointsOff ( ) { this -> SetPlotCurvePoints ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; virtual vtkTypeBool GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLines ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << PlotCurveLines  of  << this -> PlotCurveLines ) ; return this -> PlotCurveLines ; } ; virtual void SetPlotCurvePointsPlotCurveLines ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  PlotCurveLines  to  << _arg ) ; if ( this -> PlotCurveLines != _arg ) { this -> PlotCurveLines = _arg ; this -> Modified ( ) ; } } ; virtual void PlotCurveLinesOn ( ) { this -> SetPlotCurvePointsPlotCurveLines ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void PlotCurveLinesOff ( ) { this -> SetPlotCurvePointsPlotCurveLines ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; void SetPlotLines ( int i , int ) ; int GetPlotLines ( int i ) ; void SetPlotPoints ( int i , int ) ; int GetPlotPoints ( int i ) ; ---end Per Curve Properties----------------------------------------------- /@{ *
##  Enable/Disable exchange of the x-y axes (i.e., what was x becomes y, and
##  vice-versa). Exchanging axes affects the labeling as well.
##  virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxes ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  ExchangeAxes  to  << _arg ) ; if ( this -> ExchangeAxes != _arg ) { this -> ExchangeAxes = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxes ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ExchangeAxes  of  << this -> ExchangeAxes ) ; return this -> ExchangeAxes ; } ; virtual void ExchangeAxesOn ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxes ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void ExchangeAxesOff ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxes ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Normally the x-axis is plotted from minimum to maximum. Setting this instance
##  variable causes the x-axis to be plotted from maximum to minimum. Note that
##  boolean always applies to the x-axis even if ExchangeAxes is set.
##  virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxis ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  ReverseXAxis  to  << _arg ) ; if ( this -> ReverseXAxis != _arg ) { this -> ReverseXAxis = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxis ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ReverseXAxis  of  << this -> ReverseXAxis ) ; return this -> ReverseXAxis ; } ; virtual void ReverseXAxisOn ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxis ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void ReverseXAxisOff ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxis ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Normally the y-axis is plotted from minimum to maximum. Setting this instance
##  variable causes the y-axis to be plotted from maximum to minimum. Note that
##  boolean always applies to the y-axis even if ExchangeAxes is set.
##  virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxis ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  ReverseYAxis  to  << _arg ) ; if ( this -> ReverseYAxis != _arg ) { this -> ReverseYAxis = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxis ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ReverseYAxis  of  << this -> ReverseYAxis ) ; return this -> ReverseYAxis ; } ; virtual void ReverseYAxisOn ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxis ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void ReverseYAxisOff ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxis ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Retrieve handles to the legend box and glyph source. This is useful
##  if you would like to change the default behavior of the legend box
##  or glyph source. For example, the default glyph can be changed from
##  a line to a vertex plus line, etc.)
##  virtual vtkLegendBoxActor * GetnameLegendActor ( ) { vtkDebugWithObjectMacro ( this , <<  returning  LegendActor  address  << static_cast < vtkLegendBoxActor * > ( this -> LegendActor ) ) ; return this -> LegendActor ; } ; virtual vtkGlyphSource2D * GetnameLegendActorGlyphSource ( ) { vtkDebugWithObjectMacro ( this , <<  returning  GlyphSource  address  << static_cast < vtkGlyphSource2D * > ( this -> GlyphSource ) ) ; return this -> GlyphSource ; } ; /@} /@{ *
##  Set/Get the title of the x-y plot.
##  virtual void SetTitle ( const char * _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << Title  to  << ( _arg ? _arg : (null) ) ) ; if ( this -> Title == nullptr && _arg == nullptr ) { return ; } if ( this -> Title && _arg && ( ! strcmp ( this -> Title , _arg ) ) ) { return ; } delete [ ] this -> Title ; if ( _arg ) { size_t n = strlen ( _arg ) + 1 ; char * cp1 = new char [ n ] ; const char * cp2 = ( _arg ) ; this -> Title = cp1 ; do { * cp1 ++ = * cp2 ++ ; } while ( -- n ) ; } else { this -> Title = nullptr ; } this -> Modified ( ) ; } ; virtual char * GetTitle ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << Title  of  << ( this -> Title ? this -> Title : (null) ) ) ; return this -> Title ; } ; /@} /@{ *
##  Set/Get the title of the x axis
##  virtual void SetTitleXTitle ( const char * _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << XTitle  to  << ( _arg ? _arg : (null) ) ) ; if ( this -> XTitle == nullptr && _arg == nullptr ) { return ; } if ( this -> XTitle && _arg && ( ! strcmp ( this -> XTitle , _arg ) ) ) { return ; } delete [ ] this -> XTitle ; if ( _arg ) { size_t n = strlen ( _arg ) + 1 ; char * cp1 = new char [ n ] ; const char * cp2 = ( _arg ) ; this -> XTitle = cp1 ; do { * cp1 ++ = * cp2 ++ ; } while ( -- n ) ; } else { this -> XTitle = nullptr ; } this -> Modified ( ) ; } ; virtual char * GetTitleXTitle ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << XTitle  of  << ( this -> XTitle ? this -> XTitle : (null) ) ) ; return this -> XTitle ; } ; /@} /@{ *
##  Set/Get the title of the y axis
##  virtual void SetYTitle ( const char * ) ; char * GetYTitle ( ) ; /@} /@{ *
##  Retrieve handles to the X and Y axis (so that you can set their text
##  properties for example)
##  vtkAxisActor2D * GetXAxisActor2D ( ) { return this -> XAxis ; } vtkAxisActor2D * GetYAxisActor2D ( ) { return this -> YAxis ; } /@} /@{ *
##  Set the plot range (range of independent and dependent variables)
##  to plot. Data outside of the range will be clipped. If the plot
##  range of either the x or y variables is set to (v1,v2), where
##  v1 == v2, then the range will be computed automatically. Note that
##  the x-range values should be consistent with the way the independent
##  variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
##  virtual void SetXRange ( double _arg1 , double _arg2 ) { vtkDebugWithObjectMacro ( this , <<  setting  << XRange  to ( << _arg1 << , << _arg2 << ) ) ; if ( ( this -> XRange [ 0 ] != _arg1 ) || ( this -> XRange [ 1 ] != _arg2 ) ) { this -> XRange [ 0 ] = _arg1 ; this -> XRange [ 1 ] = _arg2 ; this -> Modified ( ) ; } } void SetXRange ( const double _arg [ 2 ] ) { this -> SetXRange ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; virtual double * GetXRange ( ) VTK_SIZEHINT ( 2 ) { vtkDebugWithObjectMacro ( this , <<  returning  << XRange  pointer  << this -> XRange ) ; return this -> XRange ; } VTK_WRAPEXCLUDE virtual void GetXRange ( double data [ 2 ] ) { for ( int i = 0 ; i < 2 ; i ++ ) { data [ i ] = this -> XRange [ i ] ; } } ; virtual void SetXRangeYRange ( double _arg1 , double _arg2 ) { vtkDebugWithObjectMacro ( this , <<  setting  << YRange  to ( << _arg1 << , << _arg2 << ) ) ; if ( ( this -> YRange [ 0 ] != _arg1 ) || ( this -> YRange [ 1 ] != _arg2 ) ) { this -> YRange [ 0 ] = _arg1 ; this -> YRange [ 1 ] = _arg2 ; this -> Modified ( ) ; } } void SetXRangeYRange ( const double _arg [ 2 ] ) { this -> SetXRangeYRange ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; virtual double * GetXRangeYRange ( ) VTK_SIZEHINT ( 2 ) { vtkDebugWithObjectMacro ( this , <<  returning  << YRange  pointer  << this -> YRange ) ; return this -> YRange ; } VTK_WRAPEXCLUDE virtual void GetXRangeYRange ( double data [ 2 ] ) { for ( int i = 0 ; i < 2 ; i ++ ) { data [ i ] = this -> YRange [ i ] ; } } ; void SetPlotRange ( double xmin , double ymin , double xmax , double ymax ) { this -> SetXRange ( xmin , xmax ) ; this -> SetYRange ( ymin , ymax ) ; } /@} /@{ *
##  Set/Get the number of annotation labels to show along the x and y axes.
##  This values is a suggestion: the number of labels may vary depending
##  on the particulars of the data. The convenience method
##  SetNumberOfLabels() sets the number of x and y labels to the same value.
##  virtual void SetXValuesDataObjectPlotModeNumberOfXLabels ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << NumberOfXLabels  to  << _arg ) ; if ( this -> NumberOfXLabels != ( _arg < 0 ? 0 : ( _arg > 50 ? 50 : _arg ) ) ) { this -> NumberOfXLabels = ( _arg < 0 ? 0 : ( _arg > 50 ? 50 : _arg ) ) ; this -> Modified ( ) ; } } virtual int GetXValuesMinValueDataObjectPlotModeMinValueNumberOfXLabelsMinValue ( ) { return 0 ; } virtual int GetXValuesMaxValueDataObjectPlotModeMaxValueNumberOfXLabelsMaxValue ( ) { return 50 ; } ; virtual int GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabels ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << NumberOfXLabels  of  << this -> NumberOfXLabels ) ; return this -> NumberOfXLabels ; } ; virtual void SetXValuesDataObjectPlotModeNumberOfXLabelsNumberOfYLabels ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << NumberOfYLabels  to  << _arg ) ; if ( this -> NumberOfYLabels != ( _arg < 0 ? 0 : ( _arg > 50 ? 50 : _arg ) ) ) { this -> NumberOfYLabels = ( _arg < 0 ? 0 : ( _arg > 50 ? 50 : _arg ) ) ; this -> Modified ( ) ; } } virtual int GetXValuesMinValueDataObjectPlotModeMinValueNumberOfXLabelsMinValueNumberOfYLabelsMinValue ( ) { return 0 ; } virtual int GetXValuesMaxValueDataObjectPlotModeMaxValueNumberOfXLabelsMaxValueNumberOfYLabelsMaxValue ( ) { return 50 ; } ; virtual int GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabels ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << NumberOfYLabels  of  << this -> NumberOfYLabels ) ; return this -> NumberOfYLabels ; } ; void SetNumberOfLabels ( int num ) { this -> SetNumberOfXLabels ( num ) ; this -> SetNumberOfYLabels ( num ) ; } /@} /@{ *
##  Set/Get the flag that controls whether the labels and ticks are
##  adjusted for "nice" numerical values to make it easier to read
##  the labels. The adjustment is based in the Range instance variable.
##  Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
##  range and number of labels.
##  void SetAdjustXLabels ( int adjust ) ; virtual int GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabels ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << AdjustXLabels  of  << this -> AdjustXLabels ) ; return this -> AdjustXLabels ; } ; void SetAdjustYLabels ( int adjust ) ; virtual int GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabels ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << AdjustYLabels  of  << this -> AdjustYLabels ) ; return this -> AdjustYLabels ; } ; /@} /@{ *
##  Set/Get the number of minor ticks in X or Y.
##  void SetNumberOfXMinorTicks ( int num ) ; int GetNumberOfXMinorTicks ( ) ; void SetNumberOfYMinorTicks ( int num ) ; int GetNumberOfYMinorTicks ( ) ; /@} /@{ *
##  Enable/Disable the creation of a legend. If on, the legend labels will
##  be created automatically unless the per plot legend symbol has been
##  set.
##  virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegend ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  Legend  to  << _arg ) ; if ( this -> Legend != _arg ) { this -> Legend = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegend ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << Legend  of  << this -> Legend ) ; return this -> Legend ; } ; virtual void LegendOn ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegend ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void LegendOff ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegend ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get the position of the title. This has no effect if
##  AdjustTitlePosition is true.
##  virtual void SetXRangeYRangeTitlePosition ( double _arg1 , double _arg2 ) { vtkDebugWithObjectMacro ( this , <<  setting  << TitlePosition  to ( << _arg1 << , << _arg2 << ) ) ; if ( ( this -> TitlePosition [ 0 ] != _arg1 ) || ( this -> TitlePosition [ 1 ] != _arg2 ) ) { this -> TitlePosition [ 0 ] = _arg1 ; this -> TitlePosition [ 1 ] = _arg2 ; this -> Modified ( ) ; } } void SetXRangeYRangeTitlePosition ( const double _arg [ 2 ] ) { this -> SetXRangeYRangeTitlePosition ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; virtual double * GetTitlePosition ( ) VTK_SIZEHINT ( 2 ) { vtkDebugWithObjectMacro ( this , <<  returning  << TitlePosition  pointer  << this -> TitlePosition ) ; return this -> TitlePosition ; } VTK_WRAPEXCLUDE virtual void GetTitlePosition ( double & _arg1 , double & _arg2 ) { _arg1 = this -> TitlePosition [ 0 ] ; _arg2 = this -> TitlePosition [ 1 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << TitlePosition  = ( << _arg1 << , << _arg2 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetTitlePosition ( double _arg [ 2 ] ) { this -> GetTitlePosition ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; /@} /@{ *
##  If true, the xyplot actor will adjust the position of the title
##  automatically to be upper-middle. Default is true.
##  virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePosition ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  AdjustTitlePosition  to  << _arg ) ; if ( this -> AdjustTitlePosition != _arg ) { this -> AdjustTitlePosition = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegendAdjustTitlePosition ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << AdjustTitlePosition  of  << this -> AdjustTitlePosition ) ; return this -> AdjustTitlePosition ; } ; virtual void AdjustTitlePositionOn ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePosition ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void AdjustTitlePositionOff ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePosition ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} enum Alignment { AlignLeft = 0x1 , AlignRight = 0x2 , AlignHCenter = 0x4 , AlignTop = 0x10 , AlignBottom = 0x20 , AlignVCenter = 0x40 , AlignAxisLeft = 0x100 , AlignAxisRight = 0x200 , AlignAxisHCenter = 0x400 , AlignAxisTop = 0x1000 , AlignAxisBottom = 0x2000 , AlignAxisVCenter = 0x4000 } ; /@{ *
##  If AdjustTitlePosition is true, the xyplot actor will
##  adjust the position of the title automatically depending on the
##  given mode, the mode is a combination of the Alignment flags.
##  by default: vtkXYPlotActor::AlignHCenter | vtkXYPlotActor::Top
##  | vtkXYPlotActor::AlignAxisVCenter
##  virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionAdjustTitlePositionMode ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  AdjustTitlePositionMode  to  << _arg ) ; if ( this -> AdjustTitlePositionMode != _arg ) { this -> AdjustTitlePositionMode = _arg ; this -> Modified ( ) ; } } ; virtual int GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegendAdjustTitlePositionAdjustTitlePositionMode ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << AdjustTitlePositionMode  of  << this -> AdjustTitlePositionMode ) ; return this -> AdjustTitlePositionMode ; } ; /@} /@{ *
##  Use these methods to control the position of the legend. The variables
##  LegendPosition and LegendPosition2 define the lower-left and upper-right
##  position of the legend. The coordinates are expressed as normalized
##  values with respect to the rectangle defined by PositionCoordinate and
##  Position2Coordinate. Note that LegendPosition2 is relative to
##  LegendPosition.
##  virtual void SetXRangeYRangeTitlePositionLegendPosition ( double _arg1 , double _arg2 ) { vtkDebugWithObjectMacro ( this , <<  setting  << LegendPosition  to ( << _arg1 << , << _arg2 << ) ) ; if ( ( this -> LegendPosition [ 0 ] != _arg1 ) || ( this -> LegendPosition [ 1 ] != _arg2 ) ) { this -> LegendPosition [ 0 ] = _arg1 ; this -> LegendPosition [ 1 ] = _arg2 ; this -> Modified ( ) ; } } void SetXRangeYRangeTitlePositionLegendPosition ( const double _arg [ 2 ] ) { this -> SetXRangeYRangeTitlePositionLegendPosition ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; virtual double * GetTitlePositionLegendPosition ( ) VTK_SIZEHINT ( 2 ) { vtkDebugWithObjectMacro ( this , <<  returning  << LegendPosition  pointer  << this -> LegendPosition ) ; return this -> LegendPosition ; } VTK_WRAPEXCLUDE virtual void GetTitlePositionLegendPosition ( double & _arg1 , double & _arg2 ) { _arg1 = this -> LegendPosition [ 0 ] ; _arg2 = this -> LegendPosition [ 1 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << LegendPosition  = ( << _arg1 << , << _arg2 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetTitlePositionLegendPosition ( double _arg [ 2 ] ) { this -> GetTitlePositionLegendPosition ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; virtual void SetXRangeYRangeTitlePositionLegendPositionLegendPosition2 ( double _arg1 , double _arg2 ) { vtkDebugWithObjectMacro ( this , <<  setting  << LegendPosition2  to ( << _arg1 << , << _arg2 << ) ) ; if ( ( this -> LegendPosition2 [ 0 ] != _arg1 ) || ( this -> LegendPosition2 [ 1 ] != _arg2 ) ) { this -> LegendPosition2 [ 0 ] = _arg1 ; this -> LegendPosition2 [ 1 ] = _arg2 ; this -> Modified ( ) ; } } void SetXRangeYRangeTitlePositionLegendPositionLegendPosition2 ( const double _arg [ 2 ] ) { this -> SetXRangeYRangeTitlePositionLegendPositionLegendPosition2 ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; virtual double * GetTitlePositionLegendPositionLegendPosition2 ( ) VTK_SIZEHINT ( 2 ) { vtkDebugWithObjectMacro ( this , <<  returning  << LegendPosition2  pointer  << this -> LegendPosition2 ) ; return this -> LegendPosition2 ; } VTK_WRAPEXCLUDE virtual void GetTitlePositionLegendPositionLegendPosition2 ( double & _arg1 , double & _arg2 ) { _arg1 = this -> LegendPosition2 [ 0 ] ; _arg2 = this -> LegendPosition2 [ 1 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << LegendPosition2  = ( << _arg1 << , << _arg2 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetTitlePositionLegendPositionLegendPosition2 ( double _arg [ 2 ] ) { this -> GetTitlePositionLegendPositionLegendPosition2 ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; /@} /@{ *
##  Set/Get the title text property.
##  virtual void SetTitleTextProperty ( vtkTextProperty * p ) ; virtual vtkTextProperty * GetnameLegendActorGlyphSourceTitleTextProperty ( ) { vtkDebugWithObjectMacro ( this , <<  returning  TitleTextProperty  address  << static_cast < vtkTextProperty * > ( this -> TitleTextProperty ) ) ; return this -> TitleTextProperty ; } ; /@} /@{ *
##  Set/Get the title text property of all axes. Note that each axis can
##  be controlled individually through the GetX/YAxisActor2D() methods.
##  virtual void SetAxisTitleTextProperty ( vtkTextProperty * p ) ; virtual vtkTextProperty * GetnameLegendActorGlyphSourceTitleTextPropertyAxisTitleTextProperty ( ) { vtkDebugWithObjectMacro ( this , <<  returning  AxisTitleTextProperty  address  << static_cast < vtkTextProperty * > ( this -> AxisTitleTextProperty ) ) ; return this -> AxisTitleTextProperty ; } ; /@} /@{ *
##  Set/Get the labels text property of all axes. Note that each axis can
##  be controlled individually through the GetX/YAxisActor2D() methods.
##  virtual void SetAxisLabelTextProperty ( vtkTextProperty * p ) ; virtual vtkTextProperty * GetnameLegendActorGlyphSourceTitleTextPropertyAxisTitleTextPropertyAxisLabelTextProperty ( ) { vtkDebugWithObjectMacro ( this , <<  returning  AxisLabelTextProperty  address  << static_cast < vtkTextProperty * > ( this -> AxisLabelTextProperty ) ) ; return this -> AxisLabelTextProperty ; } ; /@} /@{ *
##  Enable/Disable plotting of Log of x-values.
##  virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionAdjustTitlePositionModeLogx ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  Logx  to  << _arg ) ; if ( this -> Logx != _arg ) { this -> Logx = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegendAdjustTitlePositionAdjustTitlePositionModeLogx ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << Logx  of  << this -> Logx ) ; return this -> Logx ; } ; virtual void LogxOn ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionLogx ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void LogxOff ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionLogx ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get the format with which to print the labels . This sets both X
##  and Y label formats. GetLabelFormat() returns X label format.
##  virtual void SetLabelFormat ( const char * ) ; const char * GetLabelFormat ( ) { return this -> GetXLabelFormat ( ) ; } /@} /@{ *
##  Set/Get the format with which to print the X label.
##  virtual void SetXLabelFormat ( const char * ) ; virtual char * GetTitleXTitleXLabelFormat ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << XLabelFormat  of  << ( this -> XLabelFormat ? this -> XLabelFormat : (null) ) ) ; return this -> XLabelFormat ; } ; /@} /@{ *
##  Set/Get the format with which to print the Y label.
##  virtual void SetYLabelFormat ( const char * ) ; virtual char * GetTitleXTitleXLabelFormatYLabelFormat ( ) { vtkDebugWithObjectMacro ( this , <<  returning  << YLabelFormat  of  << ( this -> YLabelFormat ? this -> YLabelFormat : (null) ) ) ; return this -> YLabelFormat ; } ; /@} /@{ *
##  Set/Get the spacing between the plot window and the plot. The value
##  is specified in pixels.
##  virtual void SetXValuesDataObjectPlotModeNumberOfXLabelsNumberOfYLabelsBorder ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << Border  to  << _arg ) ; if ( this -> Border != ( _arg < 0 ? 0 : ( _arg > 50 ? 50 : _arg ) ) ) { this -> Border = ( _arg < 0 ? 0 : ( _arg > 50 ? 50 : _arg ) ) ; this -> Modified ( ) ; } } virtual int GetXValuesMinValueDataObjectPlotModeMinValueNumberOfXLabelsMinValueNumberOfYLabelsMinValueBorderMinValue ( ) { return 0 ; } virtual int GetXValuesMaxValueDataObjectPlotModeMaxValueNumberOfXLabelsMaxValueNumberOfYLabelsMaxValueBorderMaxValue ( ) { return 50 ; } ; virtual int GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegendAdjustTitlePositionAdjustTitlePositionModeLogxBorder ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << Border  of  << this -> Border ) ; return this -> Border ; } ; /@} /@{ *
##  Set/Get whether the points are rendered.  The point size can be set in
##  the property object. This is a global flag which affects the plot only
##  if per curve symbols are not defined.
##  virtual vtkTypeBool GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegendAdjustTitlePositionAdjustTitlePositionModeLogxBorderPlotPoints ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << PlotPoints  of  << this -> PlotPoints ) ; return this -> PlotPoints ; } ; virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionAdjustTitlePositionModeLogxPlotPoints ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  PlotPoints  to  << _arg ) ; if ( this -> PlotPoints != _arg ) { this -> PlotPoints = _arg ; this -> Modified ( ) ; } } ; virtual void PlotPointsOn ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionLogxPlotPoints ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void PlotPointsOff ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionLogxPlotPoints ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get whether the lines are rendered.  The line width can be set in
##  the property object.
##  virtual vtkTypeBool GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegendAdjustTitlePositionAdjustTitlePositionModeLogxBorderPlotPointsPlotLines ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << PlotLines  of  << this -> PlotLines ) ; return this -> PlotLines ; } ; virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionAdjustTitlePositionModeLogxPlotPointsPlotLines ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  PlotLines  to  << _arg ) ; if ( this -> PlotLines != _arg ) { this -> PlotLines = _arg ; this -> Modified ( ) ; } } ; virtual void PlotLinesOn ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionLogxPlotPointsPlotLines ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void PlotLinesOff ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionLogxPlotPointsPlotLines ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get the factor that controls how big glyphs are in the plot.
##  The number is expressed as a fraction of the length of the diagonal
##  of the plot bounding box.
##  virtual void SetXValuesDataObjectPlotModeNumberOfXLabelsNumberOfYLabelsBorderGlyphSize ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  << GlyphSize  to  << _arg ) ; if ( this -> GlyphSize != ( _arg < 0.0 ? 0.0 : ( _arg > 0.2 ? 0.2 : _arg ) ) ) { this -> GlyphSize = ( _arg < 0.0 ? 0.0 : ( _arg > 0.2 ? 0.2 : _arg ) ) ; this -> Modified ( ) ; } } virtual double GetXValuesMinValueDataObjectPlotModeMinValueNumberOfXLabelsMinValueNumberOfYLabelsMinValueBorderMinValueGlyphSizeMinValue ( ) { return 0.0 ; } virtual double GetXValuesMaxValueDataObjectPlotModeMaxValueNumberOfXLabelsMaxValueNumberOfYLabelsMaxValueBorderMaxValueGlyphSizeMaxValue ( ) { return 0.2 ; } ; virtual double GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegendAdjustTitlePositionAdjustTitlePositionModeLogxBorderPlotPointsPlotLinesGlyphSize ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << GlyphSize  of  << this -> GlyphSize ) ; return this -> GlyphSize ; } ; /@} *
##  Given a position within the viewport used by the plot, return the
##  the plot coordinates (XAxis value, YAxis value)
##  void ViewportToPlotCoordinate ( vtkViewport * viewport , double & u , double & v ) ; /@{ *
##  An alternate form of ViewportToPlotCoordinate() above. This method
##  inputs the viewport coordinate pair (defined by the ivar
##  ViewportCoordinate)and then stores them in the ivar PlotCoordinate.
##  void ViewportToPlotCoordinate ( vtkViewport * viewport ) ; virtual void SetXRangeYRangeTitlePositionLegendPositionLegendPosition2PlotCoordinate ( double _arg1 , double _arg2 ) { vtkDebugWithObjectMacro ( this , <<  setting  << PlotCoordinate  to ( << _arg1 << , << _arg2 << ) ) ; if ( ( this -> PlotCoordinate [ 0 ] != _arg1 ) || ( this -> PlotCoordinate [ 1 ] != _arg2 ) ) { this -> PlotCoordinate [ 0 ] = _arg1 ; this -> PlotCoordinate [ 1 ] = _arg2 ; this -> Modified ( ) ; } } void SetXRangeYRangeTitlePositionLegendPositionLegendPosition2PlotCoordinate ( const double _arg [ 2 ] ) { this -> SetXRangeYRangeTitlePositionLegendPositionLegendPosition2PlotCoordinate ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; virtual double * GetTitlePositionLegendPositionLegendPosition2PlotCoordinate ( ) VTK_SIZEHINT ( 2 ) { vtkDebugWithObjectMacro ( this , <<  returning  << PlotCoordinate  pointer  << this -> PlotCoordinate ) ; return this -> PlotCoordinate ; } VTK_WRAPEXCLUDE virtual void GetTitlePositionLegendPositionLegendPosition2PlotCoordinate ( double & _arg1 , double & _arg2 ) { _arg1 = this -> PlotCoordinate [ 0 ] ; _arg2 = this -> PlotCoordinate [ 1 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << PlotCoordinate  = ( << _arg1 << , << _arg2 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetTitlePositionLegendPositionLegendPosition2PlotCoordinate ( double _arg [ 2 ] ) { this -> GetTitlePositionLegendPositionLegendPosition2PlotCoordinate ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; /@} *
##  Given a plot coordinate, return the viewpoint position
##  void PlotToViewportCoordinate ( vtkViewport * viewport , double & u , double & v ) ; /@{ *
##  An alternate form of PlotToViewportCoordinate() above. This method
##  inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
##  and then stores them in the ivar ViewportCoordinate. (This method
##  can be wrapped.)
##  void PlotToViewportCoordinate ( vtkViewport * viewport ) ; virtual void SetXRangeYRangeTitlePositionLegendPositionLegendPosition2PlotCoordinateViewportCoordinate ( double _arg1 , double _arg2 ) { vtkDebugWithObjectMacro ( this , <<  setting  << ViewportCoordinate  to ( << _arg1 << , << _arg2 << ) ) ; if ( ( this -> ViewportCoordinate [ 0 ] != _arg1 ) || ( this -> ViewportCoordinate [ 1 ] != _arg2 ) ) { this -> ViewportCoordinate [ 0 ] = _arg1 ; this -> ViewportCoordinate [ 1 ] = _arg2 ; this -> Modified ( ) ; } } void SetXRangeYRangeTitlePositionLegendPositionLegendPosition2PlotCoordinateViewportCoordinate ( const double _arg [ 2 ] ) { this -> SetXRangeYRangeTitlePositionLegendPositionLegendPosition2PlotCoordinateViewportCoordinate ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; virtual double * GetTitlePositionLegendPositionLegendPosition2PlotCoordinateViewportCoordinate ( ) VTK_SIZEHINT ( 2 ) { vtkDebugWithObjectMacro ( this , <<  returning  << ViewportCoordinate  pointer  << this -> ViewportCoordinate ) ; return this -> ViewportCoordinate ; } VTK_WRAPEXCLUDE virtual void GetTitlePositionLegendPositionLegendPosition2PlotCoordinateViewportCoordinate ( double & _arg1 , double & _arg2 ) { _arg1 = this -> ViewportCoordinate [ 0 ] ; _arg2 = this -> ViewportCoordinate [ 1 ] ; vtkDebugWithObjectMacro ( this , <<  returning  << ViewportCoordinate  = ( << _arg1 << , << _arg2 << ) ) ; } VTK_WRAPEXCLUDE virtual void GetTitlePositionLegendPositionLegendPosition2PlotCoordinateViewportCoordinate ( double _arg [ 2 ] ) { this -> GetTitlePositionLegendPositionLegendPosition2PlotCoordinateViewportCoordinate ( _arg [ 0 ] , _arg [ 1 ] ) ; } ; /@} *
##  Is the specified viewport position within the plot area (as opposed to the
##  region used by the plot plus the labels)?
##  int IsInPlot ( vtkViewport * viewport , double u , double v ) ; /@{ *
##  Set/Get the flag that controls whether a box will be drawn/filled
##  corresponding to the chart box.
##  virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionAdjustTitlePositionModeLogxPlotPointsPlotLinesChartBox ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  ChartBox  to  << _arg ) ; if ( this -> ChartBox != _arg ) { this -> ChartBox = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegendAdjustTitlePositionAdjustTitlePositionModeLogxBorderPlotPointsPlotLinesGlyphSizeChartBox ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ChartBox  of  << this -> ChartBox ) ; return this -> ChartBox ; } ; virtual void ChartBoxOn ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionLogxPlotPointsPlotLinesChartBox ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void ChartBoxOff ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionLogxPlotPointsPlotLinesChartBox ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get the flag that controls whether a box will be drawn/filled
##  corresponding to the legend box.
##  virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionAdjustTitlePositionModeLogxPlotPointsPlotLinesChartBoxChartBorder ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  ChartBorder  to  << _arg ) ; if ( this -> ChartBorder != _arg ) { this -> ChartBorder = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegendAdjustTitlePositionAdjustTitlePositionModeLogxBorderPlotPointsPlotLinesGlyphSizeChartBoxChartBorder ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ChartBorder  of  << this -> ChartBorder ) ; return this -> ChartBorder ; } ; virtual void ChartBorderOn ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionLogxPlotPointsPlotLinesChartBoxChartBorder ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void ChartBorderOff ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionLogxPlotPointsPlotLinesChartBoxChartBorder ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} *
##  Get the box vtkProperty2D.
##  vtkProperty2D * GetChartBoxProperty ( ) { return this -> ChartBoxActor -> GetProperty ( ) ; } /@{ *
##  Set/Get if the X reference line is visible. hidden by default
##  virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionAdjustTitlePositionModeLogxPlotPointsPlotLinesChartBoxChartBorderShowReferenceXLine ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  ShowReferenceXLine  to  << _arg ) ; if ( this -> ShowReferenceXLine != _arg ) { this -> ShowReferenceXLine = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegendAdjustTitlePositionAdjustTitlePositionModeLogxBorderPlotPointsPlotLinesGlyphSizeChartBoxChartBorderShowReferenceXLine ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ShowReferenceXLine  of  << this -> ShowReferenceXLine ) ; return this -> ShowReferenceXLine ; } ; virtual void ShowReferenceXLineOn ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionLogxPlotPointsPlotLinesChartBoxChartBorderShowReferenceXLine ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void ShowReferenceXLineOff ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionLogxPlotPointsPlotLinesChartBoxChartBorderShowReferenceXLine ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get the value for the X reference line
##  virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionAdjustTitlePositionModeLogxPlotPointsPlotLinesChartBoxChartBorderShowReferenceXLineReferenceXValue ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  ReferenceXValue  to  << _arg ) ; if ( this -> ReferenceXValue != _arg ) { this -> ReferenceXValue = _arg ; this -> Modified ( ) ; } } ; virtual double GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegendAdjustTitlePositionAdjustTitlePositionModeLogxBorderPlotPointsPlotLinesGlyphSizeChartBoxChartBorderShowReferenceXLineReferenceXValue ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ReferenceXValue  of  << this -> ReferenceXValue ) ; return this -> ReferenceXValue ; } ; /@} /@{ *
##  Set/Get if the Y reference line is visible. hidden by default
##  virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionAdjustTitlePositionModeLogxPlotPointsPlotLinesChartBoxChartBorderShowReferenceXLineReferenceXValueShowReferenceYLine ( vtkTypeBool _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  ShowReferenceYLine  to  << _arg ) ; if ( this -> ShowReferenceYLine != _arg ) { this -> ShowReferenceYLine = _arg ; this -> Modified ( ) ; } } ; virtual vtkTypeBool GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegendAdjustTitlePositionAdjustTitlePositionModeLogxBorderPlotPointsPlotLinesGlyphSizeChartBoxChartBorderShowReferenceXLineReferenceXValueShowReferenceYLine ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ShowReferenceYLine  of  << this -> ShowReferenceYLine ) ; return this -> ShowReferenceYLine ; } ; virtual void ShowReferenceYLineOn ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionLogxPlotPointsPlotLinesChartBoxChartBorderShowReferenceXLineShowReferenceYLine ( static_cast < vtkTypeBool > ( 1 ) ) ; } virtual void ShowReferenceYLineOff ( ) { this -> SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionLogxPlotPointsPlotLinesChartBoxChartBorderShowReferenceXLineShowReferenceYLine ( static_cast < vtkTypeBool > ( 0 ) ) ; } ; /@} /@{ *
##  Set/Get the value for the Y reference line
##  virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionAdjustTitlePositionModeLogxPlotPointsPlotLinesChartBoxChartBorderShowReferenceXLineReferenceXValueShowReferenceYLineReferenceYValue ( double _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  ReferenceYValue  to  << _arg ) ; if ( this -> ReferenceYValue != _arg ) { this -> ReferenceYValue = _arg ; this -> Modified ( ) ; } } ; virtual double GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegendAdjustTitlePositionAdjustTitlePositionModeLogxBorderPlotPointsPlotLinesGlyphSizeChartBoxChartBorderShowReferenceXLineReferenceXValueShowReferenceYLineReferenceYValue ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << ReferenceYValue  of  << this -> ReferenceYValue ) ; return this -> ReferenceYValue ; } ; /@} *
##  Take into account the modified time of internal helper classes.
##  vtkMTimeType GetMTime ( ) override ; *
##  Write the XY Ploat Actor as a CSV (comma separated value) representation.
##  void PrintAsCSV ( ostream & os ) ; /@{ *
##  WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE
##  DO NOT USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS.
##  Draw the x-y plot.
##  int RenderOpaqueGeometry ( vtkViewport * ) override ; int RenderOverlay ( vtkViewport * ) override ; int RenderTranslucentPolygonalGeometry ( vtkViewport * ) override { return 0 ; } /@} *
##  Does this prop have some translucent polygonal geometry?
##  vtkTypeBool HasTranslucentPolygonalGeometry ( ) override ; *
##  Release any graphics resources that are being consumed by this actor.
##  The parameter window could be used to determine which graphic
##  resources to release.
##  void ReleaseGraphicsResources ( vtkWindow * ) override ; /@{ *
##  Set/Get the position of the title of X axis.
##  void SetXTitlePosition ( double position ) ; double GetXTitlePosition ( ) ; /@} /@{ *
##  Set/Get the position of the title of Y axis.
##  virtual void SetPlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisLegendAdjustTitlePositionAdjustTitlePositionModeLogxPlotPointsPlotLinesChartBoxChartBorderShowReferenceXLineReferenceXValueShowReferenceYLineReferenceYValueYTitlePosition ( int _arg ) { vtkDebugWithObjectMacro ( this , <<  setting  YTitlePosition  to  << _arg ) ; if ( this -> YTitlePosition != _arg ) { this -> YTitlePosition = _arg ; this -> Modified ( ) ; } } ; virtual int GetXValuesDataObjectPlotModePlotCurvePointsPlotCurveLinesExchangeAxesReverseXAxisReverseYAxisNumberOfXLabelsNumberOfYLabelsAdjustXLabelsAdjustYLabelsLegendAdjustTitlePositionAdjustTitlePositionModeLogxBorderPlotPointsPlotLinesGlyphSizeChartBoxChartBorderShowReferenceXLineReferenceXValueShowReferenceYLineReferenceYValueYTitlePosition ( ) VTK_FUTURE_CONST { vtkDebugWithObjectMacro ( this , <<  returning  << YTitlePosition  of  << this -> YTitlePosition ) ; return this -> YTitlePosition ; } ; void SetYTitlePositionToTop ( ) { this -> SetYTitlePosition ( VTK_XYPLOT_Y_AXIS_TOP ) ; } void SetYTitlePositionToHCenter ( ) { this -> SetYTitlePosition ( VTK_XYPLOT_Y_AXIS_HCENTER ) ; } void SetYTitlePositionToVCenter ( ) { this -> SetYTitlePosition ( VTK_XYPLOT_Y_AXIS_VCENTER ) ; } /@} /@{ *
##  Set plot properties
##  virtual void SetPlotGlyphType ( int , int ) ; virtual void SetLineWidth ( double ) ; virtual void AddUserCurvesPoint ( double , double , double ) ; virtual void RemoveAllActiveCurves ( ) ; /@} /@{ *
##  Set legend properties
##  virtual void SetLegendBorder ( int ) ; virtual void SetLegendBox ( int ) ; virtual void SetLegendUseBackground ( int ) ; virtual void SetLegendBackgroundColor ( double , double , double ) ; /@} /@{ *
##  Set title properties
##  virtual void SetTitleColor ( double , double , double ) ; virtual void SetTitleFontFamily ( int ) ; virtual void SetTitleBold ( int ) ; virtual void SetTitleItalic ( int ) ; virtual void SetTitleShadow ( int ) ; virtual void SetTitleFontSize ( int ) ; virtual void SetTitleJustification ( int ) ; virtual void SetTitleVerticalJustification ( int ) ; /@} /@{ *
##  Set axes properties
##  virtual void SetXAxisColor ( double , double , double ) ; virtual void SetYAxisColor ( double , double , double ) ; /@} /@{ *
##  Set axis title properties
##  virtual void SetAxisTitleColor ( double , double , double ) ; virtual void SetAxisTitleFontFamily ( int ) ; virtual void SetAxisTitleBold ( int ) ; virtual void SetAxisTitleItalic ( int ) ; virtual void SetAxisTitleShadow ( int ) ; virtual void SetAxisTitleFontSize ( int ) ; virtual void SetAxisTitleJustification ( int ) ; virtual void SetAxisTitleVerticalJustification ( int ) ; /@} /@{ *
##  Set axis label properties
##  virtual void SetAxisLabelColor ( double , double , double ) ; virtual void SetAxisLabelFontFamily ( int ) ; virtual void SetAxisLabelBold ( int ) ; virtual void SetAxisLabelItalic ( int ) ; virtual void SetAxisLabelShadow ( int ) ; virtual void SetAxisLabelFontSize ( int ) ; virtual void SetAxisLabelJustification ( int ) ; virtual void SetAxisLabelVerticalJustification ( int ) ; /@} protected : vtkXYPlotActor ( ) ; ~ vtkXYPlotActor ( ) override ; vtkXYPlotActorConnections * InputConnectionHolder ; char * * SelectedInputScalars ;  list of data set arrays to plot vtkIntArray * SelectedInputScalarsComponent ;  list of components vtkXYPlotActorConnections * DataObjectInputConnectionHolder ;  list of data objects to plot char * Title ; char * XTitle ; vtkTextActor * YTitleActor ; int XValues ; int NumberOfXLabels ; int NumberOfYLabels ; vtkTypeBool Logx ; char * XLabelFormat ; char * YLabelFormat ; double XRange [ 2 ] ; double YRange [ 2 ] ; double XComputedRange [ 2 ] ;  range actually used by plot double YComputedRange [ 2 ] ;  range actually used by plot int Border ; vtkTypeBool PlotLines ; vtkTypeBool PlotPoints ; vtkTypeBool PlotCurveLines ; vtkTypeBool PlotCurvePoints ; vtkTypeBool ExchangeAxes ; vtkTypeBool ReverseXAxis ; vtkTypeBool ReverseYAxis ; int AdjustXLabels ; int AdjustYLabels ; vtkTypeBool AdjustTitlePosition ; double TitlePosition [ 2 ] ; int AdjustTitlePositionMode ; vtkTextMapper * TitleMapper ; vtkActor2D * TitleActor ; vtkTextProperty * TitleTextProperty ; vtkAxisActor2D * XAxis ; vtkAxisActor2D * YAxis ; vtkTextProperty * AxisTitleTextProperty ; vtkTextProperty * AxisLabelTextProperty ; double ViewportCoordinate [ 2 ] ; double PlotCoordinate [ 2 ] ;  Handle data objects and datasets int DataObjectPlotMode ; vtkIntArray * XComponent ; vtkIntArray * YComponent ; vtkIntArray * LinesOn ; vtkIntArray * PointsOn ;  The data drawn within the axes. Each curve is one polydata.
##  color is controlled by scalar data. The curves are appended
##  together, possibly glyphed with point symbols. int NumberOfInputs ; vtkPolyData * * PlotData ; vtkGlyph2D * * PlotGlyph ; vtkAppendPolyData * * PlotAppend ; vtkPolyDataMapper2D * * PlotMapper ; vtkActor2D * * PlotActor ; void InitializeEntries ( ) ;  Legends and plot symbols. The legend also keeps track of
##  the symbols and such. vtkTypeBool Legend ; double LegendPosition [ 2 ] ; double LegendPosition2 [ 2 ] ; vtkLegendBoxActor * LegendActor ; vtkGlyphSource2D * GlyphSource ; vtkPlanes * ClipPlanes ; double GlyphSize ;  Background box vtkTypeBool ChartBox ; vtkPolyData * ChartBoxPolyData ; vtkPolyDataMapper2D * ChartBoxMapper ; vtkActor2D * ChartBoxActor ; vtkTypeBool ChartBorder ; vtkPolyData * ChartBorderPolyData ; vtkPolyDataMapper2D * ChartBorderMapper ; vtkActor2D * ChartBorderActor ;  Reference lines vtkTypeBool ShowReferenceXLine ; vtkTypeBool ShowReferenceYLine ; double ReferenceXValue ; double ReferenceYValue ; vtkPolyData * ReferenceLinesPolyData ; vtkPolyDataMapper2D * ReferenceLinesMapper ; vtkActor2D * ReferenceLinesActor ;  Keep track of changes. int CachedSize [ 2 ] ; vtkTimeStamp BuildTime ; void ComputeXRange ( double range [ 2 ] , double * lengths ) ; void ComputeYRange ( double range [ 2 ] ) ; void ComputeDORange ( double xrange [ 2 ] , double yrange [ 2 ] , double * lengths ) ; virtual void CreatePlotData ( int * pos , int * pos2 , double xRange [ 2 ] , double yRange [ 2 ] , double * norms , int numDS , int numDO ) ; void PlaceAxes ( vtkViewport * viewport , const int * size , int pos [ 2 ] , int pos2 [ 2 ] ) ; void GenerateClipPlanes ( int * pos , int * pos2 ) ; double ComputeGlyphScale ( int i , int * pos , int * pos2 ) ; void ClipPlotData ( int * pos , int * pos2 , vtkPolyData * pd ) ; double * TransformPoint ( int pos [ 2 ] , int pos2 [ 2 ] , double x [ 3 ] , double xNew [ 3 ] ) ; vtkSmartPointer < vtkDoubleArray > ActiveCurve ; int YAxisTitleSize ; int ActiveCurveIndex ; int PlotColorIndex ; private : vtkXYPlotActor ( const vtkXYPlotActor & ) = delete ; void operator = ( const vtkXYPlotActor & ) = delete ; bool DoesConnectionMatch ( int i , vtkAlgorithmOutput * in ) ; int IsInputPresent ( vtkAlgorithmOutput * in , const char * arrayName , int component ) ; *
##  Estimated sizes of Y axis title
##  int YTitleSize [ 2 ] ; *
##  Position and orientation of Y axis title
##  int YTitlePosition ; /@{ *
##  Estimated size of Y axis spacing
##  int YTitleDelta ; /@} } ;
## Error: token expected: ; but got: [identifier]!!!
